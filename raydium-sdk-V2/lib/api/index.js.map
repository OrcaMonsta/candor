{"version":3,"sources":["../../src/api/index.ts","../../src/api/api.ts","../../src/common/logger.ts","../../src/common/utility.ts","../../src/module/amount.ts","../../src/common/bignumber.ts","../../node_modules/decimal.js/decimal.mjs","../../src/module/token.ts","../../src/common/pubKey.ts","../../src/raydium/token/constant.ts","../../src/module/fraction.ts","../../src/module/formatter.ts","../../src/module/price.ts","../../src/module/currency.ts","../../src/module/percent.ts","../../src/common/txTool/txTool.ts","../../src/common/txTool/txType.ts","../../src/common/txTool/txUtils.ts","../../src/common/txTool/lookupTable.ts","../../src/common/accountInfo.ts","../../src/common/lodash.ts","../../src/common/programId.ts","../../src/common/pda.ts","../../src/common/transfer.ts","../../src/api/type.ts","../../src/api/url.ts","../../src/api/utils.ts","../../src/raydium/raydium.ts","../../src/raydium/account/account.ts","../../src/raydium/moduleBase.ts","../../src/raydium/account/instruction.ts","../../src/raydium/account/util.ts","../../src/marshmallow/index.ts","../../src/marshmallow/buffer-layout.ts","../../src/raydium/account/layout.ts","../../src/raydium/farm/farm.ts","../../src/raydium/farm/config.ts","../../src/raydium/farm/layout.ts","../../src/raydium/farm/instruction.ts","../../src/raydium/farm/util.ts","../../src/raydium/liquidity/liquidity.ts","../../src/raydium/token/layout.ts","../../src/raydium/token/utils.ts","../../src/raydium/liquidity/instruction.ts","../../src/raydium/liquidity/layout.ts","../../src/raydium/liquidity/stable.ts","../../src/raydium/clmm/instrument.ts","../../src/raydium/clmm/utils/tick.ts","../../src/raydium/clmm/utils/pda.ts","../../src/raydium/clmm/utils/constants.ts","../../src/raydium/clmm/utils/math.ts","../../src/raydium/clmm/utils/pool.ts","../../src/raydium/clmm/utils/tickarrayBitmap.ts","../../src/raydium/clmm/utils/position.ts","../../src/raydium/clmm/layout.ts","../../src/raydium/liquidity/utils.ts","../../src/raydium/liquidity/serum.ts","../../src/raydium/liquidity/constant.ts","../../src/raydium/clmm/clmm.ts","../../src/raydium/cpmm/cpmm.ts","../../src/raydium/cpmm/curve/fee.ts","../../src/raydium/cpmm/curve/constantProduct.ts","../../src/raydium/cpmm/pda.ts","../../src/raydium/cpmm/instruction.ts","../../src/raydium/cpmm/layout.ts","../../src/raydium/tradeV2/trade.ts","../../src/raydium/tradeV2/instrument.ts","../../src/raydium/serum/id.ts","../../src/raydium/serum/layout.ts","../../src/raydium/serum/serum.ts","../../src/raydium/utils1216/utils1216.ts","../../src/raydium/marketV2/createMarket.ts","../../src/raydium/marketV2/instrument.ts","../../src/raydium/marketV2/layout.ts","../../src/raydium/ido/ido.ts","../../src/raydium/ido/instruction.ts","../../src/raydium/ido/layout.ts","../../src/raydium/token/token.ts"],"sourcesContent":["export * from \"./api\";\r\nexport * from \"./type\";\r\nexport * from \"./url\";\r\nexport * from \"./utils\";\r\n","import axios, { AxiosInstance } from \"axios\";\r\n\r\nimport { createLogger, sleep } from \"../common\";\r\nimport { Cluster } from \"../solana\";\r\n\r\nimport {\r\n  ApiClmmConfigInfo,\r\n  ApiV3Token,\r\n  FetchPoolParams,\r\n  PoolsApiReturn,\r\n  ApiV3PoolInfoItem,\r\n  JupTokenType,\r\n  PoolKeys,\r\n  FormatFarmInfoOut,\r\n  FormatFarmKeyOut,\r\n  AvailabilityCheckAPI3,\r\n  PoolFetchType,\r\n  CpmmKeys,\r\n} from \"./type\";\r\nimport { API_URLS, API_URL_CONFIG } from \"./url\";\r\nimport { updateReqHistory } from \"./utils\";\r\nimport { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { solToWSol } from \"../common\";\r\nimport { CpmmPoolInfoLayout } from \"..\";\r\n\r\nconst logger = createLogger(\"Raydium_Api\");\r\nconst poolKeysCache: Map<string, PoolKeys> = new Map();\r\n\r\nexport async function endlessRetry<T>(name: string, call: () => Promise<T>, interval = 1000): Promise<T> {\r\n  let result: T | undefined;\r\n\r\n  while (result == undefined) {\r\n    try {\r\n      logger.debug(`Request ${name} through endlessRetry`);\r\n      result = await call();\r\n    } catch (err) {\r\n      logger.error(`Request ${name} failed, retry after ${interval} ms`, err);\r\n      await sleep(interval);\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport interface ApiProps {\r\n  cluster: Cluster;\r\n  timeout: number;\r\n  logRequests?: boolean;\r\n  logCount?: number;\r\n  urlConfigs?: API_URL_CONFIG;\r\n}\r\n\r\nexport class Api {\r\n  public cluster: Cluster;\r\n\r\n  public api: AxiosInstance;\r\n  public logCount: number;\r\n\r\n  public urlConfigs: API_URL_CONFIG;\r\n\r\n  constructor({ cluster, timeout, logRequests, logCount, urlConfigs }: ApiProps) {\r\n    this.cluster = cluster;\r\n    this.urlConfigs = urlConfigs || {};\r\n    this.logCount = logCount || 1000;\r\n\r\n    this.api = axios.create({ baseURL: this.urlConfigs.BASE_HOST || API_URLS.BASE_HOST, timeout });\r\n\r\n    this.api.interceptors.request.use(\r\n      (config) => {\r\n        // before request\r\n        const { method, baseURL, url } = config;\r\n\r\n        logger.debug(`${method?.toUpperCase()} ${baseURL}${url}`);\r\n\r\n        return config;\r\n      },\r\n      (error) => {\r\n        // request error\r\n        logger.error(`Request failed`);\r\n\r\n        return Promise.reject(error);\r\n      },\r\n    );\r\n    this.api.interceptors.response.use(\r\n      (response) => {\r\n        // 2xx\r\n        const { config, data, status } = response;\r\n        const { method, baseURL, url } = config;\r\n\r\n        if (logRequests) {\r\n          updateReqHistory({\r\n            status,\r\n            url: `${baseURL}${url}`,\r\n            params: config.params,\r\n            data,\r\n            logCount: this.logCount,\r\n          });\r\n        }\r\n\r\n        logger.debug(`${method?.toUpperCase()} ${baseURL}${url}  ${status}`);\r\n\r\n        return data;\r\n      },\r\n      (error) => {\r\n        // https://axios-http.com/docs/handling_errors\r\n        // not 2xx\r\n        const { config, response = {} } = error;\r\n        const { status } = response;\r\n        const { method, baseURL, url } = config;\r\n\r\n        if (logRequests) {\r\n          updateReqHistory({\r\n            status,\r\n            url: `${baseURL}${url}`,\r\n            params: config.params,\r\n            data: error.message,\r\n            logCount: this.logCount,\r\n          });\r\n        }\r\n\r\n        logger.error(`${method.toUpperCase()} ${baseURL}${url} ${status || error.message}`);\r\n\r\n        return Promise.reject(error);\r\n      },\r\n    );\r\n  }\r\n\r\n  async getClmmConfigs(): Promise<ApiClmmConfigInfo[]> {\r\n    const res = await this.api.get(this.urlConfigs.CLMM_CONFIG || API_URLS.CLMM_CONFIG);\r\n    return res.data;\r\n  }\r\n\r\n  async getClmmPoolLines(poolId: string): Promise<{ price: string; liquidity: string }[]> {\r\n    const res = await this.api.get(\r\n      `${this.urlConfigs.POOL_LIQUIDITY_LINE || API_URLS.POOL_LIQUIDITY_LINE}?pool_id=${poolId}`,\r\n    );\r\n    return res.data;\r\n  }\r\n\r\n  async getBlockSlotCountForSecond(endpointUrl?: string): Promise<number> {\r\n    if (!endpointUrl) return 2;\r\n    const res: {\r\n      id: string;\r\n      jsonrpc: string;\r\n      result: { numSlots: number; numTransactions: number; samplePeriodSecs: number; slot: number }[];\r\n    } = await axios.post(endpointUrl, {\r\n      id: \"getRecentPerformanceSamples\",\r\n      jsonrpc: \"2.0\",\r\n      method: \"getRecentPerformanceSamples\",\r\n      params: [4],\r\n    });\r\n    const slotList = res.result.map((data) => data.numSlots);\r\n    return slotList.reduce((a, b) => a + b, 0) / slotList.length / 60;\r\n  }\r\n\r\n  async getChainTimeOffset(): Promise<{ offset: number }> {\r\n    const res = await this.api.get(this.urlConfigs.CHAIN_TIME || API_URLS.CHAIN_TIME);\r\n    return res.data;\r\n  }\r\n\r\n  async getRpcs(): Promise<{\r\n    rpcs: { batch: boolean; name: string; url: string; weight: number }[];\r\n    strategy: string;\r\n  }> {\r\n    return this.api.get(this.urlConfigs.RPCS || API_URLS.RPCS);\r\n  }\r\n\r\n  async getTokenList(): Promise<{ mintList: ApiV3Token[]; blacklist: ApiV3Token[]; whiteList: string[] }> {\r\n    const res = await this.api.get(this.urlConfigs.TOKEN_LIST || API_URLS.TOKEN_LIST);\r\n    return res.data;\r\n  }\r\n\r\n  async getJupTokenList(): Promise<ApiV3Token[]> {\r\n    return this.api.get(\"\", {\r\n      baseURL: this.urlConfigs.JUP_TOKEN_LIST || API_URLS.JUP_TOKEN_LIST,\r\n    });\r\n  }\r\n\r\n  async getTokenInfo(mint: (string | PublicKey)[]): Promise<ApiV3Token[]> {\r\n    const res = await this.api.get(\r\n      (this.urlConfigs.MINT_INFO_ID || API_URLS.MINT_INFO_ID) + `?mints=${mint.map((m) => m.toString()).join(\",\")}`,\r\n    );\r\n    return res.data;\r\n  }\r\n\r\n  async getPoolList(props: FetchPoolParams = {}): Promise<PoolsApiReturn> {\r\n    const { type = \"all\", sort = \"liquidity\", order = \"desc\", page = 0, pageSize = 100 } = props;\r\n    const res = await this.api.get<PoolsApiReturn>(\r\n      (this.urlConfigs.POOL_LIST || API_URLS.POOL_LIST) +\r\n        `?poolType=${type}&poolSortField=${sort}&sortType=${order}&page=${page}&pageSize=${pageSize}`,\r\n    );\r\n    return res.data;\r\n  }\r\n\r\n  async fetchPoolById(props: { ids: string }): Promise<ApiV3PoolInfoItem[]> {\r\n    const { ids } = props;\r\n    const res = await this.api.get((this.urlConfigs.POOL_SEARCH_BY_ID || API_URLS.POOL_SEARCH_BY_ID) + `?ids=${ids}`);\r\n    return res.data;\r\n  }\r\n\r\n  async fetchPoolKeysById(props: { idList: string[] }): Promise<PoolKeys[]> {\r\n    const { idList } = props;\r\n\r\n    const cacheList: PoolKeys[] = [];\r\n\r\n    const readyList = idList.filter((poolId) => {\r\n      if (poolKeysCache.has(poolId)) {\r\n        cacheList.push(poolKeysCache.get(poolId)!);\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    const data: CpmmKeys[] = [];\r\n    const connection = new Connection('https://rpc.ironforge.network/mainnet?apiKey='); // Use appropriate RPC endpoint\r\n      const accounts = (await connection.getProgramAccounts(new PublicKey(\"8yQvrjQuritLntxz6pAaWcEX6CsRMeDmr7baCLnNwEuw\"),\r\n      {\r\n        encoding: \"base64\",\r\n        filters:[\r\n          {\r\n            dataSize: 637\r\n          }\r\n      ]\r\n      }))\r\n      .filter((account:any) => account.pubkey.toString() !== 'AJBTtXxDzoUtZrEPS7ZR5H18gYpLK4r9BH4AxCWD7v1y');\r\n    \r\n    for (const acc of accounts){\r\n      const decodedData = CpmmPoolInfoLayout.decode(acc.account.data)\r\n      data.push({\r\n        programId: new PublicKey(\"8yQvrjQuritLntxz6pAaWcEX6CsRMeDmr7baCLnNwEuw\").toString(),\r\n        id: acc.pubkey.toString(),\r\n        mintA: {\r\n          address: decodedData.mintA.toString(),\r\n          decimals: decodedData.mintDecimalA,\r\n          symbol: '',\r\n          name: '',\r\n          logoURI: '',\r\n          tags: [],\r\n          extensions: {},\r\n          chainId: 101,\r\n          programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\r\n        },\r\n        mintB: {\r\n          address: decodedData.mintB.toString(),\r\n          decimals: decodedData.mintDecimalB,\r\n          symbol: '',\r\n          name: '',\r\n          logoURI: '',\r\n          tags: [],\r\n          extensions: {},\r\n          chainId: 101,\r\n          programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\r\n        },\r\n        vault: {\r\n          A: decodedData.vaultA.toString(),\r\n          B: decodedData.vaultB.toString()\r\n        },\r\n        authority: \"E1oP2yNZXw3dFnUoPygWZPg9u2Gad87VFVPeYWqa6rD6\",\r\n        mintLp: {\r\n          address: decodedData.mintLp.toString(),\r\n          decimals: 9,\r\n          symbol: '',\r\n          name: '',\r\n          logoURI: '',\r\n          tags: [],\r\n          extensions: {},\r\n          chainId: 101,\r\n          programId: \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\r\n        },\r\n        config: {\r\n          id: \"AJBTtXxDzoUtZrEPS7ZR5H18gYpLK4r9BH4AxCWD7v1y\",\r\n          index: 0,\r\n          protocolFeeRate: 120000 / 1_000_000,\r\n          tradeFeeRate: 40000 / 1_000_000,\r\n          fundFeeRate: 40000 / 1_000_000,\r\n          createPoolFee: \"0\"\r\n        }\r\n      });\r\n    }\r\n\r\n    return cacheList.concat(data);\r\n  }\r\n\r\n  async fetchPoolByMints(\r\n    props: {\r\n      mint1: string | PublicKey;\r\n      mint2?: string | PublicKey;\r\n    } & Omit<FetchPoolParams, \"pageSize\">,\r\n  ): Promise<PoolsApiReturn> {\r\n    const {\r\n      mint1: propMint1,\r\n      mint2: propMint2,\r\n      type = PoolFetchType.All,\r\n      sort = \"default\",\r\n      order = \"desc\",\r\n      page = 1,\r\n    } = props;\r\n\r\n    const [mint1, mint2] = [\r\n      propMint1 ? solToWSol(propMint1).toBase58() : propMint1,\r\n      propMint2 && propMint2 !== \"undefined\" ? solToWSol(propMint2).toBase58() : \"\",\r\n    ];\r\n    const [baseMint, quoteMint] = mint2 && mint1 > mint2 ? [mint2, mint1] : [mint1, mint2];\r\n\r\n    const res = await this.api.get(\r\n      (this.urlConfigs.POOL_SEARCH_MINT || API_URLS.POOL_SEARCH_MINT) +\r\n        `?mint1=${baseMint}&mint2=${quoteMint}&poolType=${type}&poolSortField=${sort}&sortType=${order}&pageSize=100&page=${page}`,\r\n    );\r\n    return res.data;\r\n  }\r\n\r\n  async fetchFarmInfoById(props: { ids: string }): Promise<FormatFarmInfoOut[]> {\r\n    const { ids } = props;\r\n\r\n    const res = await this.api.get<FormatFarmInfoOut[]>(\r\n      (this.urlConfigs.FARM_INFO || API_URLS.FARM_INFO) + `?ids=${ids}`,\r\n    );\r\n    return res.data;\r\n  }\r\n\r\n  async fetchFarmKeysById(props: { ids: string }): Promise<FormatFarmKeyOut[]> {\r\n    const { ids } = props;\r\n\r\n    const res = await this.api.get<FormatFarmKeyOut[]>(\r\n      (this.urlConfigs.FARM_KEYS || API_URLS.FARM_KEYS) + `?ids=${ids}`,\r\n    );\r\n    return res.data;\r\n  }\r\n\r\n  async fetchAvailabilityStatus(): Promise<AvailabilityCheckAPI3> {\r\n    const res = await this.api.get<AvailabilityCheckAPI3>(\r\n      this.urlConfigs.CHECK_AVAILABILITY || API_URLS.CHECK_AVAILABILITY,\r\n    );\r\n    return res.data;\r\n  }\r\n\r\n  async sendTxToJito(\r\n    txBase58: string[],\r\n    bundleMode?: boolean,\r\n  ): Promise<{\r\n    jsonrpc: string;\r\n    result: string;\r\n    id: number;\r\n  }> {\r\n    const url = bundleMode\r\n      ? this.urlConfigs.JITO_BUNDLE || API_URLS.JITO_BUNDLE\r\n      : this.urlConfigs.JITO_TRANSACTION || API_URLS.JITO_TRANSACTION;\r\n    const res = await this.api.post<{\r\n      jsonrpc: string;\r\n      result: string;\r\n      id: number;\r\n    }>(\r\n      url,\r\n      {\r\n        jsonrpc: \"2.0\",\r\n        id: 1,\r\n        method: bundleMode ? \"sendBundle\" : \"sendTransaction\",\r\n        params: txBase58,\r\n      },\r\n      {\r\n        baseURL: this.urlConfigs.JITO || API_URLS.JITO,\r\n      },\r\n    );\r\n\r\n    return res.data;\r\n  }\r\n}\r\n","import { get, set } from \"lodash\";\r\n\r\nexport type ModuleName = \"Common.Api\";\r\n\r\nexport enum LogLevel {\r\n  Error,\r\n  Warning,\r\n  Info,\r\n  Debug,\r\n}\r\nexport class Logger {\r\n  private logLevel: LogLevel;\r\n  private name: string;\r\n  constructor(params: { name: string; logLevel?: LogLevel }) {\r\n    this.logLevel = params.logLevel !== undefined ? params.logLevel : LogLevel.Error;\r\n    this.name = params.name;\r\n  }\r\n\r\n  set level(logLevel: LogLevel) {\r\n    this.logLevel = logLevel;\r\n  }\r\n  get time(): string {\r\n    return Date.now().toString();\r\n  }\r\n  get moduleName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  private isLogLevel(level: LogLevel): boolean {\r\n    return level <= this.logLevel;\r\n  }\r\n\r\n  public error(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Error)) return this;\r\n    console.error(this.time, this.name, \"sdk logger error\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public logWithError(...props): Logger {\r\n    // this.error(...props)\r\n    const msg = props.map((arg) => (typeof arg === \"object\" ? JSON.stringify(arg) : arg)).join(\", \");\r\n    throw new Error(msg);\r\n  }\r\n\r\n  public warning(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Warning)) return this;\r\n    console.warn(this.time, this.name, \"sdk logger warning\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public info(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Info)) return this;\r\n    console.info(this.time, this.name, \"sdk logger info\", ...props);\r\n    return this;\r\n  }\r\n\r\n  public debug(...props): Logger {\r\n    if (!this.isLogLevel(LogLevel.Debug)) return this;\r\n    console.debug(this.time, this.name, \"sdk logger debug\", ...props);\r\n    return this;\r\n  }\r\n}\r\n\r\nconst moduleLoggers: { [key in ModuleName]?: Logger } = {};\r\nconst moduleLevels: { [key in ModuleName]?: LogLevel } = {};\r\n\r\nexport function createLogger(moduleName: string): Logger {\r\n  let logger = get(moduleLoggers, moduleName);\r\n  if (!logger) {\r\n    // default level is error\r\n    const logLevel = get(moduleLevels, moduleName);\r\n\r\n    logger = new Logger({ name: moduleName, logLevel });\r\n    set(moduleLoggers, moduleName, logger);\r\n  }\r\n\r\n  return logger;\r\n}\r\n\r\nexport function setLoggerLevel(moduleName: string, level: LogLevel): void {\r\n  set(moduleLevels, moduleName, level);\r\n\r\n  const logger = get(moduleLoggers, moduleName);\r\n  if (logger) logger.level = level;\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { Fraction, Percent, Price, Token, TokenAmount } from \"../module\";\r\nimport { ReplaceType } from \"../raydium/type\";\r\n\r\nimport { tryParsePublicKey } from \"./pubKey\";\r\n\r\nexport async function sleep(ms: number): Promise<void> {\r\n  new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function getTimestamp(): number {\r\n  return new Date().getTime();\r\n}\r\n\r\nexport function notInnerObject(v: unknown): v is Record<string, any> {\r\n  return (\r\n    typeof v === \"object\" &&\r\n    v !== null &&\r\n    ![Token, TokenAmount, PublicKey, Fraction, BN, Price, Percent].some((o) => typeof o === \"object\" && v instanceof o)\r\n  );\r\n}\r\n\r\nexport function jsonInfo2PoolKeys<T>(jsonInfo: T): ReplaceType<T, string, PublicKey> {\r\n  // @ts-expect-error no need type for inner code\r\n  return typeof jsonInfo === \"string\"\r\n    ? tryParsePublicKey(jsonInfo)\r\n    : Array.isArray(jsonInfo)\r\n    ? jsonInfo.map((k) => jsonInfo2PoolKeys(k))\r\n    : notInnerObject(jsonInfo)\r\n    ? Object.fromEntries(Object.entries(jsonInfo).map(([k, v]) => [k, jsonInfo2PoolKeys(v)]))\r\n    : jsonInfo;\r\n}\r\n","import _Big from \"big.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { BigNumberish, BN_TEN, parseBigNumberish, Rounding } from \"../common/bignumber\";\r\nimport { createLogger, Logger } from \"../common/logger\";\r\n\r\nimport toFormat, { WrappedBig } from \"./formatter\";\r\nimport { Fraction } from \"./fraction\";\r\nimport { Token } from \"./token\";\r\nimport { Currency } from \"./currency\";\r\n\r\nconst logger = createLogger(\"Raydium_amount\");\r\n\r\nconst Big = toFormat(_Big);\r\ntype Big = WrappedBig;\r\n\r\nexport function splitNumber(num: string, decimals: number): [string, string] {\r\n  let integral = \"0\";\r\n  let fractional = \"0\";\r\n\r\n  if (num.includes(\".\")) {\r\n    const splited = num.split(\".\");\r\n    if (splited.length === 2) {\r\n      [integral, fractional] = splited;\r\n      fractional = fractional.padEnd(decimals, \"0\");\r\n    } else {\r\n      logger.logWithError(`invalid number string, num: ${num}`);\r\n    }\r\n  } else {\r\n    integral = num;\r\n  }\r\n\r\n  // fix decimals is 0\r\n  return [integral, fractional.slice(0, decimals) || fractional];\r\n}\r\n\r\nexport class TokenAmount extends Fraction {\r\n  public readonly token: Token;\r\n  protected logger: Logger;\r\n\r\n  public constructor(token: Token, amount: BigNumberish, isRaw = true, name?: string) {\r\n    let parsedAmount = new BN(0);\r\n    const multiplier = BN_TEN.pow(new BN(token.decimals));\r\n\r\n    if (isRaw) {\r\n      parsedAmount = parseBigNumberish(amount);\r\n    } else {\r\n      let integralAmount = new BN(0);\r\n      let fractionalAmount = new BN(0);\r\n\r\n      // parse fractional string\r\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\r\n        const [integral, fractional] = splitNumber(amount.toString(), token.decimals);\r\n        integralAmount = parseBigNumberish(integral);\r\n        fractionalAmount = parseBigNumberish(fractional);\r\n      }\r\n\r\n      integralAmount = integralAmount.mul(multiplier);\r\n      parsedAmount = integralAmount.add(fractionalAmount);\r\n    }\r\n\r\n    super(parsedAmount, multiplier);\r\n    this.logger = createLogger(name || \"TokenAmount\");\r\n    this.token = token;\r\n  }\r\n\r\n  public get raw(): BN {\r\n    return this.numerator;\r\n  }\r\n  public isZero(): boolean {\r\n    return this.raw.isZero();\r\n  }\r\n  public gt(other: TokenAmount): boolean {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"gt token not equals\");\r\n    return this.raw.gt(other.raw);\r\n  }\r\n\r\n  /**\r\n   * a less than b\r\n   */\r\n  public lt(other: TokenAmount): boolean {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"lt token not equals\");\r\n    return this.raw.lt(other.raw);\r\n  }\r\n\r\n  public add(other: TokenAmount): TokenAmount {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"add token not equals\");\r\n    return new TokenAmount(this.token, this.raw.add(other.raw));\r\n  }\r\n\r\n  public subtract(other: TokenAmount): TokenAmount {\r\n    if (!this.token.equals(other.token)) this.logger.logWithError(\"sub token not equals\");\r\n    return new TokenAmount(this.token, this.raw.sub(other.raw));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits = this.token.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To fixed\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1.000000000\r\n   * 1.234 -> 1.234000000\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toFixed(\r\n    decimalPlaces = this.token.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    if (decimalPlaces > this.token.decimals) this.logger.logWithError(\"decimals overflow\");\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To exact\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1\r\n   * 1.234 -> 1.234\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toExact(format: object = { groupSeparator: \"\" }): string {\r\n    Big.DP = this.token.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n\r\nexport class CurrencyAmount extends Fraction {\r\n  public readonly currency: Currency;\r\n  protected logger: Logger;\r\n\r\n  public constructor(currency: Currency, amount: BigNumberish, isRaw = true, name?: string) {\r\n    let parsedAmount = new BN(0);\r\n    const multiplier = BN_TEN.pow(new BN(currency.decimals));\r\n\r\n    if (isRaw) {\r\n      parsedAmount = parseBigNumberish(amount);\r\n    } else {\r\n      let integralAmount = new BN(0);\r\n      let fractionalAmount = new BN(0);\r\n\r\n      // parse fractional string\r\n      if (typeof amount === \"string\" || typeof amount === \"number\" || typeof amount === \"bigint\") {\r\n        const [integral, fractional] = splitNumber(amount.toString(), currency.decimals);\r\n        integralAmount = parseBigNumberish(integral);\r\n        fractionalAmount = parseBigNumberish(fractional);\r\n      }\r\n\r\n      integralAmount = integralAmount.mul(multiplier);\r\n      parsedAmount = integralAmount.add(fractionalAmount);\r\n    }\r\n\r\n    super(parsedAmount, multiplier);\r\n    this.logger = createLogger(name || \"TokenAmount\");\r\n    this.currency = currency;\r\n  }\r\n\r\n  public get raw(): BN {\r\n    return this.numerator;\r\n  }\r\n\r\n  public isZero(): boolean {\r\n    return this.raw.isZero();\r\n  }\r\n\r\n  /**\r\n   * a greater than b\r\n   */\r\n  public gt(other: CurrencyAmount): boolean {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"gt currency not equals\");\r\n    return this.raw.gt(other.raw);\r\n  }\r\n\r\n  /**\r\n   * a less than b\r\n   */\r\n  public lt(other: CurrencyAmount): boolean {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"lt currency not equals\");\r\n    return this.raw.lt(other.raw);\r\n  }\r\n\r\n  public add(other: CurrencyAmount): CurrencyAmount {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"add currency not equals\");\r\n    return new CurrencyAmount(this.currency, this.raw.add(other.raw));\r\n  }\r\n\r\n  public sub(other: CurrencyAmount): CurrencyAmount {\r\n    if (!this.currency.equals(other.currency)) this.logger.logWithError(\"sub currency not equals\");\r\n    return new CurrencyAmount(this.currency, this.raw.sub(other.raw));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    return super.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To fixed\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1.000000000\r\n   * 1.234 -> 1.234000000\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toFixed(\r\n    decimalPlaces = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN,\r\n  ): string {\r\n    if (decimalPlaces > this.currency.decimals) this.logger.logWithError(\"decimals overflow\");\r\n\r\n    return super.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n\r\n  /**\r\n   * To exact\r\n   *\r\n   * @example\r\n   * ```\r\n   * 1 -> 1\r\n   * 1.234 -> 1.234\r\n   * 1.123456789876543 -> 1.123456789\r\n   * ```\r\n   */\r\n  public toExact(format: object = { groupSeparator: \"\" }): string {\r\n    Big.DP = this.currency.decimals;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { Token } from \"../module/token\";\r\nimport { Price } from \"../module/price\";\r\nimport { Currency } from \"../module/currency\";\r\nimport { TokenAmount, CurrencyAmount } from \"../module/amount\";\r\nimport { Fraction } from \"../module/fraction\";\r\nimport { Percent } from \"../module/percent\";\r\nimport { SplToken, TokenJson } from \"../raydium/token/type\";\r\nimport { ReplaceType } from \"../raydium/type\";\r\nimport { createLogger } from \"./logger\";\r\nimport { mul } from \"./fractionUtil\";\r\nimport { notInnerObject } from \"./utility\";\r\n\r\nexport enum Rounding {\r\n  ROUND_DOWN,\r\n  ROUND_HALF_UP,\r\n  ROUND_UP,\r\n}\r\n\r\nexport const BN_ZERO = new BN(0);\r\nexport const BN_ONE = new BN(1);\r\nexport const BN_TWO = new BN(2);\r\nexport const BN_THREE = new BN(3);\r\nexport const BN_FIVE = new BN(5);\r\nexport const BN_TEN = new BN(10);\r\nexport const BN_100 = new BN(100);\r\nexport const BN_1000 = new BN(1000);\r\nexport const BN_10000 = new BN(10000);\r\nexport type BigNumberish = BN | string | number | bigint;\r\nexport type Numberish = number | string | bigint | Fraction | BN;\r\n\r\nconst MAX_SAFE = 0x1fffffffffffff;\r\n\r\nexport function parseBigNumberish(value: BigNumberish): BN {\r\n  const logger = createLogger(\"Raydium_parseBigNumberish\");\r\n  // BN\r\n  if (value instanceof BN) {\r\n    return value;\r\n  }\r\n\r\n  if (typeof value === \"string\") {\r\n    if (value.match(/^-?[0-9]+$/)) {\r\n      return new BN(value);\r\n    }\r\n    logger.logWithError(`invalid BigNumberish string: ${value}`);\r\n  }\r\n\r\n  if (typeof value === \"number\") {\r\n    if (value % 1) {\r\n      logger.logWithError(`BigNumberish number underflow: ${value}`);\r\n    }\r\n\r\n    if (value >= MAX_SAFE || value <= -MAX_SAFE) {\r\n      logger.logWithError(`BigNumberish number overflow: ${value}`);\r\n    }\r\n\r\n    return new BN(String(value));\r\n  }\r\n\r\n  if (typeof value === \"bigint\") {\r\n    return new BN(value.toString());\r\n  }\r\n  logger.error(`invalid BigNumberish value: ${value}`);\r\n  return new BN(0); // never reach, because logWithError will throw error\r\n}\r\n\r\nexport function tenExponential(shift: BigNumberish): BN {\r\n  return BN_TEN.pow(parseBigNumberish(shift));\r\n}\r\n\r\n/**\r\n *\r\n * @example\r\n * getIntInfo(0.34) => { numerator: '34', denominator: '100'}\r\n * getIntInfo('0.34') //=> { numerator: '34', denominator: '100'}\r\n */\r\nexport function parseNumberInfo(n: Numberish | undefined): {\r\n  denominator: string;\r\n  numerator: string;\r\n  sign?: string;\r\n  int?: string;\r\n  dec?: string;\r\n} {\r\n  if (n === undefined) return { denominator: \"1\", numerator: \"0\" };\r\n  if (n instanceof BN) {\r\n    return { numerator: n.toString(), denominator: \"1\" };\r\n  }\r\n\r\n  if (n instanceof Fraction) {\r\n    return { denominator: n.denominator.toString(), numerator: n.numerator.toString() };\r\n  }\r\n\r\n  const s = String(n);\r\n  const [, sign = \"\", int = \"\", dec = \"\"] = s.replace(\",\", \"\").match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\r\n  const denominator = \"1\" + \"0\".repeat(dec.length);\r\n  const numerator = sign + (int === \"0\" ? \"\" : int) + dec || \"0\";\r\n  return { denominator, numerator, sign, int, dec };\r\n}\r\n\r\n// round up\r\nexport function divCeil(a: BN, b: BN): BN {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  const dm = a.divmod(b);\r\n\r\n  // Fast case - exact division\r\n  if (dm.mod.isZero()) return dm.div;\r\n\r\n  // Round up\r\n  return dm.div.isNeg() ? dm.div.isubn(1) : dm.div.iaddn(1);\r\n}\r\n\r\nexport function shakeFractionDecimal(n: Fraction): string {\r\n  const [, sign = \"\", int = \"\"] = n.toFixed(2).match(/(-?)(\\d*)\\.?(\\d*)/) ?? [];\r\n  return `${sign}${int}`;\r\n}\r\n\r\nexport function toBN(n: Numberish, decimal: BigNumberish = 0): BN {\r\n  if (n instanceof BN) return n;\r\n  return new BN(shakeFractionDecimal(toFraction(n).mul(BN_TEN.pow(new BN(String(decimal))))));\r\n}\r\n\r\nexport function toFraction(value: Numberish): Fraction {\r\n  //  to complete math format(may have decimal), not int\r\n  if (value instanceof Percent) return new Fraction(value.numerator, value.denominator);\r\n\r\n  if (value instanceof Price) return value.adjusted;\r\n\r\n  // to complete math format(may have decimal), not BN\r\n  if (value instanceof TokenAmount)\r\n    try {\r\n      return toFraction(value.toExact());\r\n    } catch {\r\n      return new Fraction(BN_ZERO);\r\n    }\r\n\r\n  // do not ideal with other fraction value\r\n  if (value instanceof Fraction) return value;\r\n\r\n  // wrap to Fraction\r\n  const n = String(value);\r\n  const details = parseNumberInfo(n);\r\n  return new Fraction(details.numerator, details.denominator);\r\n}\r\n\r\n/**\r\n * @example\r\n * toPercent(3.14) // => Percent { 314.00% }\r\n * toPercent(3.14, { alreadyDecimaled: true }) // => Percent {3.14%}\r\n */\r\nexport function toPercent(\r\n  n: Numberish,\r\n  options?: { /* usually used for backend data */ alreadyDecimaled?: boolean },\r\n): Percent {\r\n  const { numerator, denominator } = parseNumberInfo(n);\r\n  return new Percent(new BN(numerator), new BN(denominator).mul(options?.alreadyDecimaled ? new BN(100) : new BN(1)));\r\n}\r\n\r\nexport function toTokenPrice(params: {\r\n  token: TokenJson | Token | SplToken;\r\n  numberPrice: Numberish;\r\n  decimalDone?: boolean;\r\n}): Price {\r\n  const { token, numberPrice, decimalDone } = params;\r\n  const usdCurrency = new Token({ mint: \"\", decimals: 6, symbol: \"usd\", name: \"usd\", skipMint: true });\r\n  const { numerator, denominator } = parseNumberInfo(numberPrice);\r\n  const parsedNumerator = decimalDone ? new BN(numerator).mul(BN_TEN.pow(new BN(token.decimals))) : numerator;\r\n  const parsedDenominator = new BN(denominator).mul(BN_TEN.pow(new BN(usdCurrency.decimals)));\r\n\r\n  return new Price({\r\n    baseToken: usdCurrency,\r\n    denominator: parsedDenominator.toString(),\r\n    quoteToken: new Token({ ...token, skipMint: true, mint: \"\" }),\r\n    numerator: parsedNumerator.toString(),\r\n  });\r\n}\r\n\r\nexport function toUsdCurrency(amount: Numberish): CurrencyAmount {\r\n  const usdCurrency = new Currency({ decimals: 6, symbol: \"usd\", name: \"usd\" });\r\n  const amountBigNumber = toBN(mul(amount, 10 ** usdCurrency.decimals)!);\r\n  return new CurrencyAmount(usdCurrency, amountBigNumber);\r\n}\r\n\r\nexport function toTotalPrice(amount: Numberish | undefined, price: Price | undefined): CurrencyAmount {\r\n  if (!price || !amount) return toUsdCurrency(0);\r\n  return toUsdCurrency(mul(amount, price)!);\r\n}\r\n\r\nexport function decimalToFraction(n: Decimal | undefined): Fraction | undefined {\r\n  if (n == null) return undefined;\r\n  const { numerator, denominator } = parseNumberInfo(n.toString());\r\n  return new Fraction(numerator, denominator);\r\n}\r\n\r\nexport function isDecimal(val: unknown): boolean {\r\n  return val instanceof Decimal;\r\n}\r\n\r\nexport function recursivelyDecimalToFraction<T>(info: T): ReplaceType<T, Decimal, Fraction> {\r\n  // @ts-expect-error no need type for inner code\r\n  return isDecimal(info)\r\n    ? decimalToFraction(info as any)\r\n    : Array.isArray(info)\r\n    ? info.map((k) => recursivelyDecimalToFraction(k))\r\n    : notInnerObject(info)\r\n    ? Object.fromEntries(Object.entries(info as any).map(([k, v]) => [k, recursivelyDecimalToFraction(v)]))\r\n    : info;\r\n}\r\n","/*\r\n *  decimal.js v10.3.1\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n  tag = '[object Decimal]',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { toStringTag: tag };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nP.clampedTo = P.clamp = function (min, max) {\r\n  var k,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n  min = new Ctor(min);\r\n  max = new Ctor(max);\r\n  if (!min.s || !max.s) return new Ctor(NaN);\r\n  if (min.gt(max)) throw Error(invalidArgument + max);\r\n  k = x.cmp(min);\r\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = mathpow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var halfPi,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.asin();\r\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return halfPi.minus(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, len, y;\r\n\r\n  if (x.isZero()) return x;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  len = x.d.length;\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\r\nfunction maxOrMin(Ctor, args, ltgt) {\r\n  var y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    } else if (x[ltgt](y)) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str.indexOf('_') > -1) {\r\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n    if (isDecimal.test(str)) return parseDecimal(x, str);\r\n  } else if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n  }\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  x = x.times(1 / tinyPow(5, k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Exponent e must be positive and non-zero.\r\nfunction tinyPow(b, e) {\r\n  var n = b;\r\n  while (--e) n *= b;\r\n  return n;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|Decimal}\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nfunction clamp(x, min, max) {\r\n  return new this(x).clamp(min, max);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (isDecimalInstance(v)) {\r\n      x.s = v.s;\r\n\r\n      if (external) {\r\n        if (!v.d || v.e > Decimal.maxE) {\r\n\r\n          // Infinity.\r\n          x.e = NaN;\r\n          x.d = null;\r\n        } else if (v.e < Decimal.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d.slice();\r\n        }\r\n      } else {\r\n        x.e = v.e;\r\n        x.d = v.d ? v.d.slice() : v.d;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n        if (external) {\r\n          if (e > Decimal.maxE) {\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (e < Decimal.minE) {\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n        } else {\r\n          x.e = e;\r\n          x.d = [v];\r\n        }\r\n\r\n        return;\r\n\r\n      // Infinity, NaN.\r\n      } else if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n\r\n    } else if (t !== 'string') {\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    // Minus sign?\r\n    if ((i = v.charCodeAt(0)) === 45) {\r\n      v = v.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      // Plus sign?\r\n      if (i === 43) v = v.slice(1);\r\n      x.s = 1;\r\n    }\r\n\r\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.clamp = clamp;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.sum = sum;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, 'lt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 'gt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction sum() {\r\n  var i = 0,\r\n    args = arguments,\r\n    x = new this(args[i]);\r\n\r\n  external = false;\r\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n  external = true;\r\n\r\n  return finalise(x, this.precision, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\nP[Symbol.toStringTag] = 'Decimal';\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = P.constructor = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { PublicKeyish, SOLMint, validateAndParsePublicKey } from \"../common/pubKey\";\r\nimport { TOKEN_WSOL } from \"../raydium/token/constant\";\r\n\r\n/**\r\n * A token is any fungible financial instrument on Solana, including SOL and all SPL tokens.\r\n */\r\nexport interface TokenProps {\r\n  mint: PublicKeyish;\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n  skipMint?: boolean;\r\n  isToken2022?: boolean;\r\n}\r\n\r\nexport class Token {\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n  public readonly decimals: number;\r\n  public readonly isToken2022: boolean;\r\n\r\n  public readonly mint: PublicKey;\r\n  public static readonly WSOL: Token = new Token({\r\n    ...TOKEN_WSOL,\r\n    mint: TOKEN_WSOL.address,\r\n  });\r\n\r\n  /**\r\n   *\r\n   * @param mint - pass \"sol\" as mint will auto generate wsol token config\r\n   */\r\n  public constructor({ mint, decimals, symbol, name, skipMint = false, isToken2022 = false }: TokenProps) {\r\n    if (mint === SOLMint.toBase58() || (mint instanceof PublicKey && SOLMint.equals(mint))) {\r\n      this.decimals = TOKEN_WSOL.decimals;\r\n      this.symbol = TOKEN_WSOL.symbol;\r\n      this.name = TOKEN_WSOL.name;\r\n      this.mint = new PublicKey(TOKEN_WSOL.address);\r\n      this.isToken2022 = false;\r\n      return;\r\n    }\r\n\r\n    this.decimals = decimals;\r\n    this.symbol = symbol || mint.toString().substring(0, 6);\r\n    this.name = name || mint.toString().substring(0, 6);\r\n    this.mint = skipMint ? PublicKey.default : validateAndParsePublicKey({ publicKey: mint });\r\n    this.isToken2022 = isToken2022;\r\n  }\r\n\r\n  public equals(other: Token): boolean {\r\n    // short circuit on reference equality\r\n    if (this === other) {\r\n      return true;\r\n    }\r\n    return this.mint.equals(other.mint);\r\n  }\r\n}\r\n","import { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\r\n\r\ninterface AccountMetaProps {\r\n  pubkey: PublicKey;\r\n  isSigner?: boolean;\r\n  isWritable?: boolean;\r\n}\r\n\r\nexport function accountMeta({ pubkey, isSigner = false, isWritable = true }: AccountMetaProps): AccountMeta {\r\n  return {\r\n    pubkey,\r\n    isWritable,\r\n    isSigner,\r\n  };\r\n}\r\n\r\nexport const commonSystemAccountMeta = [\r\n  accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n  accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\r\n];\r\n\r\nexport type PublicKeyish = PublicKey | string;\r\n\r\nexport function validateAndParsePublicKey({\r\n  publicKey: orgPubKey,\r\n  transformSol,\r\n}: {\r\n  publicKey: PublicKeyish;\r\n  transformSol?: boolean;\r\n}): PublicKey {\r\n  const publicKey = tryParsePublicKey(orgPubKey.toString());\r\n\r\n  if (publicKey instanceof PublicKey) {\r\n    if (transformSol && publicKey.equals(SOLMint)) return WSOLMint;\r\n    return publicKey;\r\n  }\r\n\r\n  if (transformSol && publicKey.toString() === SOLMint.toBase58()) return WSOLMint;\r\n\r\n  if (typeof publicKey === \"string\") {\r\n    if (publicKey === PublicKey.default.toBase58()) return PublicKey.default;\r\n    try {\r\n      const key = new PublicKey(publicKey);\r\n      return key;\r\n    } catch {\r\n      throw new Error(\"invalid public key\");\r\n    }\r\n  }\r\n\r\n  throw new Error(\"invalid public key\");\r\n}\r\n\r\nexport function tryParsePublicKey(v: string): PublicKey | string {\r\n  try {\r\n    return new PublicKey(v);\r\n  } catch (e) {\r\n    return v;\r\n  }\r\n}\r\n\r\nexport const MEMO_PROGRAM_ID = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const MEMO_PROGRAM_ID2 = new PublicKey(\"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr\");\r\nexport const RENT_PROGRAM_ID = new PublicKey(\"SysvarRent111111111111111111111111111111111\");\r\nexport const CLOCK_PROGRAM_ID = new PublicKey(\"SysvarC1ock11111111111111111111111111111111\");\r\nexport const METADATA_PROGRAM_ID = new PublicKey(\"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\");\r\nexport const INSTRUCTION_PROGRAM_ID = new PublicKey(\"Sysvar1nstructions1111111111111111111111111\");\r\nexport const SYSTEM_PROGRAM_ID = SystemProgram.programId;\r\n\r\nexport const RAYMint = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\r\nexport const PAIMint = new PublicKey(\"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\");\r\nexport const SRMMint = new PublicKey(\"SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\");\r\nexport const USDCMint = new PublicKey(\"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\");\r\nexport const USDTMint = new PublicKey(\"Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\");\r\nexport const mSOLMint = new PublicKey(\"mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So\");\r\nexport const stSOLMint = new PublicKey(\"7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj\");\r\nexport const USDHMint = new PublicKey(\"USDH1SM1ojwWUga67PGrgFWUHibbjqMvuMaDkRJTgkX\");\r\nexport const NRVMint = new PublicKey(\"NRVwhjBQiUPYtfDT5zRBVJajzFQHaBUNtC7SNVvqRFa\");\r\nexport const ANAMint = new PublicKey(\"ANAxByE6G2WjFp7A4NqtWYXb3mgruyzZYg3spfxe6Lbo\");\r\nexport const ETHMint = new PublicKey(\"7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs\");\r\nexport const WSOLMint = new PublicKey(\"So11111111111111111111111111111111111111112\");\r\nexport const SOLMint = PublicKey.default;\r\n\r\nexport function solToWSol(mint: PublicKeyish): PublicKey {\r\n  return validateAndParsePublicKey({ publicKey: mint, transformSol: true });\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { TokenInfo } from \"./type\";\r\n\r\nexport const SOL_INFO: TokenInfo = {\r\n  chainId: 101,\r\n  address: PublicKey.default.toBase58(),\r\n  programId: TOKEN_PROGRAM_ID.toBase58(),\r\n  decimals: 9,\r\n  symbol: \"SOL\",\r\n  name: \"solana\",\r\n  logoURI: `https://img.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\r\n  tags: [],\r\n  priority: 2,\r\n  type: \"raydium\",\r\n  extensions: {\r\n    coingeckoId: \"solana\",\r\n  },\r\n};\r\n\r\nexport const TOKEN_WSOL: TokenInfo = {\r\n  chainId: 101,\r\n  address: \"So11111111111111111111111111111111111111112\",\r\n  programId: TOKEN_PROGRAM_ID.toBase58(),\r\n  decimals: 9,\r\n  symbol: \"WSOL\",\r\n  name: \"Wrapped SOL\",\r\n  logoURI: `https://img.raydium.io/icon/So11111111111111111111111111111111111111112.png`,\r\n  tags: [],\r\n  priority: 2,\r\n  type: \"raydium\",\r\n  extensions: {\r\n    coingeckoId: \"solana\",\r\n  },\r\n};\r\n","import _Big from \"big.js\";\r\nimport BN from \"bn.js\";\r\nimport _Decimal from \"decimal.js-light\";\r\n\r\nimport { BigNumberish, parseBigNumberish, Rounding } from \"../common/bignumber\";\r\nimport { createLogger } from \"../common/logger\";\r\n\r\nimport toFormat, { WrappedBig } from \"./formatter\";\r\n\r\nconst logger = createLogger(\"module/fraction\");\r\n\r\nconst Big = toFormat(_Big);\r\ntype Big = WrappedBig;\r\n\r\nconst Decimal = toFormat(_Decimal);\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n};\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: _Big.roundDown,\r\n  [Rounding.ROUND_HALF_UP]: _Big.roundHalfUp,\r\n  [Rounding.ROUND_UP]: _Big.roundUp,\r\n};\r\n\r\nexport class Fraction {\r\n  public readonly numerator: BN;\r\n  public readonly denominator: BN;\r\n\r\n  public constructor(numerator: BigNumberish, denominator: BigNumberish = new BN(1)) {\r\n    this.numerator = parseBigNumberish(numerator);\r\n    this.denominator = parseBigNumberish(denominator);\r\n  }\r\n\r\n  public get quotient(): BN {\r\n    return this.numerator.div(this.denominator);\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator);\r\n  }\r\n\r\n  public add(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    if (this.denominator.eq(otherParsed.denominator)) {\r\n      return new Fraction(this.numerator.add(otherParsed.numerator), this.denominator);\r\n    }\r\n\r\n    return new Fraction(\r\n      this.numerator.mul(otherParsed.denominator).add(otherParsed.numerator.mul(this.denominator)),\r\n      this.denominator.mul(otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public sub(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    if (this.denominator.eq(otherParsed.denominator)) {\r\n      return new Fraction(this.numerator.sub(otherParsed.numerator), this.denominator);\r\n    }\r\n\r\n    return new Fraction(\r\n      this.numerator.mul(otherParsed.denominator).sub(otherParsed.numerator.mul(this.denominator)),\r\n      this.denominator.mul(otherParsed.denominator),\r\n    );\r\n  }\r\n\r\n  public mul(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    return new Fraction(this.numerator.mul(otherParsed.numerator), this.denominator.mul(otherParsed.denominator));\r\n  }\r\n\r\n  public div(other: Fraction | BigNumberish): Fraction {\r\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigNumberish(other));\r\n\r\n    return new Fraction(this.numerator.mul(otherParsed.denominator), this.denominator.mul(otherParsed.numerator));\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: \"\" },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    if (!Number.isInteger(significantDigits)) logger.logWithError(`${significantDigits} is not an integer.`);\r\n    if (significantDigits <= 0) logger.logWithError(`${significantDigits} is not positive.`);\r\n\r\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits);\r\n    return quotient.toFormat(quotient.decimalPlaces(), format);\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: \"\" },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP,\r\n  ): string {\r\n    if (!Number.isInteger(decimalPlaces)) logger.logWithError(`${decimalPlaces} is not an integer.`);\r\n    if (decimalPlaces < 0) logger.logWithError(`${decimalPlaces} is negative.`);\r\n\r\n    Big.DP = decimalPlaces;\r\n    Big.RM = toFixedRounding[rounding] || 1;\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\r\n  }\r\n\r\n  public isZero(): boolean {\r\n    return this.numerator.isZero();\r\n  }\r\n}\r\n","import Big, { BigConstructor, BigSource, RoundingMode } from \"big.js\";\r\nimport Decimal, { Config, Numeric } from \"decimal.js-light\";\r\nimport _toFarmat from \"toformat\";\r\n\r\ntype TakeStatic<T> = { [P in keyof T]: T[P] };\r\ninterface FormatOptions {\r\n  decimalSeparator?: string;\r\n  groupSeparator?: string;\r\n  groupSize?: number;\r\n  fractionGroupSeparator?: string;\r\n  fractionGroupSize?: number;\r\n}\r\ninterface WrappedBigConstructor extends TakeStatic<BigConstructor> {\r\n  new (value: BigSource): WrappedBig;\r\n  (value: BigSource): WrappedBig;\r\n  (): WrappedBigConstructor;\r\n\r\n  format: FormatOptions;\r\n}\r\nexport interface WrappedBig extends Big {\r\n  add(n: BigSource): WrappedBig;\r\n  abs(): WrappedBig;\r\n  div(n: BigSource): WrappedBig;\r\n  minus(n: BigSource): WrappedBig;\r\n  mod(n: BigSource): WrappedBig;\r\n  mul(n: BigSource): WrappedBig;\r\n  plus(n: BigSource): WrappedBig;\r\n  pow(exp: number): WrappedBig;\r\n  round(dp?: number, rm?: RoundingMode): WrappedBig;\r\n  sqrt(): WrappedBig;\r\n  sub(n: BigSource): WrappedBig;\r\n  times(n: BigSource): WrappedBig;\r\n  toFormat(): string;\r\n  toFormat(options: FormatOptions): string;\r\n  toFormat(fractionLength: number): string;\r\n  toFormat(fractionLength: number, options: FormatOptions): string;\r\n  toFormat(fractionLength: number, missionUnknown: number): string;\r\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\r\n}\r\n\r\ntype DecimalConstructor = typeof Decimal;\r\ninterface WrappedDecimalConstructor extends TakeStatic<DecimalConstructor> {\r\n  new (value: Numeric): WrappedDecimal;\r\n  clone(config?: Config): WrappedDecimalConstructor;\r\n  config(config: Config): WrappedDecimal;\r\n  set(config: Config): WrappedDecimal;\r\n  format: FormatOptions;\r\n}\r\nexport interface WrappedDecimal extends Decimal {\r\n  absoluteValue(): WrappedDecimal;\r\n  abs(): WrappedDecimal;\r\n  dividedBy(y: Numeric): WrappedDecimal;\r\n  div(y: Numeric): WrappedDecimal;\r\n  dividedToIntegerBy(y: Numeric): WrappedDecimal;\r\n  idiv(y: Numeric): WrappedDecimal;\r\n  logarithm(base?: Numeric): WrappedDecimal;\r\n  log(base?: Numeric): WrappedDecimal;\r\n  minus(y: Numeric): WrappedDecimal;\r\n  sub(y: Numeric): WrappedDecimal;\r\n  modulo(y: Numeric): WrappedDecimal;\r\n  mod(y: Numeric): WrappedDecimal;\r\n  naturalExponetial(): WrappedDecimal;\r\n  exp(): WrappedDecimal;\r\n  naturalLogarithm(): WrappedDecimal;\r\n  ln(): WrappedDecimal;\r\n  negated(): WrappedDecimal;\r\n  neg(): WrappedDecimal;\r\n  plus(y: Numeric): WrappedDecimal;\r\n  add(y: Numeric): WrappedDecimal;\r\n  squareRoot(): WrappedDecimal;\r\n  sqrt(): WrappedDecimal;\r\n  times(y: Numeric): WrappedDecimal;\r\n  mul(y: Numeric): WrappedDecimal;\r\n  toWrappedDecimalPlaces(dp?: number, rm?: number): WrappedDecimal;\r\n  todp(dp?: number, rm?: number): WrappedDecimal;\r\n  toInteger(): WrappedDecimal;\r\n  toint(): WrappedDecimal;\r\n  toPower(y: Numeric): WrappedDecimal;\r\n  pow(y: Numeric): WrappedDecimal;\r\n  toSignificantDigits(sd?: number, rm?: number): WrappedDecimal;\r\n  tosd(sd?: number, rm?: number): WrappedDecimal;\r\n  toFormat(options: FormatOptions): string;\r\n  toFormat(fractionLength: number): string;\r\n  toFormat(fractionLength: number, options: FormatOptions): string;\r\n  toFormat(fractionLength: number, missionUnknown: number): string;\r\n  toFormat(fractionLength: number, missionUnknown: number, options: FormatOptions): string;\r\n}\r\n\r\nconst toFormat: {\r\n  (fn: BigConstructor): WrappedBigConstructor;\r\n  (fn: DecimalConstructor): WrappedDecimalConstructor;\r\n} = _toFarmat;\r\nexport default toFormat;\r\n","import { BigNumberish, Rounding, tenExponential } from \"../common/bignumber\";\r\nimport { createLogger } from \"../common/logger\";\r\n\r\nimport { Fraction } from \"./fraction\";\r\nimport { Token } from \"./token\";\r\n\r\nconst logger = createLogger(\"Raydium_price\");\r\n\r\ninterface PriceProps {\r\n  baseToken: Token;\r\n  denominator: BigNumberish;\r\n  quoteToken: Token;\r\n  numerator: BigNumberish;\r\n}\r\n\r\nexport class Price extends Fraction {\r\n  public readonly baseToken: Token; // input i.e. denominator\r\n  public readonly quoteToken: Token; // output i.e. numerator\r\n  // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n  public readonly scalar: Fraction;\r\n\r\n  // denominator and numerator _must_ be raw, i.e. in the native representation\r\n  public constructor(params: PriceProps) {\r\n    const { baseToken, quoteToken, numerator, denominator } = params;\r\n    super(numerator, denominator);\r\n\r\n    this.baseToken = baseToken;\r\n    this.quoteToken = quoteToken;\r\n    this.scalar = new Fraction(tenExponential(baseToken.decimals), tenExponential(quoteToken.decimals));\r\n  }\r\n\r\n  public get raw(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator);\r\n  }\r\n\r\n  public get adjusted(): Fraction {\r\n    return super.mul(this.scalar);\r\n  }\r\n\r\n  public invert(): Price {\r\n    return new Price({\r\n      baseToken: this.quoteToken,\r\n      quoteToken: this.baseToken,\r\n      denominator: this.numerator,\r\n      numerator: this.denominator,\r\n    });\r\n  }\r\n\r\n  public mul(other: Price): Price {\r\n    if (this.quoteToken !== other.baseToken) logger.logWithError(\"mul token not equals\");\r\n\r\n    const fraction = super.mul(other);\r\n    return new Price({\r\n      baseToken: this.baseToken,\r\n      quoteToken: other.quoteToken,\r\n      denominator: fraction.denominator,\r\n      numerator: fraction.numerator,\r\n    });\r\n  }\r\n\r\n  public toSignificant(significantDigits = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces = this.quoteToken.decimals, format?: object, rounding?: Rounding): string {\r\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import { SOL_INFO } from \"../raydium/token/constant\";\r\n\r\nimport { Token } from \"./token\";\r\n\r\ninterface CurrencyProps {\r\n  decimals: number;\r\n  symbol?: string;\r\n  name?: string;\r\n}\r\n/**\r\n * A currency is any fungible financial instrument on Solana, including SOL and all SPL tokens.\r\n * The only instance of the base class `Currency` is SOL.\r\n */\r\nexport class Currency {\r\n  public readonly symbol?: string;\r\n  public readonly name?: string;\r\n  public readonly decimals: number;\r\n\r\n  /**\r\n   * The only instance of the base class `Currency`.\r\n   */\r\n  public static readonly SOL: Currency = new Currency(SOL_INFO);\r\n\r\n  /**\r\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.SOL`.\r\n   * @param decimals - decimals of the currency\r\n   * @param symbol - symbol of the currency\r\n   * @param name - name of the currency\r\n   */\r\n  public constructor({ decimals, symbol = \"UNKNOWN\", name = \"UNKNOWN\" }: CurrencyProps) {\r\n    this.decimals = decimals;\r\n    this.symbol = symbol;\r\n    this.name = name;\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return this === other;\r\n  }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB);\r\n  } else if (currencyA instanceof Token || currencyB instanceof Token) {\r\n    return false;\r\n  } else {\r\n    return currencyA === currencyB;\r\n  }\r\n}\r\n","import { Rounding } from \"../common/bignumber\";\r\nimport BN from \"bn.js\";\r\nimport { Fraction } from \"./fraction\";\r\n\r\nexport const _100_PERCENT = new Fraction(new BN(100));\r\n\r\nexport class Percent extends Fraction {\r\n  public toSignificant(significantDigits = 5, format?: object, rounding?: Rounding): string {\r\n    return this.mul(_100_PERCENT).toSignificant(significantDigits, format, rounding);\r\n  }\r\n\r\n  public toFixed(decimalPlaces = 2, format?: object, rounding?: Rounding): string {\r\n    return this.mul(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\r\n  }\r\n}\r\n","import {\r\n  Connection,\r\n  PublicKey,\r\n  sendAndConfirmTransaction,\r\n  Signer,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionMessage,\r\n  VersionedTransaction,\r\n  Commitment,\r\n} from \"@solana/web3.js\";\r\nimport axios from \"axios\";\r\n\r\nimport { SignAllTransactions, ComputeBudgetConfig } from \"@/raydium/type\";\r\nimport { Api } from \"@/api\";\r\nimport { Cluster } from \"@/solana\";\r\nimport { TxVersion } from \"./txType\";\r\nimport { Owner } from \"../owner\";\r\nimport { getRecentBlockHash, addComputeBudget, checkLegacyTxSize, checkV0TxSize, printSimulate } from \"./txUtils\";\r\nimport { CacheLTA, getMultipleLookupTableInfo, LOOKUP_TABLE_CACHE } from \"./lookupTable\";\r\n\r\ninterface SolanaFeeInfo {\r\n  min: number;\r\n  max: number;\r\n  avg: number;\r\n  priorityTx: number;\r\n  nonVotes: number;\r\n  priorityRatio: number;\r\n  avgCuPerBlock: number;\r\n  blockspaceUsageRatio: number;\r\n}\r\ntype SolanaFeeInfoJson = {\r\n  \"1\": SolanaFeeInfo;\r\n  \"5\": SolanaFeeInfo;\r\n  \"15\": SolanaFeeInfo;\r\n};\r\n\r\ninterface ExecuteParams {\r\n  skipPreflight?: boolean;\r\n  recentBlockHash?: string;\r\n  sendAndConfirm?: boolean;\r\n}\r\n\r\ninterface TxBuilderInit {\r\n  connection: Connection;\r\n  feePayer: PublicKey;\r\n  cluster: Cluster;\r\n  owner?: Owner;\r\n  blockhashCommitment?: Commitment;\r\n  api?: Api;\r\n  signAllTransactions?: SignAllTransactions;\r\n}\r\n\r\nexport interface AddInstructionParam {\r\n  addresses?: Record<string, PublicKey>;\r\n  instructions?: TransactionInstruction[];\r\n  endInstructions?: TransactionInstruction[];\r\n  lookupTableAddress?: string[];\r\n  signers?: Signer[];\r\n  instructionTypes?: string[];\r\n  endInstructionTypes?: string[];\r\n}\r\n\r\nexport interface TxBuildData<T = Record<string, any>> {\r\n  builder: TxBuilder;\r\n  transaction: Transaction;\r\n  instructionTypes: string[];\r\n  signers: Signer[];\r\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: Transaction }>;\r\n  extInfo: T;\r\n}\r\n\r\nexport interface TxV0BuildData<T = Record<string, any>> extends Omit<TxBuildData<T>, \"transaction\" | \"execute\"> {\r\n  builder: TxBuilder;\r\n  transaction: VersionedTransaction;\r\n  buildProps?: {\r\n    lookupTableCache?: CacheLTA;\r\n    lookupTableAddress?: string[];\r\n  };\r\n  execute: (params?: ExecuteParams) => Promise<{ txId: string; signedTx: VersionedTransaction }>;\r\n}\r\n\r\ntype TxUpdateParams = {\r\n  txId: string;\r\n  status: \"success\" | \"error\" | \"sent\";\r\n  signedTx: Transaction | VersionedTransaction;\r\n};\r\nexport interface MultiTxExecuteParam extends ExecuteParams {\r\n  sequentially: boolean;\r\n  onTxUpdate?: (completeTxs: TxUpdateParams[]) => void;\r\n}\r\nexport interface MultiTxBuildData<T = Record<string, any>> {\r\n  builder: TxBuilder;\r\n  transactions: Transaction[];\r\n  instructionTypes: string[];\r\n  signers: Signer[][];\r\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: Transaction[] }>;\r\n  extInfo: T;\r\n}\r\n\r\nexport interface MultiTxV0BuildData<T = Record<string, any>>\r\n  extends Omit<MultiTxBuildData<T>, \"transactions\" | \"execute\"> {\r\n  builder: TxBuilder;\r\n  transactions: VersionedTransaction[];\r\n  buildProps?: {\r\n    lookupTableCache?: CacheLTA;\r\n    lookupTableAddress?: string[];\r\n  };\r\n  execute: (executeParams?: MultiTxExecuteParam) => Promise<{ txIds: string[]; signedTxs: VersionedTransaction[] }>;\r\n}\r\n\r\nexport type MakeMultiTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\r\n  ? MultiTxBuildData<O>\r\n  : MultiTxV0BuildData<O>;\r\n\r\nexport type MakeTxData<T = TxVersion.LEGACY, O = Record<string, any>> = T extends TxVersion.LEGACY\r\n  ? TxBuildData<O>\r\n  : TxV0BuildData<O>;\r\n\r\nexport class TxBuilder {\r\n  private connection: Connection;\r\n  private owner?: Owner;\r\n  private instructions: TransactionInstruction[] = [];\r\n  private endInstructions: TransactionInstruction[] = [];\r\n  private lookupTableAddress: string[] = [];\r\n  private signers: Signer[] = [];\r\n  private instructionTypes: string[] = [];\r\n  private endInstructionTypes: string[] = [];\r\n  private feePayer: PublicKey;\r\n  private cluster: Cluster;\r\n  private signAllTransactions?: SignAllTransactions;\r\n  private blockhashCommitment?: Commitment;\r\n  private api?: Api;\r\n\r\n  constructor(params: TxBuilderInit) {\r\n    this.connection = params.connection;\r\n    this.feePayer = params.feePayer;\r\n    this.signAllTransactions = params.signAllTransactions;\r\n    this.owner = params.owner;\r\n    this.cluster = params.cluster;\r\n    this.blockhashCommitment = params.blockhashCommitment;\r\n    this.api = params.api;\r\n  }\r\n\r\n  get AllTxData(): {\r\n    instructions: TransactionInstruction[];\r\n    endInstructions: TransactionInstruction[];\r\n    signers: Signer[];\r\n    instructionTypes: string[];\r\n    endInstructionTypes: string[];\r\n    lookupTableAddress: string[];\r\n  } {\r\n    return {\r\n      instructions: this.instructions,\r\n      endInstructions: this.endInstructions,\r\n      signers: this.signers,\r\n      instructionTypes: this.instructionTypes,\r\n      endInstructionTypes: this.endInstructionTypes,\r\n      lookupTableAddress: this.lookupTableAddress,\r\n    };\r\n  }\r\n\r\n  get allInstructions(): TransactionInstruction[] {\r\n    return [...this.instructions, ...this.endInstructions];\r\n  }\r\n\r\n  public async getComputeBudgetConfig(): Promise<ComputeBudgetConfig | undefined> {\r\n    const json = (\r\n      await axios.get<SolanaFeeInfoJson>(`https://solanacompass.com/api/fees?cacheFreshTime=${5 * 60 * 1000}`)\r\n    ).data;\r\n    const { avg } = json?.[15] ?? {};\r\n    if (!avg) return undefined;\r\n    return {\r\n      units: 600000,\r\n      microLamports: Math.min(Math.ceil((avg * 1000000) / 600000), 25000),\r\n    };\r\n  }\r\n\r\n  public addCustomComputeBudget(config?: ComputeBudgetConfig): boolean {\r\n    if (config) {\r\n      const { instructions, instructionTypes } = addComputeBudget(config);\r\n      this.instructions.unshift(...instructions);\r\n      this.instructionTypes.unshift(...instructionTypes);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public async calComputeBudget({\r\n    config: propConfig,\r\n    defaultIns,\r\n  }: {\r\n    config?: ComputeBudgetConfig;\r\n    defaultIns?: TransactionInstruction[];\r\n  }): Promise<void> {\r\n    try {\r\n      const config = propConfig || (await this.getComputeBudgetConfig());\r\n      if (this.addCustomComputeBudget(config)) return;\r\n      defaultIns && this.instructions.unshift(...defaultIns);\r\n    } catch {\r\n      defaultIns && this.instructions.unshift(...defaultIns);\r\n    }\r\n  }\r\n\r\n  public addInstruction({\r\n    instructions = [],\r\n    endInstructions = [],\r\n    signers = [],\r\n    instructionTypes = [],\r\n    endInstructionTypes = [],\r\n    lookupTableAddress = [],\r\n  }: AddInstructionParam): TxBuilder {\r\n    this.instructions.push(...instructions);\r\n    this.endInstructions.push(...endInstructions);\r\n    this.signers.push(...signers);\r\n    this.instructionTypes.push(...instructionTypes);\r\n    this.endInstructionTypes.push(...endInstructionTypes);\r\n    this.lookupTableAddress.push(...lookupTableAddress.filter((address) => address !== PublicKey.default.toString()));\r\n    return this;\r\n  }\r\n\r\n  public async versionBuild<O = Record<string, any>>({\r\n    txVersion,\r\n    extInfo,\r\n  }: {\r\n    txVersion?: TxVersion;\r\n    extInfo?: O;\r\n  }): Promise<MakeTxData<TxVersion.LEGACY, O> | MakeTxData<TxVersion.V0, O>> {\r\n    if (txVersion === TxVersion.V0) return (await this.buildV0({ ...(extInfo || {}) })) as MakeTxData<TxVersion.V0, O>;\r\n    return this.build<O>(extInfo) as MakeTxData<TxVersion.LEGACY, O>;\r\n  }\r\n\r\n  public build<O = Record<string, any>>(extInfo?: O): MakeTxData<TxVersion.LEGACY, O> {\r\n    const transaction = new Transaction();\r\n    if (this.allInstructions.length) transaction.add(...this.allInstructions);\r\n    transaction.feePayer = this.feePayer;\r\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\r\n      this.signers.push(this.owner.signer);\r\n\r\n    return {\r\n      builder: this,\r\n      transaction,\r\n      signers: this.signers,\r\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\r\n      execute: async (params) => {\r\n        const { recentBlockHash: propBlockHash, skipPreflight = true, sendAndConfirm } = params || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        transaction.recentBlockhash = recentBlockHash;\r\n        if (this.signers.length) transaction.sign(...this.signers);\r\n\r\n        printSimulate([transaction]);\r\n        if (this.owner?.isKeyPair) {\r\n          const txId = sendAndConfirm\r\n            ? await sendAndConfirmTransaction(\r\n                this.connection,\r\n                transaction,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              )\r\n            : await this.connection.sendRawTransaction(transaction.serialize(), { skipPreflight });\r\n\r\n          return {\r\n            txId,\r\n            signedTx: transaction,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const txs = await this.signAllTransactions([transaction]);\r\n          return {\r\n            txId: await this.connection.sendRawTransaction(txs[0].serialize(), { skipPreflight }),\r\n            signedTx: txs[0],\r\n          };\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || ({} as O),\r\n    };\r\n  }\r\n\r\n  public buildMultiTx<T = Record<string, any>>(params: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.LEGACY>[];\r\n    extInfo?: T;\r\n  }): MultiTxBuildData {\r\n    const { extraPreBuildData = [], extInfo } = params;\r\n    const { transaction } = this.build(extInfo);\r\n\r\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.transaction.instructions.length > 0);\r\n\r\n    const allTransactions: Transaction[] = [transaction, ...filterExtraBuildData.map((data) => data.transaction)];\r\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\r\n    const allInstructionTypes: string[] = [\r\n      ...this.instructionTypes,\r\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\r\n    ];\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: allInstructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              const txId = await sendAndConfirmTransaction(\r\n                this.connection,\r\n                tx,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return {\r\n              txIds,\r\n              signedTxs: allTransactions,\r\n            };\r\n          }\r\n          return {\r\n            txIds: await await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                tx.recentBlockhash = recentBlockHash;\r\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n\r\n        if (this.signAllTransactions) {\r\n          const partialSignedTxs = allTransactions.map((tx, idx) => {\r\n            tx.recentBlockhash = recentBlockHash;\r\n            if (allSigners[idx].length) tx.sign(...allSigners[idx]);\r\n            return tx;\r\n          });\r\n          printSimulate(partialSignedTxs);\r\n          const signedTxs = await this.signAllTransactions(partialSignedTxs);\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n              this.connection.onSignature(\r\n                txId,\r\n                (signatureResult) => {\r\n                  const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                  if (targetTxIdx > -1) processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                  onTxUpdate?.([...processedTxs]);\r\n                  if (!signatureResult.err) checkSendTx();\r\n                },\r\n                \"processed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            await checkSendTx();\r\n            return {\r\n              txIds: processedTxs.map((d) => d.txId),\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return {\r\n              txIds,\r\n              signedTxs,\r\n            };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async versionMultiBuild<T extends TxVersion, O = Record<string, any>>({\r\n    extraPreBuildData,\r\n    txVersion,\r\n    extInfo,\r\n  }: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[] | MakeTxData<TxVersion.LEGACY>[];\r\n    txVersion?: T;\r\n    extInfo?: O;\r\n  }): Promise<MakeMultiTxData<T, O>> {\r\n    if (txVersion === TxVersion.V0)\r\n      return (await this.buildV0MultiTx({\r\n        extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.V0>[],\r\n        buildProps: extInfo || {},\r\n      })) as MakeMultiTxData<T, O>;\r\n    return this.buildMultiTx<O>({\r\n      extraPreBuildData: extraPreBuildData as MakeTxData<TxVersion.LEGACY>[],\r\n      extInfo,\r\n    }) as MakeMultiTxData<T, O>;\r\n  }\r\n\r\n  public async buildV0<O = Record<string, any>>(\r\n    props?: O & {\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n      forerunCreate?: boolean;\r\n    },\r\n  ): Promise<MakeTxData<TxVersion.V0, O>> {\r\n    const { lookupTableCache = {}, lookupTableAddress = [], forerunCreate, ...extInfo } = props || {};\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\" ? {} : LOOKUP_TABLE_CACHE),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...lookupTableAddress, ...this.lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const messageV0 = new TransactionMessage({\r\n      payerKey: this.feePayer,\r\n      recentBlockhash: forerunCreate\r\n        ? PublicKey.default.toBase58()\r\n        : await getRecentBlockHash(this.connection, this.blockhashCommitment),\r\n      instructions: [...this.allInstructions],\r\n    }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n\r\n    if (this.owner?.signer && !this.signers.some((s) => s.publicKey.equals(this.owner!.publicKey)))\r\n      this.signers.push(this.owner.signer);\r\n    const transaction = new VersionedTransaction(messageV0);\r\n    transaction.sign(this.signers);\r\n\r\n    return {\r\n      builder: this,\r\n      transaction,\r\n      signers: this.signers,\r\n      instructionTypes: [...this.instructionTypes, ...this.endInstructionTypes],\r\n      execute: async (params) => {\r\n        const { recentBlockHash: propBlockHash, skipPreflight = true, sendAndConfirm } = params || {};\r\n        if (propBlockHash) transaction.message.recentBlockhash = propBlockHash;\r\n        printSimulate([transaction]);\r\n        if (this.owner?.isKeyPair) {\r\n          const txId = await this.connection.sendTransaction(transaction, { skipPreflight });\r\n          if (sendAndConfirm) {\r\n            const { lastValidBlockHeight, blockhash } = await this.connection.getLatestBlockhash({\r\n              commitment: this.blockhashCommitment,\r\n            });\r\n            await this.connection.confirmTransaction(\r\n              {\r\n                blockhash,\r\n                lastValidBlockHeight,\r\n                signature: txId,\r\n              },\r\n              \"confirmed\",\r\n            );\r\n          }\r\n\r\n          return {\r\n            txId,\r\n            signedTx: transaction,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const txs = await this.signAllTransactions<VersionedTransaction>([transaction]);\r\n          return {\r\n            txId: await this.connection.sendTransaction(txs[0], { skipPreflight }),\r\n            signedTx: txs[0],\r\n          };\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: (extInfo || {}) as O,\r\n    };\r\n  }\r\n\r\n  public async buildV0MultiTx<T = Record<string, any>>(params: {\r\n    extraPreBuildData?: MakeTxData<TxVersion.V0>[];\r\n    buildProps?: T & {\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n    };\r\n  }): Promise<MultiTxV0BuildData> {\r\n    const { extraPreBuildData = [], buildProps } = params;\r\n    const { transaction } = await this.buildV0(buildProps);\r\n\r\n    const filterExtraBuildData = extraPreBuildData.filter((data) => data.builder.instructions.length > 0);\r\n\r\n    const allTransactions: VersionedTransaction[] = [\r\n      transaction,\r\n      ...filterExtraBuildData.map((data) => data.transaction),\r\n    ];\r\n    const allSigners: Signer[][] = [this.signers, ...filterExtraBuildData.map((data) => data.signers)];\r\n    const allInstructionTypes: string[] = [\r\n      ...this.instructionTypes,\r\n      ...filterExtraBuildData.map((data) => data.instructionTypes).flat(),\r\n    ];\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) this.signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    allTransactions.forEach(async (tx, idx) => {\r\n      tx.sign(allSigners[idx]);\r\n    });\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: allInstructionTypes,\r\n      buildProps,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\r\n        if (propBlockHash) allTransactions.forEach((tx) => (tx.message.recentBlockhash = propBlockHash));\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              const { lastValidBlockHeight, blockhash } = await this.connection.getLatestBlockhash({\r\n                commitment: this.blockhashCommitment,\r\n              });\r\n              await this.connection.confirmTransaction(\r\n                {\r\n                  blockhash,\r\n                  lastValidBlockHeight,\r\n                  signature: txId,\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n\r\n        if (this.signAllTransactions) {\r\n          const signedTxs = await this.signAllTransactions(allTransactions);\r\n\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n              this.connection.onSignature(\r\n                txId,\r\n                (signatureResult) => {\r\n                  const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                  if (targetTxIdx > -1) processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                  onTxUpdate?.([...processedTxs]);\r\n                  if (!signatureResult.err) checkSendTx();\r\n                },\r\n                \"processed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: buildProps || {},\r\n    };\r\n  }\r\n\r\n  public async sizeCheckBuild(\r\n    props?: Record<string, any> & { computeBudgetConfig?: ComputeBudgetConfig },\r\n  ): Promise<MultiTxBuildData> {\r\n    const { computeBudgetConfig, ...extInfo } = props || {};\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n\r\n    const allTransactions: Transaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      const _signerStrs = new Set<string>(\r\n        _itemIns.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signer = [..._signerStrs.values()].map((i) => new PublicKey(i));\r\n\r\n      if (\r\n        (instructionQueue.length < 12 &&\r\n          checkLegacyTxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, signers: _signer })) ||\r\n        checkLegacyTxSize({ instructions: _itemIns, payer: this.feePayer, signers: _signer })\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          checkLegacyTxSize({\r\n            instructions: computeBudgetConfig\r\n              ? [...computeBudgetData.instructions, ...instructionQueue]\r\n              : [...instructionQueue],\r\n            payer: this.feePayer,\r\n            signers: _signer,\r\n          })\r\n        ) {\r\n          allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\r\n        } else {\r\n          allTransactions.push(new Transaction().add(...instructionQueue));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        checkLegacyTxSize({\r\n          instructions: computeBudgetConfig\r\n            ? [...computeBudgetData.instructions, ...instructionQueue]\r\n            : [...instructionQueue],\r\n          payer: this.feePayer,\r\n          signers: _signers.map((s) => s.publicKey),\r\n        })\r\n      ) {\r\n        allTransactions.push(new Transaction().add(...computeBudgetData.instructions, ...instructionQueue));\r\n      } else {\r\n        allTransactions.push(new Transaction().add(...instructionQueue));\r\n      }\r\n      allSigners.push(_signers);\r\n    }\r\n    allTransactions.forEach((tx) => (tx.feePayer = this.feePayer));\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\r\n        const recentBlockHash = propBlockHash ?? (await getRecentBlockHash(this.connection, this.blockhashCommitment));\r\n        allTransactions.forEach(async (tx, idx) => {\r\n          tx.recentBlockhash = recentBlockHash;\r\n          if (allSigners[idx].length) tx.sign(...allSigners[idx]);\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              const txId = await sendAndConfirmTransaction(\r\n                this.connection,\r\n                tx,\r\n                this.signers.find((s) => s.publicKey.equals(this.owner!.publicKey))\r\n                  ? this.signers\r\n                  : [...this.signers, this.owner.signer!],\r\n                { skipPreflight },\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return {\r\n              txIds,\r\n              signedTxs: allTransactions,\r\n            };\r\n          }\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendRawTransaction(tx.serialize(), { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const signedTxs = await this.signAllTransactions(allTransactions);\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n              this.connection.onSignature(\r\n                txId,\r\n                (signatureResult) => {\r\n                  const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                  if (targetTxIdx > -1) processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                  onTxUpdate?.([...processedTxs]);\r\n                  if (!signatureResult.err) checkSendTx();\r\n                },\r\n                \"processed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            await checkSendTx();\r\n            return {\r\n              txIds: processedTxs.map((d) => d.txId),\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendRawTransaction(signedTxs[i].serialize(), { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n\r\n  public async sizeCheckBuildV0(\r\n    props?: Record<string, any> & {\r\n      computeBudgetConfig?: ComputeBudgetConfig;\r\n      lookupTableCache?: CacheLTA;\r\n      lookupTableAddress?: string[];\r\n    },\r\n  ): Promise<MultiTxV0BuildData> {\r\n    const { computeBudgetConfig, lookupTableCache = {}, lookupTableAddress = [], ...extInfo } = props || {};\r\n    const lookupTableAddressAccount = {\r\n      ...(this.cluster === \"devnet\" ? {} : LOOKUP_TABLE_CACHE),\r\n      ...lookupTableCache,\r\n    };\r\n    const allLTA = Array.from(new Set<string>([...this.lookupTableAddress, ...lookupTableAddress]));\r\n    const needCacheLTA: PublicKey[] = [];\r\n    for (const item of allLTA) {\r\n      if (lookupTableAddressAccount[item] === undefined) needCacheLTA.push(new PublicKey(item));\r\n    }\r\n    const newCacheLTA = await getMultipleLookupTableInfo({ connection: this.connection, address: needCacheLTA });\r\n    for (const [key, value] of Object.entries(newCacheLTA)) lookupTableAddressAccount[key] = value;\r\n\r\n    const computeBudgetData: { instructions: TransactionInstruction[]; instructionTypes: string[] } =\r\n      computeBudgetConfig\r\n        ? addComputeBudget(computeBudgetConfig)\r\n        : {\r\n            instructions: [],\r\n            instructionTypes: [],\r\n          };\r\n\r\n    const blockHash = await getRecentBlockHash(this.connection, this.blockhashCommitment);\r\n\r\n    const signerKey: { [key: string]: Signer } = this.signers.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.publicKey.toBase58()]: cur }),\r\n      {},\r\n    );\r\n    const allTransactions: VersionedTransaction[] = [];\r\n    const allSigners: Signer[][] = [];\r\n\r\n    let instructionQueue: TransactionInstruction[] = [];\r\n    this.allInstructions.forEach((item) => {\r\n      const _itemIns = [...instructionQueue, item];\r\n      const _itemInsWithCompute = computeBudgetConfig ? [...computeBudgetData.instructions, ..._itemIns] : _itemIns;\r\n      if (\r\n        (instructionQueue.length < 12 &&\r\n          checkV0TxSize({ instructions: _itemInsWithCompute, payer: this.feePayer, lookupTableAddressAccount })) ||\r\n        checkV0TxSize({ instructions: _itemIns, payer: this.feePayer, lookupTableAddressAccount })\r\n      ) {\r\n        // current ins add to queue still not exceed tx size limit\r\n        instructionQueue.push(item);\r\n      } else {\r\n        if (instructionQueue.length === 0) throw Error(\"item ins too big\");\r\n\r\n        const lookupTableAddress: undefined | CacheLTA = {};\r\n        for (const item of [...new Set<string>(allLTA)]) {\r\n          if (lookupTableAddressAccount[item] !== undefined) lookupTableAddress[item] = lookupTableAddressAccount[item];\r\n        }\r\n        // if add computeBudget still not exceed tx size limit\r\n        if (\r\n          computeBudgetConfig &&\r\n          checkV0TxSize({\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n            payer: this.feePayer,\r\n            lookupTableAddressAccount,\r\n            recentBlockhash: blockHash,\r\n          })\r\n        ) {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n\r\n            instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        } else {\r\n          const messageV0 = new TransactionMessage({\r\n            payerKey: this.feePayer,\r\n            recentBlockhash: blockHash,\r\n            instructions: [...instructionQueue],\r\n          }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n          allTransactions.push(new VersionedTransaction(messageV0));\r\n        }\r\n        allSigners.push(\r\n          Array.from(\r\n            new Set<string>(\r\n              instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n            ),\r\n          )\r\n            .map((i) => signerKey[i])\r\n            .filter((i) => i !== undefined),\r\n        );\r\n        instructionQueue = [item];\r\n      }\r\n    });\r\n\r\n    if (instructionQueue.length > 0) {\r\n      const _signerStrs = new Set<string>(\r\n        instructionQueue.map((i) => i.keys.filter((ii) => ii.isSigner).map((ii) => ii.pubkey.toString())).flat(),\r\n      );\r\n      const _signers = [..._signerStrs.values()].map((i) => signerKey[i]).filter((i) => i !== undefined);\r\n\r\n      if (\r\n        computeBudgetConfig &&\r\n        checkV0TxSize({\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n          payer: this.feePayer,\r\n          lookupTableAddressAccount,\r\n          recentBlockhash: blockHash,\r\n        })\r\n      ) {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...computeBudgetData.instructions, ...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      } else {\r\n        const messageV0 = new TransactionMessage({\r\n          payerKey: this.feePayer,\r\n          recentBlockhash: blockHash,\r\n          instructions: [...instructionQueue],\r\n        }).compileToV0Message(Object.values(lookupTableAddressAccount));\r\n        allTransactions.push(new VersionedTransaction(messageV0));\r\n      }\r\n      allSigners.push(_signers);\r\n    }\r\n\r\n    if (this.owner?.signer) {\r\n      allSigners.forEach((signers) => {\r\n        if (!signers.some((s) => s.publicKey.equals(this.owner!.publicKey))) signers.push(this.owner!.signer!);\r\n      });\r\n    }\r\n\r\n    return {\r\n      builder: this,\r\n      transactions: allTransactions,\r\n      buildProps: props,\r\n      signers: allSigners,\r\n      instructionTypes: this.instructionTypes,\r\n      execute: async (executeParams?: MultiTxExecuteParam) => {\r\n        const { sequentially, onTxUpdate, recentBlockHash: propBlockHash, skipPreflight = true } = executeParams || {};\r\n        allTransactions.map(async (tx, idx) => {\r\n          if (allSigners[idx].length) tx.sign(allSigners[idx]);\r\n          if (propBlockHash) tx.message.recentBlockhash = propBlockHash;\r\n        });\r\n        printSimulate(allTransactions);\r\n        if (this.owner?.isKeyPair) {\r\n          if (sequentially) {\r\n            const txIds: string[] = [];\r\n            for (const tx of allTransactions) {\r\n              const txId = await this.connection.sendTransaction(tx, { skipPreflight });\r\n              const { lastValidBlockHeight, blockhash } = await this.connection.getLatestBlockhash({\r\n                commitment: this.blockhashCommitment,\r\n              });\r\n              await this.connection.confirmTransaction(\r\n                {\r\n                  blockhash,\r\n                  lastValidBlockHeight,\r\n                  signature: txId,\r\n                },\r\n                \"confirmed\",\r\n              );\r\n              txIds.push(txId);\r\n            }\r\n\r\n            return { txIds, signedTxs: allTransactions };\r\n          }\r\n\r\n          return {\r\n            txIds: await Promise.all(\r\n              allTransactions.map(async (tx) => {\r\n                return await this.connection.sendTransaction(tx, { skipPreflight });\r\n              }),\r\n            ),\r\n            signedTxs: allTransactions,\r\n          };\r\n        }\r\n        if (this.signAllTransactions) {\r\n          const signedTxs = await this.signAllTransactions(allTransactions);\r\n          if (sequentially) {\r\n            let i = 0;\r\n            const processedTxs: TxUpdateParams[] = [];\r\n            const checkSendTx = async (): Promise<void> => {\r\n              if (!signedTxs[i]) return;\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              processedTxs.push({ txId, status: \"sent\", signedTx: signedTxs[i] });\r\n              onTxUpdate?.([...processedTxs]);\r\n              i++;\r\n              this.connection.onSignature(\r\n                txId,\r\n                (signatureResult) => {\r\n                  const targetTxIdx = processedTxs.findIndex((tx) => tx.txId === txId);\r\n                  if (targetTxIdx > -1) processedTxs[targetTxIdx].status = signatureResult.err ? \"error\" : \"success\";\r\n                  onTxUpdate?.([...processedTxs]);\r\n                  if (!signatureResult.err) checkSendTx();\r\n                },\r\n                \"processed\",\r\n              );\r\n              this.connection.getSignatureStatus(txId);\r\n            };\r\n            checkSendTx();\r\n            return {\r\n              txIds: [],\r\n              signedTxs,\r\n            };\r\n          } else {\r\n            const txIds: string[] = [];\r\n            for (let i = 0; i < signedTxs.length; i += 1) {\r\n              const txId = await this.connection.sendTransaction(signedTxs[i], { skipPreflight });\r\n              txIds.push(txId);\r\n            }\r\n            return { txIds, signedTxs };\r\n          }\r\n        }\r\n        throw new Error(\"please provide owner in keypair format or signAllTransactions function\");\r\n      },\r\n      extInfo: extInfo || {},\r\n    };\r\n  }\r\n}\r\n","export enum TxVersion {\r\n  \"V0\",\r\n  \"LEGACY\",\r\n}\r\n\r\nexport const InstructionType = {\r\n  CreateAccount: \"CreateAccount\",\r\n  InitAccount: \"InitAccount\",\r\n  CreateATA: \"CreateATA\",\r\n  CloseAccount: \"CloseAccount\",\r\n  TransferAmount: \"TransferAmount\",\r\n  InitMint: \"InitMint\",\r\n  MintTo: \"MintTo\",\r\n\r\n  InitMarket: \"InitMarket\", // create market main ins\r\n  Util1216OwnerClaim: \"Util1216OwnerClaim\", // owner claim token ins\r\n\r\n  SetComputeUnitPrice: \"SetComputeUnitPrice\",\r\n  SetComputeUnitLimit: \"SetComputeUnitLimit\",\r\n\r\n  // CLMM\r\n  ClmmCreatePool: \"ClmmCreatePool\",\r\n  ClmmOpenPosition: \"ClmmOpenPosition\",\r\n  ClmmIncreasePosition: \"ClmmIncreasePosition\",\r\n  ClmmDecreasePosition: \"ClmmDecreasePosition\",\r\n  ClmmClosePosition: \"ClmmClosePosition\",\r\n  ClmmSwapBaseIn: \"ClmmSwapBaseIn\",\r\n  ClmmSwapBaseOut: \"ClmmSwapBaseOut\",\r\n  ClmmInitReward: \"ClmmInitReward\",\r\n  ClmmSetReward: \"ClmmSetReward\",\r\n  ClmmCollectReward: \"ClmmCollectReward\",\r\n\r\n  AmmV4Swap: \"AmmV4Swap\",\r\n  AmmV4AddLiquidity: \"AmmV4AddLiquidity\",\r\n  AmmV4RemoveLiquidity: \"AmmV4RemoveLiquidity\",\r\n  AmmV4SimulatePoolInfo: \"AmmV4SimulatePoolInfo\",\r\n  AmmV4SwapBaseIn: \"AmmV4SwapBaseIn\",\r\n  AmmV4SwapBaseOut: \"AmmV4SwapBaseOut\",\r\n  AmmV4CreatePool: \"AmmV4CreatePool\",\r\n  AmmV4InitPool: \"AmmV4InitPool\",\r\n\r\n  AmmV5AddLiquidity: \"AmmV5AddLiquidity\",\r\n  AmmV5RemoveLiquidity: \"AmmV5RemoveLiquidity\",\r\n  AmmV5SimulatePoolInfo: \"AmmV5SimulatePoolInfo\",\r\n  AmmV5SwapBaseIn: \"AmmV5SwapBaseIn\",\r\n  AmmV5SwapBaseOut: \"AmmV5SwapBaseOut\",\r\n\r\n  RouteSwap: \"RouteSwap\",\r\n  RouteSwap1: \"RouteSwap1\",\r\n  RouteSwap2: \"RouteSwap2\",\r\n\r\n  FarmV3Deposit: \"FarmV3Deposit\",\r\n  FarmV3Withdraw: \"FarmV3Withdraw\",\r\n  FarmV3CreateLedger: \"FarmV3CreateLedger\",\r\n\r\n  FarmV5Deposit: \"FarmV5Deposit\",\r\n  FarmV5Withdraw: \"FarmV5Withdraw\",\r\n  FarmV5CreateLedger: \"FarmV5CreateLedger\",\r\n\r\n  FarmV6Deposit: \"FarmV6Deposit\",\r\n  FarmV6Withdraw: \"FarmV6Withdraw\",\r\n  FarmV6Create: \"FarmV6Create\",\r\n  FarmV6Restart: \"FarmV6Restart\",\r\n  FarmV6CreatorAddReward: \"FarmV6CreatorAddReward\",\r\n  FarmV6CreatorWithdraw: \"FarmV6CreatorWithdraw\",\r\n\r\n  CpmmCreatePool: \"CpmmCreatePool\",\r\n  CpmmAddLiquidity: \"CpmmAddLiquidity\",\r\n  CpmmWithdrawLiquidity: \"CpmmWithdrawLiquidity\",\r\n  CpmmSwapBaseIn: \"CpmmSwapBaseIn\",\r\n  CpmmSwapBaseOut: \"CpmmSwapBaseOut\",\r\n};\r\n","import {\r\n  Connection,\r\n  PublicKey,\r\n  ComputeBudgetProgram,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionMessage,\r\n  Keypair,\r\n  EpochInfo,\r\n  VersionedTransaction,\r\n  Commitment,\r\n} from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nimport { createLogger } from \"../logger\";\r\nimport { InstructionType } from \"./txType\";\r\nimport { CacheLTA } from \"./lookupTable\";\r\n\r\nimport { ComputeBudgetConfig } from \"@/raydium/type\";\r\n\r\nconst logger = createLogger(\"Raydium_txUtil\");\r\n\r\nexport const MAX_BASE64_SIZE = 1644;\r\n\r\nexport function addComputeBudget(config: ComputeBudgetConfig): {\r\n  instructions: TransactionInstruction[];\r\n  instructionTypes: string[];\r\n} {\r\n  const ins: TransactionInstruction[] = [];\r\n  const insTypes: string[] = [];\r\n  if (config.microLamports) {\r\n    ins.push(ComputeBudgetProgram.setComputeUnitPrice({ microLamports: config.microLamports }));\r\n    insTypes.push(InstructionType.SetComputeUnitPrice);\r\n  }\r\n  if (config.units) {\r\n    ins.push(ComputeBudgetProgram.setComputeUnitLimit({ units: config.units }));\r\n    insTypes.push(InstructionType.SetComputeUnitLimit);\r\n  }\r\n\r\n  return {\r\n    instructions: ins,\r\n    instructionTypes: insTypes,\r\n  };\r\n}\r\n\r\nexport async function getRecentBlockHash(connection: Connection, propsCommitment?: Commitment): Promise<string> {\r\n  const commitment = propsCommitment ?? \"confirmed\";\r\n  try {\r\n    return (\r\n      (await connection.getLatestBlockhash?.({ commitment }))?.blockhash ||\r\n      (await connection.getRecentBlockhash(commitment)).blockhash\r\n    );\r\n  } catch {\r\n    return (await connection.getRecentBlockhash(commitment)).blockhash;\r\n  }\r\n}\r\n\r\n/**\r\n * Forecast transaction size\r\n */\r\nexport function forecastTransactionSize(instructions: TransactionInstruction[], signers: PublicKey[]): boolean {\r\n  if (instructions.length < 1) logger.logWithError(`no instructions provided: ${instructions.toString()}`);\r\n  if (signers.length < 1) logger.logWithError(`no signers provided:, ${signers.toString()}`);\r\n\r\n  const transaction = new Transaction();\r\n  transaction.recentBlockhash = \"11111111111111111111111111111111\";\r\n  transaction.feePayer = signers[0];\r\n  transaction.add(...instructions);\r\n\r\n  try {\r\n    return Buffer.from(transaction.serialize({ verifySignatures: false })).toString(\"base64\").length < MAX_BASE64_SIZE;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Simulates multiple instruction\r\n */\r\n/**\r\n * Simulates multiple instruction\r\n */\r\nexport async function simulateMultipleInstruction(\r\n  connection: Connection,\r\n  instructions: TransactionInstruction[],\r\n  keyword: string,\r\n  batchRequest = true,\r\n): Promise<string[]> {\r\n  const feePayer = new PublicKey(\"RaydiumSimuLateTransaction11111111111111111\");\r\n\r\n  const transactions: Transaction[] = [];\r\n\r\n  let transaction = new Transaction();\r\n  transaction.feePayer = feePayer;\r\n\r\n  for (const instruction of instructions) {\r\n    if (!forecastTransactionSize([...transaction.instructions, instruction], [feePayer])) {\r\n      transactions.push(transaction);\r\n      transaction = new Transaction();\r\n      transaction.feePayer = feePayer;\r\n    }\r\n    transaction.add(instruction);\r\n  }\r\n  if (transaction.instructions.length > 0) {\r\n    transactions.push(transaction);\r\n  }\r\n\r\n  let results: SimulatedTransactionResponse[] = [];\r\n\r\n  try {\r\n    results = await simulateTransaction(connection, transactions, batchRequest);\r\n    if (results.find((i) => i.err !== null)) throw Error(\"rpc simulateTransaction error\");\r\n  } catch (error) {\r\n    if (error instanceof Error) {\r\n      logger.logWithError(\"failed to simulate for instructions\", \"RPC_ERROR\", {\r\n        message: error.message,\r\n      });\r\n    }\r\n  }\r\n\r\n  const logs: string[] = [];\r\n  for (const result of results) {\r\n    logger.debug(\"simulate result:\", result);\r\n\r\n    if (result.logs) {\r\n      const filteredLog = result.logs.filter((log) => log && log.includes(keyword));\r\n      logger.debug(\"filteredLog:\", logs);\r\n      if (!filteredLog.length) logger.logWithError(\"simulate log not match keyword\", \"keyword\", keyword);\r\n      logs.push(...filteredLog);\r\n    }\r\n  }\r\n\r\n  return logs;\r\n}\r\n\r\nexport function parseSimulateLogToJson(log: string, keyword: string): any {\r\n  const results = log.match(/{[\"\\w:,]+}/g);\r\n  if (!results || results.length !== 1) {\r\n    return logger.logWithError(`simulate log fail to match json, keyword: ${keyword}`);\r\n  }\r\n\r\n  return results[0];\r\n}\r\n\r\nexport function parseSimulateValue(log: string, key: string): any {\r\n  const reg = new RegExp(`\"${key}\":(\\\\d+)`, \"g\");\r\n\r\n  const results = reg.exec(log);\r\n  if (!results || results.length !== 2) {\r\n    return logger.logWithError(`simulate log fail to match key\", key: ${key}`);\r\n  }\r\n\r\n  return results[1];\r\n}\r\n\r\nexport interface ProgramAddress {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n}\r\nexport function findProgramAddress(\r\n  seeds: Array<Buffer | Uint8Array>,\r\n  programId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  const [publicKey, nonce] = PublicKey.findProgramAddressSync(seeds, programId);\r\n  return { publicKey, nonce };\r\n}\r\n\r\nexport async function simulateTransaction(\r\n  connection: Connection,\r\n  transactions: Transaction[],\r\n  batchRequest?: boolean,\r\n): Promise<any[]> {\r\n  let results: any[] = [];\r\n  if (batchRequest) {\r\n    const getLatestBlockhash = await connection.getLatestBlockhash();\r\n\r\n    const encodedTransactions: string[] = [];\r\n    for (const transaction of transactions) {\r\n      transaction.recentBlockhash = getLatestBlockhash.blockhash;\r\n      transaction.lastValidBlockHeight = getLatestBlockhash.lastValidBlockHeight;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const message = transaction._compile();\r\n      const signData = message.serialize();\r\n\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // @ts-ignore\r\n      const wireTransaction = transaction._serialize(signData);\r\n      const encodedTransaction = wireTransaction.toString(\"base64\");\r\n\r\n      encodedTransactions.push(encodedTransaction);\r\n    }\r\n\r\n    const batch = encodedTransactions.map((keys) => {\r\n      const args = connection._buildArgs([keys], undefined, \"base64\");\r\n      return {\r\n        methodName: \"simulateTransaction\",\r\n        args,\r\n      };\r\n    });\r\n\r\n    const reqData: { methodName: string; args: any[] }[][] = [];\r\n    const itemReqIndex = 20;\r\n    for (let i = 0; i < Math.ceil(batch.length / itemReqIndex); i++) {\r\n      reqData.push(batch.slice(i * itemReqIndex, (i + 1) * itemReqIndex));\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    results = await (\r\n      await Promise.all(\r\n        reqData.map(async (i) => (await (connection as any)._rpcBatchRequest(i)).map((ii) => ii.result.value)),\r\n      )\r\n    ).flat();\r\n  } else {\r\n    try {\r\n      results = await Promise.all(\r\n        transactions.map(async (transaction) => await (await connection.simulateTransaction(transaction)).value),\r\n      );\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.logWithError(\"failed to get info for multiple accounts\", \"RPC_ERROR\", {\r\n          message: error.message,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nexport function checkLegacyTxSize({\r\n  instructions,\r\n  payer,\r\n  signers,\r\n}: {\r\n  instructions: TransactionInstruction[];\r\n  payer: PublicKey;\r\n  signers: PublicKey[];\r\n}): boolean {\r\n  return forecastTransactionSize(instructions, [payer, ...signers]);\r\n}\r\n\r\nexport function checkV0TxSize({\r\n  instructions,\r\n  payer,\r\n  lookupTableAddressAccount,\r\n  recentBlockhash = Keypair.generate().publicKey.toString(),\r\n}: {\r\n  instructions: TransactionInstruction[];\r\n  payer: PublicKey;\r\n  lookupTableAddressAccount?: CacheLTA;\r\n  recentBlockhash?: string;\r\n}): boolean {\r\n  const transactionMessage = new TransactionMessage({\r\n    payerKey: payer,\r\n    recentBlockhash,\r\n    instructions,\r\n  });\r\n\r\n  const messageV0 = transactionMessage.compileToV0Message(Object.values(lookupTableAddressAccount ?? {}));\r\n  try {\r\n    const buildLength = Buffer.from(new VersionedTransaction(messageV0).serialize()).toString(\"base64\").length;\r\n    return buildLength < MAX_BASE64_SIZE;\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nlet epochInfoCache: { time: number; data?: EpochInfo } = {\r\n  time: 0,\r\n  data: undefined,\r\n};\r\n\r\nexport async function getEpochInfo(connection: Connection): Promise<EpochInfo> {\r\n  if (!epochInfoCache.data || (Date.now() - epochInfoCache.time) / 1000 > 30) {\r\n    const data = await connection.getEpochInfo();\r\n    epochInfoCache = {\r\n      time: Date.now(),\r\n      data,\r\n    };\r\n    return data;\r\n  } else {\r\n    return epochInfoCache.data;\r\n  }\r\n}\r\n\r\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\r\n  if (Buffer.isBuffer(arr)) {\r\n    return arr;\r\n  } else if (arr instanceof Uint8Array) {\r\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\r\n  } else {\r\n    return Buffer.from(arr);\r\n  }\r\n};\r\n\r\nexport function printSimulate(transactions: Transaction[] | VersionedTransaction[]): string[] {\r\n  const allBase64: string[] = [];\r\n  transactions.forEach((transaction) => {\r\n    if (transaction instanceof Transaction) {\r\n      if (!transaction.recentBlockhash) transaction.recentBlockhash = TOKEN_PROGRAM_ID.toBase58();\r\n      if (!transaction.feePayer) transaction.feePayer = Keypair.generate().publicKey;\r\n    }\r\n    let serialized = transaction.serialize({ requireAllSignatures: false, verifySignatures: false });\r\n    if (transaction instanceof VersionedTransaction) serialized = toBuffer(serialized);\r\n    const base64 = serialized.toString(\"base64\");\r\n    allBase64.push(base64);\r\n  });\r\n  console.log(\"simulate tx string:\", allBase64);\r\n\r\n  return allBase64;\r\n}\r\n\r\nexport function transformTxToBase64(tx: Transaction | VersionedTransaction): string {\r\n  let serialized = tx.serialize({ requireAllSignatures: false, verifySignatures: false });\r\n  if (tx instanceof VersionedTransaction) serialized = toBuffer(serialized);\r\n  return serialized.toString(\"base64\");\r\n}\r\n","import { Connection, PublicKey, AddressLookupTableAccount } from \"@solana/web3.js\";\r\nimport { getMultipleAccountsInfo } from \"../accountInfo\";\r\n\r\nexport interface CacheLTA {\r\n  [key: string]: AddressLookupTableAccount;\r\n}\r\n\r\nexport async function getMultipleLookupTableInfo({\r\n  connection,\r\n  address,\r\n}: {\r\n  connection: Connection;\r\n  address: PublicKey[];\r\n}): Promise<CacheLTA> {\r\n  const dataInfos = await getMultipleAccountsInfo(\r\n    connection,\r\n    [...new Set<string>(address.map((i) => i.toString()))].map((i) => new PublicKey(i)),\r\n  );\r\n\r\n  const outDict: CacheLTA = {};\r\n  for (let i = 0; i < address.length; i++) {\r\n    const info = dataInfos[i];\r\n    const key = address[i];\r\n    if (!info) continue;\r\n    const lookupAccount = new AddressLookupTableAccount({\r\n      key,\r\n      state: AddressLookupTableAccount.deserialize(info.data),\r\n    });\r\n    outDict[key.toString()] = lookupAccount;\r\n    LOOKUP_TABLE_CACHE[key.toString()] = lookupAccount;\r\n  }\r\n\r\n  return outDict;\r\n}\r\n\r\nexport const LOOKUP_TABLE_CACHE: CacheLTA = {\r\n  \"2immgwYNHBbyVQKVGCEkgWpi53bLwWNRMB5G2nbgYV17\": new AddressLookupTableAccount({\r\n    key: new PublicKey(\"2immgwYNHBbyVQKVGCEkgWpi53bLwWNRMB5G2nbgYV17\"),\r\n    state: AddressLookupTableAccount.deserialize(\r\n      Buffer.from(\r\n        \"AQAAAP//////////d49+DAAAAAAAAQZMWvw7GUNJdaccNBVnb57OKakxL2BHLYvhRwVILRsgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMGRm/lIRcy/+ytunLDm+e8jOW7xfcSayxDmzpAAAAABt324ddloZPZy+FGzut5rBy0he1fWzeROoz1hX7/AKkG3fbh7nWP3hhCXbzkbM3athr8TYO5DSf+vfko2KGL/AVKU1D4XciC1hSlVnJ4iilt3x6rq9CmBniISTL07vagBqfVFxksXFEhjMlMPUrxf1ja7gibof1E49vZigAAAAAGp9UXGMd0yShWY5hpHV62i164o5tLbVxzVVshAAAAAIyXJY9OJInxuz0QKRSODYMLWhOZ2v8QhASOe9jb6fhZC3BlsePRfEU4nVJ/awTDzVi4bHMaoP21SbbRvAP4KUbIScv+6Yw2LHF/6K0ZjUPibbSWXCirYPGuuVl7zT789IUPLW4CpHr4JNCatp3ELXDLKMv6JJ+37le50lbBJ2LvDQdRqCgtphMF/imcN7mY5YRx2xE1A3MQ+L4QRaYK9u4GRfZP3LsAd00a+IkCpA22UNQMKdq5BFbJuwuOLqc8zxCTDlqxBG8J0HcxtfogQHDK06ukzfaXiNDKAob1MqBHS9lJxDYCwz8gd5DtFqNSTKG5l1zxIaKpDP/sffi2is1H9aKveyXSu5StXElYRl9SD5As0DHE4N0GLnf84/siiKXVyp4Ez121kLcUui/jLLFZEz/BwZK3Ilf9B9OcsEAeDMKAy2vjGSxQODgBz0QwGA+eP4ZjIjrIAQaXENv31QfLlOdXSRCkaybRniDHF4C8YcwhcvsqrOVuTP4B2Na+9wLdtrB31uz2rtlFI5kahdsnp/d1SrASDInYCtTYtdoke4kX+hoKWcEWM4Tle8pTUkUVv4BxS6fje/EzKBE4Qu9N9LMnrw/JNO0hqMVB4rk/2ou4AB1loQ7FZoPwut2o4KZB+0p9xnbrQKw038qjpHar+PyDwvxBRcu5hpHw3dguezeWv+IwvgW5icu8EGkhGa9AkFPPJT7VMSFb8xowveU=\",\r\n        \"base64\",\r\n      ),\r\n    ),\r\n  }),\r\n};\r\n","import { AccountInfo, Commitment, Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { MINT_SIZE, TOKEN_PROGRAM_ID, getTransferFeeConfig, unpackMint } from \"@solana/spl-token\";\r\nimport { WSOLMint, chunkArray, solToWSol } from \"./\";\r\nimport { createLogger } from \"./logger\";\r\nimport { ReturnTypeFetchMultipleMintInfos } from \"../raydium/type\";\r\n\r\ninterface MultipleAccountsJsonRpcResponse {\r\n  jsonrpc: string;\r\n  id: string;\r\n  error?: {\r\n    code: number;\r\n    message: string;\r\n  };\r\n  result: {\r\n    context: { slot: number };\r\n    value: { data: Array<string>; executable: boolean; lamports: number; owner: string; rentEpoch: number }[];\r\n  };\r\n}\r\n\r\nexport interface GetMultipleAccountsInfoConfig {\r\n  batchRequest?: boolean;\r\n  commitment?: Commitment;\r\n  chunkCount?: number;\r\n}\r\n\r\nconst logger = createLogger(\"Raydium_accountInfo_util\");\r\n\r\nexport async function getMultipleAccountsInfo(\r\n  connection: Connection,\r\n  publicKeys: PublicKey[],\r\n  config?: GetMultipleAccountsInfoConfig,\r\n): Promise<(AccountInfo<Buffer> | null)[]> {\r\n  const {\r\n    batchRequest,\r\n    commitment = \"confirmed\",\r\n    chunkCount = 100,\r\n  } = {\r\n    batchRequest: false,\r\n    ...config,\r\n  };\r\n\r\n  const chunkedKeys = chunkArray(publicKeys, chunkCount);\r\n  let results: (AccountInfo<Buffer> | null)[][] = new Array(chunkedKeys.length).fill([]);\r\n\r\n  if (batchRequest) {\r\n    const batch = chunkedKeys.map((keys) => {\r\n      const args = connection._buildArgs([keys.map((key) => key.toBase58())], commitment, \"base64\");\r\n      return {\r\n        methodName: \"getMultipleAccounts\",\r\n        args,\r\n      };\r\n    });\r\n\r\n    const _batch = chunkArray(batch, 10);\r\n\r\n    const unsafeResponse: MultipleAccountsJsonRpcResponse[] = await (\r\n      await Promise.all(_batch.map(async (i) => await (connection as any)._rpcBatchRequest(i)))\r\n    ).flat();\r\n    results = unsafeResponse.map((unsafeRes: MultipleAccountsJsonRpcResponse) => {\r\n      if (unsafeRes.error)\r\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${unsafeRes.error.message}`);\r\n\r\n      return unsafeRes.result.value.map((accountInfo) => {\r\n        if (accountInfo) {\r\n          const { data, executable, lamports, owner, rentEpoch } = accountInfo;\r\n\r\n          if (data.length !== 2 && data[1] !== \"base64\") logger.logWithError(`info must be base64 encoded, RPC_ERROR`);\r\n\r\n          return {\r\n            data: Buffer.from(data[0], \"base64\"),\r\n            executable,\r\n            lamports,\r\n            owner: new PublicKey(owner),\r\n            rentEpoch,\r\n          };\r\n        }\r\n        return null;\r\n      });\r\n    });\r\n  } else {\r\n    try {\r\n      results = (await Promise.all(\r\n        chunkedKeys.map((keys) => connection.getMultipleAccountsInfo(keys, commitment)),\r\n      )) as (AccountInfo<Buffer> | null)[][];\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        logger.logWithError(`failed to get info for multiple accounts, RPC_ERROR, ${error.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  return results.flat();\r\n}\r\n\r\nexport async function getMultipleAccountsInfoWithCustomFlags<T extends { pubkey: PublicKey }>(\r\n  connection: Connection,\r\n  publicKeysWithCustomFlag: T[],\r\n  config?: GetMultipleAccountsInfoConfig,\r\n): Promise<({ accountInfo: AccountInfo<Buffer> | null } & T)[]> {\r\n  const multipleAccountsInfo = await getMultipleAccountsInfo(\r\n    connection,\r\n    publicKeysWithCustomFlag.map((o) => o.pubkey),\r\n    config,\r\n  );\r\n\r\n  return publicKeysWithCustomFlag.map((o, idx) => ({ ...o, accountInfo: multipleAccountsInfo[idx] }));\r\n}\r\n\r\nexport enum AccountType {\r\n  Uninitialized,\r\n  Mint,\r\n  Account,\r\n}\r\nexport const ACCOUNT_TYPE_SIZE = 1;\r\n\r\nexport async function fetchMultipleMintInfos({\r\n  connection,\r\n  mints,\r\n  config,\r\n}: {\r\n  connection: Connection;\r\n  mints: PublicKey[];\r\n  config?: { batchRequest?: boolean };\r\n}): Promise<ReturnTypeFetchMultipleMintInfos> {\r\n  if (mints.length === 0) return {};\r\n  const mintInfos = await getMultipleAccountsInfoWithCustomFlags(\r\n    connection,\r\n    mints.map((i) => ({ pubkey: solToWSol(i) })),\r\n    config,\r\n  );\r\n\r\n  const mintK: ReturnTypeFetchMultipleMintInfos = {};\r\n  for (const i of mintInfos) {\r\n    if (!i.accountInfo || i.accountInfo.data.length < MINT_SIZE) {\r\n      console.log(\"invalid mint account\", i.pubkey.toBase58());\r\n      continue;\r\n    }\r\n    const t = unpackMint(i.pubkey, i.accountInfo, i.accountInfo?.owner);\r\n    mintK[i.pubkey.toString()] = {\r\n      ...t,\r\n      programId: i.accountInfo?.owner || TOKEN_PROGRAM_ID,\r\n      feeConfig: getTransferFeeConfig(t) ?? undefined,\r\n    };\r\n  }\r\n  mintK[PublicKey.default.toBase58()] = mintK[WSOLMint.toBase58()];\r\n\r\n  return mintK;\r\n}\r\n","/**\r\n * https://youmightnotneed.com/lodash/\r\n */\r\n\r\nexport function chunkArray<T>(arr: T[], chunkSize = 1, cache: T[][] = []): T[][] {\r\n  const tmp = [...arr];\r\n  if (chunkSize <= 0) return cache;\r\n  while (tmp.length) cache.push(tmp.splice(0, chunkSize));\r\n  return cache;\r\n}\r\n\r\nexport function intersection<T>(arr: T[], ...args: T[][]): T[] {\r\n  return arr.filter((item) => args.every((arr) => arr.includes(item)));\r\n}\r\n\r\nexport function xor<T>(arr: T[], ...args: T[][]): T[] {\r\n  return arr.filter((item) => args.every((arr) => !arr.includes(item)));\r\n}\r\n\r\nexport function uniq<T>(arr: T[]): T[] {\r\n  return [...new Set(arr)];\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\n// raydium\r\nexport const FARM_PROGRAM_ID_V3 = new PublicKey(\"EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q\");\r\n// \"fusion\"\r\nexport const FARM_PROGRAM_ID_V5 = new PublicKey(\"9KEPoZmtHUrBbhWN1v1KWLMkkvwY6WLtAVUCPRtRjP4z\");\r\n// echosystem\r\nexport const FARM_PROGRAM_ID_V6 = new PublicKey(\"FarmqiPv5eAj3j1GMdMCMUGXqPUvmquZtMy86QH6rzhG\");\r\n\r\nexport const UTIL1216 = new PublicKey(\"CLaimxFqjHzgTJtAGHU47NPhg6qrc5sCnpC4tBLyABQS\");\r\n\r\nexport const OPEN_BOOK_PROGRAM = new PublicKey(\"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\");\r\nexport const SERUM_PROGRAM_ID_V3 = new PublicKey(\"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\");\r\n\r\nexport const AMM_V4 = new PublicKey(\"675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8\");\r\nexport const AMM_STABLE = new PublicKey(\"5quBtoiQqxF9Jv6KYKctB59NT3gtJD2Y65kdnB1Uev3h\");\r\nexport const LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\r\nexport const CLMM_PROGRAM_ID = new PublicKey(\"CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK\");\r\nexport const Router = new PublicKey(\"routeUGWgWzqBWFcrCfv8tritsqukccJPu3q5GPP3xS\");\r\nexport const FEE_DESTINATION_ID = new PublicKey(\"7YttLkHDoNj9wyDur5pM1ejNaAvT9X4eqaYcHQqtj2G5\");\r\n\r\nexport const IDO_PROGRAM_ID_V1 = new PublicKey(\"6FJon3QE27qgPVggARueB22hLvoh22VzJpXv4rBEoSLF\");\r\nexport const IDO_PROGRAM_ID_V2 = new PublicKey(\"CC12se5To1CdEuw7fDS27B7Geo5jJyL7t5UK2B44NgiH\");\r\nexport const IDO_PROGRAM_ID_V3 = new PublicKey(\"9HzJyW1qZsEiSfMUf6L2jo3CcTKAyBmSyKdwQeYisHrC\");\r\nexport const IDO_PROGRAM_ID_V4 = new PublicKey(\"DropEU8AvevN3UrXWXTMuz3rqnMczQVNjq3kcSdW2SQi\");\r\n\r\nexport const CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"8yQvrjQuritLntxz6pAaWcEX6CsRMeDmr7baCLnNwEuw\");\r\nexport const CREATE_CPMM_POOL_AUTH = new PublicKey(\"E1oP2yNZXw3dFnUoPygWZPg9u2Gad87VFVPeYWqa6rD6\");\r\nexport const CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"E1oP2yNZXw3dFnUoPygWZPg9u2Gad87VFVPeYWqa6rD6\");\r\n\r\nexport const DEV_CREATE_CPMM_POOL_PROGRAM = new PublicKey(\"CPMDWBwJDtYax9qW7AyRuVC19Cc4L4Vcy4n2BHAbHkCW\");\r\nexport const DEV_CREATE_CPMM_POOL_AUTH = new PublicKey(\"7rQ1QFNosMkUCuh7Z7fPbTHvh73b68sQYdirycEzJVuw\");\r\nexport const DEV_CREATE_CPMM_POOL_FEE_ACC = new PublicKey(\"G11FKBRaAkHAKuLCgLM6K6NUc9rTjPAznRCjZifrTQe2\");\r\n\r\nexport const IDO_ALL_PROGRAM = {\r\n  IDO_PROGRAM_ID_V1,\r\n  IDO_PROGRAM_ID_V2,\r\n  IDO_PROGRAM_ID_V3,\r\n  IDO_PROGRAM_ID_V4,\r\n};\r\n\r\nexport const ALL_PROGRAM_ID = {\r\n  AMM_V4,\r\n  AMM_STABLE,\r\n  CLMM_PROGRAM_ID,\r\n\r\n  FARM_PROGRAM_ID_V3,\r\n  FARM_PROGRAM_ID_V5,\r\n  FARM_PROGRAM_ID_V6,\r\n\r\n  OPEN_BOOK_PROGRAM,\r\n  SERUM_PROGRAM_ID_V3,\r\n\r\n  UTIL1216,\r\n\r\n  Router,\r\n\r\n  CREATE_CPMM_POOL_PROGRAM,\r\n  CREATE_CPMM_POOL_AUTH,\r\n  CREATE_CPMM_POOL_FEE_ACC,\r\n};\r\n\r\nexport type ProgramIdConfig = Partial<typeof ALL_PROGRAM_ID>;\r\n\r\nexport const DEVNET_PROGRAM_ID = {\r\n  SERUM_MARKET: PublicKey.default,\r\n  OPENBOOK_MARKET: new PublicKey(\"EoTcMgcDRTJVZDMZWBoU6rhYHZfkNTVEAfz3uUJRcYGj\"),\r\n\r\n  UTIL1216: PublicKey.default,\r\n\r\n  FarmV3: new PublicKey(\"85BFyr98MbCUU9MVTEgzx1nbhWACbJqLzho6zd6DZcWL\"),\r\n  FarmV5: new PublicKey(\"EcLzTrNg9V7qhcdyXDe2qjtPkiGzDM2UbdRaeaadU5r2\"),\r\n  FarmV6: new PublicKey(\"Farm2hJLcqPtPg8M4rR6DMrsRNc5TPm5Cs4bVQrMe2T7\"),\r\n\r\n  AmmV4: new PublicKey(\"HWy1jotHpo6UqeQxx49dpYYdQB8wj9Qk9MdxwjLvDHB8\"),\r\n  AmmStable: new PublicKey(\"DDg4VmQaJV9ogWce7LpcjBA9bv22wRp5uaTPa5pGjijF\"),\r\n\r\n  CLMM: new PublicKey(\"devi51mZmdwUJGU9hjN27vEz64Gps7uUefqxg27EAtH\"),\r\n\r\n  Router: new PublicKey(\"BVChZ3XFEwTMUk1o9i3HAf91H6mFxSwa5X2wFAWhYPhU\"),\r\n\r\n  CREATE_CPMM_POOL_PROGRAM: DEV_CREATE_CPMM_POOL_PROGRAM,\r\n  CREATE_CPMM_POOL_AUTH: DEV_CREATE_CPMM_POOL_AUTH,\r\n  CREATE_CPMM_POOL_FEE_ACC: DEV_CREATE_CPMM_POOL_FEE_ACC,\r\n\r\n  FEE_DESTINATION_ID: new PublicKey(\"3XMrhbv989VxAMi3DErLV9eJht1pHppW5LbKxe9fkEFR\"),\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { findProgramAddress } from \"./txTool/txUtils\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nexport function getATAAddress(\r\n  owner: PublicKey,\r\n  mint: PublicKey,\r\n  programId?: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [owner.toBuffer(), (programId ?? TOKEN_PROGRAM_ID).toBuffer(), mint.toBuffer()],\r\n    new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"),\r\n  );\r\n}\r\n","import { EpochInfo } from \"@solana/web3.js\";\r\nimport { TransferFeeConfig, TransferFee } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { GetTransferAmountFee } from \"../raydium/type\";\r\nimport { TransferFeeDataBaseType } from \"../api/type\";\r\n\r\nconst POINT = 10_000;\r\nexport function getTransferAmountFee(\r\n  amount: BN,\r\n  feeConfig: TransferFeeConfig | undefined,\r\n  epochInfo: EpochInfo,\r\n  addFee: boolean,\r\n): GetTransferAmountFee {\r\n  if (feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n\r\n  const nowFeeConfig: TransferFee =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\r\n      : undefined;\r\n\r\n  if (addFee) {\r\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      return {\r\n        amount: amount.add(nowMaxFee),\r\n        fee: nowMaxFee,\r\n        expirationTime,\r\n      };\r\n    } else {\r\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n\r\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n      return {\r\n        amount: TAmount,\r\n        fee,\r\n        expirationTime,\r\n      };\r\n    }\r\n  } else {\r\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n\r\n    return {\r\n      amount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n\r\nexport function getTransferAmountFeeV2(\r\n  amount: BN,\r\n  _feeConfig: TransferFeeDataBaseType | undefined,\r\n  epochInfo: EpochInfo,\r\n  addFee: boolean,\r\n): GetTransferAmountFee {\r\n  if (_feeConfig === undefined) {\r\n    return {\r\n      amount,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n  }\r\n  const feeConfig = {\r\n    ..._feeConfig,\r\n    olderTransferFee: {\r\n      epoch: BigInt(_feeConfig.olderTransferFee.epoch),\r\n      maximumFee: BigInt(_feeConfig.olderTransferFee.maximumFee),\r\n      transferFeeBasisPoints: _feeConfig.olderTransferFee.transferFeeBasisPoints,\r\n    },\r\n    newerTransferFee: {\r\n      epoch: BigInt(_feeConfig.newerTransferFee.epoch),\r\n      maximumFee: BigInt(_feeConfig.newerTransferFee.maximumFee),\r\n      transferFeeBasisPoints: _feeConfig.newerTransferFee.transferFeeBasisPoints,\r\n    },\r\n  };\r\n\r\n  const nowFeeConfig: TransferFee =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch ? feeConfig.olderTransferFee : feeConfig.newerTransferFee;\r\n  const maxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n  const expirationTime: number | undefined =\r\n    epochInfo.epoch < feeConfig.newerTransferFee.epoch\r\n      ? ((Number(feeConfig.newerTransferFee.epoch) * epochInfo.slotsInEpoch - epochInfo.absoluteSlot) * 400) / 1000\r\n      : undefined;\r\n\r\n  if (addFee) {\r\n    if (nowFeeConfig.transferFeeBasisPoints === POINT) {\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      return {\r\n        amount: amount.add(nowMaxFee),\r\n        fee: nowMaxFee,\r\n        expirationTime,\r\n      };\r\n    } else {\r\n      const _TAmount = BNDivCeil(amount.mul(new BN(POINT)), new BN(POINT - nowFeeConfig.transferFeeBasisPoints));\r\n\r\n      const nowMaxFee = new BN(nowFeeConfig.maximumFee.toString());\r\n      const TAmount = _TAmount.sub(amount).gt(nowMaxFee) ? amount.add(nowMaxFee) : _TAmount;\r\n\r\n      const _fee = BNDivCeil(TAmount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n      const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n      return {\r\n        amount: TAmount,\r\n        fee,\r\n        expirationTime,\r\n      };\r\n    }\r\n  } else {\r\n    const _fee = BNDivCeil(amount.mul(new BN(nowFeeConfig.transferFeeBasisPoints)), new BN(POINT));\r\n    const fee = _fee.gt(maxFee) ? maxFee : _fee;\r\n\r\n    return {\r\n      amount,\r\n      fee,\r\n      expirationTime,\r\n    };\r\n  }\r\n}\r\n\r\nexport function minExpirationTime(\r\n  expirationTime1: number | undefined,\r\n  expirationTime2: number | undefined,\r\n): number | undefined {\r\n  if (expirationTime1 === undefined) return expirationTime2;\r\n  if (expirationTime2 === undefined) return expirationTime1;\r\n\r\n  return Math.min(expirationTime1, expirationTime2);\r\n}\r\n\r\nexport function BNDivCeil(bn1: BN, bn2: BN): BN {\r\n  const { div, mod } = bn1.divmod(bn2);\r\n\r\n  if (mod.gt(new BN(0))) {\r\n    return div.add(new BN(1));\r\n  } else {\r\n    return div;\r\n  }\r\n}\r\n","import { FarmRewardInfo, FarmVersion } from \"../raydium/farm\";\r\n\r\n/* ================= liquidity ================= */\r\nexport type LiquidityVersion = 4 | 5;\r\n\r\nexport interface ApiPoolInfoV4 {\r\n  id: string;\r\n  baseMint: string;\r\n  quoteMint: string;\r\n  lpMint: string;\r\n  baseDecimals: number;\r\n  quoteDecimals: number;\r\n  lpDecimals: number;\r\n  version: 4;\r\n  programId: string;\r\n  authority: string;\r\n  openOrders: string;\r\n  targetOrders: string;\r\n  baseVault: string;\r\n  quoteVault: string;\r\n  withdrawQueue: string;\r\n  lpVault: string;\r\n  marketVersion: 3;\r\n  marketProgramId: string;\r\n  marketId: string;\r\n  marketAuthority: string;\r\n  marketBaseVault: string;\r\n  marketQuoteVault: string;\r\n  marketBids: string;\r\n  marketAsks: string;\r\n  marketEventQueue: string;\r\n  lookupTableAccount: string;\r\n}\r\n\r\n/* ================= farm ================= */\r\nexport interface FarmRewardInfoV6 {\r\n  rewardMint: string;\r\n  rewardVault: string;\r\n  rewardOpenTime: number;\r\n  rewardEndTime: number;\r\n  rewardPerSecond: number;\r\n  rewardSender: string;\r\n}\r\n\r\nexport interface ApiStakePoolInfo {\r\n  // base\r\n  id: string;\r\n  symbol: string;\r\n  lpMint: string;\r\n  // version\r\n  version: FarmVersion;\r\n  programId: string;\r\n  // keys\r\n  authority: string;\r\n  lpVault: string;\r\n  rewardInfos: FarmRewardInfo[] | FarmRewardInfoV6[];\r\n  // status\r\n  upcoming: boolean;\r\n}\r\n\r\nexport interface ApiClmmConfigInfo {\r\n  id: string;\r\n  index: number;\r\n  protocolFeeRate: number;\r\n  tradeFeeRate: number;\r\n  tickSpacing: number;\r\n  fundFeeRate: number;\r\n  description: string;\r\n  defaultRange: number;\r\n  defaultRangePoint: number[];\r\n}\r\n\r\nexport interface ApiClmmPoolsItemStatistics {\r\n  volume: number;\r\n  volumeFee: number;\r\n  feeA: number;\r\n  feeB: number;\r\n  feeApr: number;\r\n  rewardApr: {\r\n    A: number;\r\n    B: number;\r\n    C: number;\r\n  };\r\n  apr: number;\r\n  priceMin: number;\r\n  priceMax: number;\r\n}\r\n\r\n// export interface ApiClmmPoolInfo {\r\n//   id: string;\r\n//   mintProgramIdA: string;\r\n//   mintProgramIdB: string;\r\n//   mintA: string;\r\n//   mintB: string;\r\n//   mintDecimalsA: number;\r\n//   mintDecimalsB: number;\r\n//   ammConfig: ApiClmmConfigInfo;\r\n//   rewardInfos: {\r\n//     mint: string;\r\n//     programId: string;\r\n//   }[];\r\n//   day: ApiClmmPoolsItemStatistics;\r\n//   week: ApiClmmPoolsItemStatistics;\r\n//   month: ApiClmmPoolsItemStatistics;\r\n//   tvl: number;\r\n//   lookupTableAccount: string;\r\n// }\r\n\r\n/** ====== v3 api types ======= */\r\nexport interface ApiV3PageIns<T> {\r\n  count: number;\r\n  hasNextPage: boolean;\r\n  data: T[];\r\n}\r\n\r\nexport enum JupTokenType {\r\n  ALL = \"all\",\r\n  Strict = \"strict\",\r\n}\r\nexport type PoolsApiReturn = ApiV3PageIns<ApiV3PoolInfoItem>;\r\n\r\nexport interface TransferFeeDataBaseType {\r\n  transferFeeConfigAuthority: string;\r\n  withdrawWithheldAuthority: string;\r\n  withheldAmount: string;\r\n  olderTransferFee: {\r\n    epoch: string;\r\n    maximumFee: string;\r\n    transferFeeBasisPoints: number;\r\n  };\r\n  newerTransferFee: {\r\n    epoch: string;\r\n    maximumFee: string;\r\n    transferFeeBasisPoints: number;\r\n  };\r\n}\r\n\r\ntype ExtensionsItem = {\r\n  coingeckoId?: string;\r\n  feeConfig?: TransferFeeDataBaseType;\r\n};\r\n\r\nexport type ApiV3Token = {\r\n  chainId: number;\r\n  address: string;\r\n  programId: string;\r\n  logoURI: string;\r\n  symbol: string;\r\n  name: string;\r\n  decimals: number;\r\n  tags: string[]; // \"hasFreeze\" | \"hasTransferFee\" | \"token-2022\" | \"community\" | \"unknown\" ..etc\r\n  extensions: ExtensionsItem;\r\n};\r\n\r\nexport type ApiV3TokenRes = {\r\n  mintList: ApiV3Token[];\r\n  blacklist: ApiV3Token[];\r\n  whiteList: string[];\r\n};\r\n\r\nexport interface ApiV3PoolInfoCountItem {\r\n  volume: number;\r\n  volumeQuote: number;\r\n  volumeFee: number;\r\n  apr: number;\r\n  feeApr: number;\r\n  priceMin: number;\r\n  priceMax: number;\r\n  rewardApr: number[];\r\n}\r\n\r\ntype PoolTypeItem = \"StablePool\" | \"OpenBookMarket\";\r\n\r\ntype FarmRewardInfoOld = {\r\n  mint: ApiV3Token;\r\n  perSecond: number;\r\n};\r\n\r\nexport type PoolFarmRewardInfo = FarmRewardInfoOld & {\r\n  startTime?: number;\r\n  endTime?: number;\r\n};\r\n\r\nexport interface PoolRewardInfoItem {\r\n  mint: ApiV3Token;\r\n  perSecond?: number;\r\n  startTime?: number;\r\n  endTime?: number;\r\n}\r\n\r\nexport interface ApiV3PoolInfoBaseItem {\r\n  programId: string;\r\n  id: string;\r\n  mintA: ApiV3Token;\r\n  mintB: ApiV3Token;\r\n  rewardDefaultInfos: PoolFarmRewardInfo[];\r\n  rewardDefaultPoolInfos: \"Ecosystem\" | \"Fusion\" | \"Raydium\" | \"Clmm\";\r\n  price: number;\r\n  mintAmountA: number;\r\n  mintAmountB: number;\r\n  feeRate: number;\r\n  tvl: number;\r\n\r\n  day: ApiV3PoolInfoCountItem;\r\n  week: ApiV3PoolInfoCountItem;\r\n  month: ApiV3PoolInfoCountItem;\r\n  pooltype: PoolTypeItem[];\r\n\r\n  farmUpcomingCount: number;\r\n  farmOngoingCount: number;\r\n  farmFinishedCount: number;\r\n}\r\nexport type ApiV3PoolInfoConcentratedItem = ApiV3PoolInfoBaseItem & {\r\n  type: \"Concentrated\";\r\n  config: ApiClmmConfigV3;\r\n};\r\nexport type ApiV3PoolInfoStandardItem = ApiV3PoolInfoBaseItem & {\r\n  type: \"Standard\";\r\n  marketId: string;\r\n  configId: string;\r\n  lpPrice: number;\r\n  lpAmount: number;\r\n  lpMint: ApiV3Token;\r\n};\r\n\r\nexport type ApiV3PoolInfoStandardItemCpmm = ApiV3PoolInfoBaseItem & {\r\n  type: \"Standard\";\r\n  lpMint: ApiV3Token;\r\n  lpPrice: number;\r\n  lpAmount: number;\r\n  config: ApiCpmmConfigV3;\r\n};\r\n\r\nexport type ApiV3PoolInfoItem =\r\n  | ApiV3PoolInfoConcentratedItem\r\n  | ApiV3PoolInfoStandardItem\r\n  | ApiV3PoolInfoStandardItemCpmm;\r\n\r\nexport enum PoolFetchType {\r\n  All = \"all\",\r\n  Standard = \"standard\",\r\n  Concentrated = \"concentrated\",\r\n  AllFarm = \"allFarm\",\r\n  StandardFarm = \"standardFarm\",\r\n  ConcentratedFarm = \"concentratedFarm\",\r\n}\r\n\r\nexport interface FetchPoolParams {\r\n  type?: PoolFetchType;\r\n  sort?:\r\n    | \"liquidity\"\r\n    | \"volume24h\"\r\n    | \"volume7d\"\r\n    | \"volume30d\"\r\n    | \"fee24h\"\r\n    | \"fee7d\"\r\n    | \"fee30d\"\r\n    | \"apr24h\"\r\n    | \"apr7d\"\r\n    | \"apr30d\";\r\n  order?: \"desc\" | \"asc\";\r\n  pageSize?: number;\r\n  page?: number;\r\n}\r\n\r\n// liquidity line\r\nexport interface Point {\r\n  time: number;\r\n  liquidity: number;\r\n}\r\nexport interface LiquidityLineApi {\r\n  count: number;\r\n  line: Point[];\r\n}\r\n\r\n// pool key\r\n\r\ninterface Base {\r\n  programId: string;\r\n  id: string;\r\n  mintA: ApiV3Token;\r\n  mintB: ApiV3Token;\r\n  lookupTableAccount?: string;\r\n  vault: { A: string; B: string };\r\n}\r\ninterface _Amm {\r\n  authority: string;\r\n  openOrders: string;\r\n  targetOrders: string;\r\n  mintLp: ApiV3Token;\r\n}\r\n\r\ninterface ApiCpmmConfigV3 {\r\n  id: string;\r\n  index: number;\r\n  protocolFeeRate: number;\r\n  tradeFeeRate: number;\r\n  fundFeeRate: number;\r\n  createPoolFee: string;\r\n}\r\n\r\ninterface _Cpmm {\r\n  authority: string;\r\n  mintLp: ApiV3Token;\r\n  config: ApiCpmmConfigV3;\r\n}\r\ninterface _Market {\r\n  marketProgramId: string;\r\n  marketId: string;\r\n  marketAuthority: string;\r\n  marketBaseVault: string;\r\n  marketQuoteVault: string;\r\n  marketBids: string;\r\n  marketAsks: string;\r\n  marketEventQueue: string;\r\n}\r\nexport type AmmV4Keys = Base & _Amm & _Market;\r\nexport type AmmV5Keys = Base & _Amm & _Market & { modelDataAccount: string };\r\nexport type CpmmKeys = Base & _Cpmm;\r\nexport interface ClmmRewardType {\r\n  mint: ApiV3Token;\r\n  vault: string;\r\n}\r\nexport type ClmmKeys = Base & { config: ApiClmmConfigV3; rewardInfos: ClmmRewardType[] };\r\nexport type PoolKeys = AmmV4Keys | AmmV5Keys | ClmmKeys | CpmmKeys;\r\n\r\n// clmm config\r\nexport interface ApiClmmConfigV3 {\r\n  id: string;\r\n  index: number;\r\n  protocolFeeRate: number;\r\n  tradeFeeRate: number;\r\n  tickSpacing: number;\r\n  fundFeeRate: number;\r\n  description: string;\r\n  defaultRange: number;\r\n  defaultRangePoint: number[];\r\n}\r\n\r\nexport interface RpcItemA {\r\n  url: string;\r\n  weight: number;\r\n  batch: boolean;\r\n  name: string;\r\n}\r\nexport interface RpcItemB {\r\n  url: string;\r\n  batch: boolean;\r\n  name: string;\r\n}\r\n\r\ntype RpcStrategy = \"speed\" | \"first\";\r\ntype RpcTypeWeight = { strategy: \"weight\"; rpcs: RpcItemA[] };\r\ntype RpcTypeOther = { strategy: RpcStrategy; rpcs: RpcItemB[] };\r\nexport type RpcType = RpcTypeWeight | RpcTypeOther;\r\n\r\nexport type FarmRewardTypeV6Key = \"Standard SPL\" | \"Option tokens\";\r\n\r\nexport interface RewardKeyInfoV345 {\r\n  mint: ApiV3Token;\r\n  vault: string;\r\n  type: FarmRewardTypeV6Key;\r\n  perSecond: number;\r\n  perBlock: number;\r\n}\r\nexport interface RewardKeyInfoV6 {\r\n  mint: ApiV3Token;\r\n  vault: string;\r\n  type: FarmRewardTypeV6Key;\r\n  perSecond: number;\r\n  openTime: string;\r\n  endTime: string;\r\n  sender: string;\r\n}\r\ninterface FormatFarmKeyOutBase {\r\n  programId: string;\r\n  id: string;\r\n  symbolMints: ApiV3Token[];\r\n  lpMint: ApiV3Token;\r\n  authority: string;\r\n  lpVault: string;\r\n}\r\nexport type FormatFarmKeyOutV345 = FormatFarmKeyOutBase & {\r\n  rewardInfos: RewardKeyInfoV345[];\r\n};\r\nexport type FormatFarmKeyOutV6 = FormatFarmKeyOutBase & {\r\n  config: {\r\n    periodMax: number;\r\n    periodMin: number;\r\n    periodExtend: number;\r\n  };\r\n  rewardInfos: RewardKeyInfoV6[];\r\n};\r\nexport type FormatFarmKeyOut = FormatFarmKeyOutV345 | FormatFarmKeyOutV6;\r\n// item page farm info\r\n// farm info\r\nexport interface RewardInfoV345 {\r\n  mint: ApiV3Token;\r\n  type: FarmRewardTypeV6Key;\r\n  apr: number;\r\n  perSecond: string;\r\n}\r\nexport interface RewardInfoV6 {\r\n  mint: ApiV3Token;\r\n  type: FarmRewardTypeV6Key;\r\n  apr: number;\r\n  perSecond: string;\r\n  openTime: string;\r\n  endTime: string;\r\n}\r\nexport type FarmTagsItem = \"Ecosystem\" | \"Farm\" | \"Fusion\" | \"Stake\";\r\nexport interface FormatFarmInfoOutBase {\r\n  programId: string;\r\n  id: string;\r\n  symbolMints: ApiV3Token[];\r\n  lpMint: ApiV3Token;\r\n  tvl: number;\r\n  lpPrice: number;\r\n  apr: number;\r\n  tags: FarmTagsItem[];\r\n}\r\nexport type FormatFarmInfoOutV345 = FormatFarmInfoOutBase & {\r\n  rewardInfos: RewardInfoV345[];\r\n};\r\nexport type FormatFarmInfoOutV6 = FormatFarmInfoOutBase & {\r\n  rewardInfos: RewardInfoV6[];\r\n};\r\nexport type FormatFarmInfoOut = FormatFarmInfoOutV345 | FormatFarmInfoOutV6;\r\n\r\nexport interface AvailabilityCheckAPI3 {\r\n  all: boolean;\r\n  swap: boolean;\r\n  createConcentratedPosition: boolean;\r\n  addConcentratedPosition: boolean;\r\n  addStandardPosition: boolean;\r\n  removeConcentratedPosition: boolean;\r\n  removeStandardPosition: boolean;\r\n  addFarm: boolean;\r\n  removeFarm: boolean;\r\n}\r\n\r\nexport type OwnerCreatedFarmInfo = {\r\n  farm: { id: string; programId: string }[];\r\n  clmm: { id: string; programId: string }[];\r\n};\r\n\r\nexport type OwnerIdoInfo = Record<\r\n  string,\r\n  {\r\n    programId: string;\r\n    poolId: string;\r\n    coin: string;\r\n    pc: string;\r\n  }\r\n>;\r\n\r\nexport type IdoKeysData = {\r\n  programId: string;\r\n  id: string;\r\n  authority: string;\r\n  projectInfo: {\r\n    mint: ApiV3Token;\r\n    vault: string;\r\n  };\r\n  buyInfo: {\r\n    mint: ApiV3Token;\r\n    vault: string;\r\n  };\r\n};\r\n\r\nexport interface ApiStakePool {\r\n  programId: string;\r\n  id: string;\r\n  apr: number;\r\n  lpMint: ApiV3Token;\r\n  lpPrice: number;\r\n  symbolMints: ApiV3Token[];\r\n  tvl: number;\r\n  tags: FarmTagsItem[];\r\n  rewardInfos: RewardInfoV345[];\r\n}\r\n\r\nexport type FarmPositionData = Record<\r\n  string,\r\n  Record<\r\n    string,\r\n    Record<\r\n      string,\r\n      {\r\n        programId: string;\r\n        lpAmount: string;\r\n        version: \"V1\" | \"V2\";\r\n      }\r\n    >\r\n  >\r\n>;\r\n","export const API_URLS = {\r\n  BASE_HOST: \"https://api-v3.raydium.io\",\r\n  OWNER_BASE_HOST: \"https://owner-v1.raydium.io\",\r\n  SERVICE_BASE_HOST: \"https://service.raydium.io\",\r\n\r\n  SEND_TRANSACTION: \"/send-transaction\",\r\n  FARM_ARP: \"/main/farm/info\",\r\n  FARM_ARP_LINE: \"/main/farm-apr-tv\",\r\n\r\n  CLMM_CONFIG: \"/main/clmm-config\",\r\n\r\n  VERSION: \"/main/version\",\r\n\r\n  // api v3\r\n  CHECK_AVAILABILITY: \"/v3/main/AvailabilityCheckAPI\",\r\n  RPCS: \"/main/rpcs\",\r\n  INFO: \"/main/info\",\r\n  STAKE_POOLS: \"/main/stake-pools\",\r\n  CHAIN_TIME: \"/main/chain-time\",\r\n\r\n  TOKEN_LIST: \"/mint/list\",\r\n  MINT_INFO_ID: \"/mint/ids\",\r\n\r\n  JUP_TOKEN_LIST: \"https://tokens.jup.ag/tokens?tags=lst,community\",\r\n  /**\r\n   * poolType: {all, concentrated, standard, allFarm, concentratedFarm, standardFarm}\r\n   * poolSortField: {liquidity | volume_24h / 7d / 30d | fee_24h / 7d / 30d | apr_24h / 7d / 30d}\r\n   * sortType: {desc/asc}\r\n   * page: number\r\n   * pageSize: number\r\n   */\r\n  POOL_LIST: \"/pools/info/list\",\r\n  /**\r\n   * ?ids=idList.join(',')\r\n   */\r\n  POOL_SEARCH_BY_ID: \"/pools/info/ids\",\r\n  /**\r\n   * mint1/mint2: search pool by mint\r\n   * poolSortField: {liquidity | volume_24h / 7d / 30d | fee_24h / 7d / 30d | apr_24h / 7d / 30d}\r\n   * poolType: {all, concentrated, standard, allFarm, concentratedFarm, standardFarm}\r\n   * sortType: {desc/asc}\r\n   * page: number\r\n   * pageSize: number\r\n   */\r\n  POOL_SEARCH_MINT: \"/pools/info/mint\",\r\n  /** ?lps=lpList.join(',') */\r\n  POOL_SEARCH_LP: \"/pools/info/lps\",\r\n  /** ?ids=idList.join(',') */\r\n  POOL_KEY_BY_ID: \"/pools/key/ids\",\r\n  /** ?id=string */\r\n  POOL_LIQUIDITY_LINE: \"/pools/line/liquidity\",\r\n  POOL_POSITION_LINE: \"/pools/line/position\",\r\n\r\n  FARM_INFO: \"/farms/info/ids\",\r\n  /** ?lp=string&pageSize=100&page=number */\r\n  FARM_LP_INFO: \"/farms/info/lp\",\r\n  FARM_KEYS: \"/farms/key/ids\",\r\n\r\n  OWNER_CREATED_FARM: \"/create-pool/{owner}\",\r\n  OWNER_IDO: \"/main/ido/{owner}\",\r\n  OWNER_STAKE_FARMS: \"/position/stake/{owner}\",\r\n  IDO_KEYS: \"/ido/key/ids\",\r\n  SWAP_HOST: \"https://transaction-v1.raydium.io\",\r\n  SWAP_COMPUTE: \"/compute/\",\r\n  SWAP_TX: \"/transaction/\",\r\n  MINT_PRICE: \"/mint/price\",\r\n  MIGRATE_CONFIG: \"/main/migrate-lp\",\r\n  PRIORITY_FEE: \"/main/auto-fee\",\r\n  JITO: \"https://mainnet.block-engine.jito.wtf\",\r\n  JITO_TRANSACTION: \"/api/v1/transactions\",\r\n  JITO_BUNDLE: \"/api/v1/bundles\",\r\n};\r\n\r\nexport const DEV_API_URLS = {\r\n  ...API_URLS,\r\n};\r\n\r\nexport type API_URL_CONFIG = Partial<typeof API_URLS>;\r\n","export const SESSION_KEY = \"ray_tab_hash\";\r\nexport const STORAGE_KEY = \"ray_req_hash\";\r\n\r\nexport const getSessionKey = (): string => {\r\n  if (typeof window === undefined) return \"\";\r\n  let key = sessionStorage.getItem(SESSION_KEY);\r\n\r\n  // new a session key\r\n  if (!key) {\r\n    key = `ray-${Date.now()}`;\r\n    sessionStorage.setItem(SESSION_KEY, key);\r\n  }\r\n  return key;\r\n};\r\n\r\nexport interface ResHistory {\r\n  status: number;\r\n  url: string;\r\n  params?: any;\r\n  data: any;\r\n  logCount?: number;\r\n  time: number;\r\n  session: string;\r\n  removeLastLog?: boolean;\r\n}\r\n\r\nexport const updateReqHistory = async ({\r\n  logCount = 1000,\r\n  removeLastLog,\r\n  ...resData\r\n}: Omit<ResHistory, \"time\" | \"session\">): Promise<void> => {\r\n  if (typeof window === undefined) return new Promise((resolve) => resolve());\r\n  const data: ResHistory[] = JSON.parse(localStorage.getItem(STORAGE_KEY) || \"[]\").slice(0, logCount - 1);\r\n\r\n  // means retry last save error\r\n  if (removeLastLog) data.pop();\r\n\r\n  // if data > 1kb\r\n  if (new Blob([JSON.stringify(resData.data)]).size > 1024)\r\n    resData.data = JSON.stringify(resData.data).substring(0, 200) + \"...\";\r\n  data.unshift({ ...resData, time: Date.now(), session: getSessionKey() });\r\n\r\n  try {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\r\n  } catch {\r\n    // if retry failed, empty request data\r\n    if (removeLastLog) {\r\n      let success = false;\r\n      const resStr = JSON.stringify(resData.data).substring(0, 100);\r\n      data[0].data = resStr + (resStr.length > 100 ? \"...\" : \"\");\r\n      while (!success) {\r\n        data.pop();\r\n        const resStr = JSON.stringify(resData.data).substring(0, 100);\r\n        data[0].data = resStr + (resStr.length > 100 ? \"...\" : \"\");\r\n        try {\r\n          localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\r\n          success = true;\r\n        } catch {\r\n          success = false;\r\n        }\r\n      }\r\n      return new Promise((resolve) => resolve());\r\n    }\r\n    return updateReqHistory({\r\n      ...resData,\r\n      logCount,\r\n      removeLastLog: true,\r\n    });\r\n  }\r\n};\r\n","import { Connection, Keypair, PublicKey, EpochInfo, Commitment } from \"@solana/web3.js\";\r\nimport { merge } from \"lodash\";\r\n\r\nimport { Api, API_URL_CONFIG, ApiV3TokenRes, ApiV3Token, JupTokenType, AvailabilityCheckAPI3 } from \"../api\";\r\nimport { EMPTY_CONNECTION, EMPTY_OWNER } from \"../common/error\";\r\nimport { createLogger, Logger } from \"../common/logger\";\r\nimport { Owner } from \"../common/owner\";\r\nimport { Cluster } from \"../solana\";\r\n\r\nimport Account, { TokenAccountDataProp } from \"./account/account\";\r\nimport Farm from \"./farm/farm\";\r\nimport Liquidity from \"./liquidity/liquidity\";\r\nimport { Clmm } from \"./clmm\";\r\nimport Cpmm from \"./cpmm/cpmm\";\r\nimport TradeV2 from \"./tradeV2/trade\";\r\nimport Utils1216 from \"./utils1216\";\r\nimport MarketV2 from \"./marketV2\";\r\nimport Ido from \"./ido\";\r\n\r\nimport TokenModule from \"./token/token\";\r\nimport { SignAllTransactions } from \"./type\";\r\n\r\nexport interface RaydiumLoadParams extends TokenAccountDataProp, Omit<RaydiumApiBatchRequestParams, \"api\"> {\r\n  /* ================= solana ================= */\r\n  // solana web3 connection\r\n  connection: Connection;\r\n  // solana cluster/network/env\r\n  cluster?: Cluster;\r\n  // user public key\r\n  owner?: PublicKey | Keypair;\r\n  /* ================= api ================= */\r\n  // api request interval in ms, -1 means never request again, 0 means always use fresh data, default is 5 mins (5 * 60 * 1000)\r\n  apiRequestInterval?: number;\r\n  // api request timeout in ms, default is 10 secs (10 * 1000)\r\n  apiRequestTimeout?: number;\r\n  apiCacheTime?: number;\r\n  signAllTransactions?: SignAllTransactions;\r\n  urlConfigs?: API_URL_CONFIG;\r\n  logRequests?: boolean;\r\n  logCount?: number;\r\n  jupTokenType?: JupTokenType;\r\n  disableFeatureCheck?: boolean;\r\n  disableLoadToken?: boolean;\r\n  blockhashCommitment?: Commitment;\r\n}\r\n\r\nexport interface RaydiumApiBatchRequestParams {\r\n  api: Api;\r\n  defaultChainTimeOffset?: number;\r\n  defaultChainTime?: number;\r\n}\r\n\r\nexport type RaydiumConstructorParams = Required<RaydiumLoadParams> & RaydiumApiBatchRequestParams;\r\n\r\ninterface DataBase<T> {\r\n  fetched: number;\r\n  data: T;\r\n  extInfo?: Record<string, any>;\r\n}\r\ninterface ApiData {\r\n  tokens?: DataBase<ApiV3Token[]>;\r\n\r\n  // v3 data\r\n  tokenList?: DataBase<ApiV3TokenRes>;\r\n  jupTokenList?: DataBase<ApiV3Token[]>;\r\n}\r\n\r\nexport class Raydium {\r\n  public cluster: Cluster;\r\n  public farm: Farm;\r\n  public account: Account;\r\n  public liquidity: Liquidity;\r\n  public clmm: Clmm;\r\n  public cpmm: Cpmm;\r\n  public tradeV2: TradeV2;\r\n  public utils1216: Utils1216;\r\n  public marketV2: MarketV2;\r\n  public ido: Ido;\r\n  public token: TokenModule;\r\n  public rawBalances: Map<string, string> = new Map();\r\n  public apiData: ApiData;\r\n  public availability: Partial<AvailabilityCheckAPI3>;\r\n  public blockhashCommitment: Commitment;\r\n\r\n  private _connection: Connection;\r\n  private _owner: Owner | undefined;\r\n  public api: Api;\r\n  private _apiCacheTime: number;\r\n  private _signAllTransactions?: SignAllTransactions;\r\n  private logger: Logger;\r\n  private _chainTime?: {\r\n    fetched: number;\r\n    value: {\r\n      chainTime: number;\r\n      offset: number;\r\n    };\r\n  };\r\n  private _epochInfo?: {\r\n    fetched: number;\r\n    value: EpochInfo;\r\n  };\r\n\r\n  constructor(config: RaydiumConstructorParams) {\r\n    const {\r\n      connection,\r\n      cluster,\r\n      owner,\r\n      api,\r\n      defaultChainTime,\r\n      defaultChainTimeOffset,\r\n      apiCacheTime,\r\n      blockhashCommitment = \"confirmed\",\r\n    } = config;\r\n\r\n    this._connection = connection;\r\n    this.cluster = cluster || \"mainnet\";\r\n    this._owner = owner ? new Owner(owner) : undefined;\r\n    this._signAllTransactions = config.signAllTransactions;\r\n    this.blockhashCommitment = blockhashCommitment;\r\n\r\n    this.api = api;\r\n    this._apiCacheTime = apiCacheTime || 5 * 60 * 1000;\r\n    this.logger = createLogger(\"Raydium\");\r\n    this.farm = new Farm({ scope: this, moduleName: \"Raydium_Farm\" });\r\n    this.account = new Account({\r\n      scope: this,\r\n      moduleName: \"Raydium_Account\",\r\n      tokenAccounts: config.tokenAccounts,\r\n      tokenAccountRawInfos: config.tokenAccountRawInfos,\r\n    });\r\n    this.liquidity = new Liquidity({ scope: this, moduleName: \"Raydium_LiquidityV2\" });\r\n    this.token = new TokenModule({ scope: this, moduleName: \"Raydium_tokenV2\" });\r\n    this.tradeV2 = new TradeV2({ scope: this, moduleName: \"Raydium_tradeV2\" });\r\n    this.clmm = new Clmm({ scope: this, moduleName: \"Raydium_clmm\" });\r\n    this.cpmm = new Cpmm({ scope: this, moduleName: \"Raydium_cpmm\" });\r\n    this.utils1216 = new Utils1216({ scope: this, moduleName: \"Raydium_utils1216\" });\r\n    this.marketV2 = new MarketV2({ scope: this, moduleName: \"Raydium_marketV2\" });\r\n    this.ido = new Ido({ scope: this, moduleName: \"Raydium_ido\" });\r\n\r\n    this.availability = {};\r\n    const now = new Date().getTime();\r\n    this.apiData = {};\r\n\r\n    if (defaultChainTimeOffset)\r\n      this._chainTime = {\r\n        fetched: now,\r\n        value: {\r\n          chainTime: defaultChainTime || Date.now() - defaultChainTimeOffset,\r\n          offset: defaultChainTimeOffset,\r\n        },\r\n      };\r\n  }\r\n\r\n  static async load(config: RaydiumLoadParams): Promise<Raydium> {\r\n    const custom: Required<RaydiumLoadParams> = merge(\r\n      // default\r\n      {\r\n        cluster: \"mainnet\",\r\n        owner: null,\r\n        apiRequestInterval: 5 * 60 * 1000,\r\n        apiRequestTimeout: 10 * 1000,\r\n      },\r\n      config,\r\n    );\r\n    const { cluster, apiRequestTimeout, logCount, logRequests, urlConfigs } = custom;\r\n\r\n    const api = new Api({ cluster, timeout: apiRequestTimeout, urlConfigs, logCount, logRequests });\r\n    const raydium = new Raydium({\r\n      ...custom,\r\n      api,\r\n    });\r\n\r\n    await raydium.fetchAvailabilityStatus(config.disableFeatureCheck ?? true);\r\n    if (!config.disableLoadToken)\r\n      await raydium.token.load({\r\n        type: config.jupTokenType,\r\n      });\r\n\r\n    return raydium;\r\n  }\r\n\r\n  get owner(): Owner | undefined {\r\n    return this._owner;\r\n  }\r\n  get ownerPubKey(): PublicKey {\r\n    if (!this._owner) throw new Error(EMPTY_OWNER);\r\n    return this._owner.publicKey;\r\n  }\r\n  public setOwner(owner?: PublicKey | Keypair): Raydium {\r\n    this._owner = owner ? new Owner(owner) : undefined;\r\n    return this;\r\n  }\r\n  get connection(): Connection {\r\n    if (!this._connection) throw new Error(EMPTY_CONNECTION);\r\n    return this._connection;\r\n  }\r\n  public setConnection(connection: Connection): Raydium {\r\n    this._connection = connection;\r\n    return this;\r\n  }\r\n  get signAllTransactions(): SignAllTransactions | undefined {\r\n    return this._signAllTransactions;\r\n  }\r\n  public setSignAllTransactions(signAllTransactions?: SignAllTransactions): Raydium {\r\n    this._signAllTransactions = signAllTransactions;\r\n    return this;\r\n  }\r\n\r\n  public checkOwner(): void {\r\n    if (!this.owner) {\r\n      this.logger.error(EMPTY_OWNER);\r\n      throw new Error(EMPTY_OWNER);\r\n    }\r\n  }\r\n\r\n  private isCacheInvalidate(time: number): boolean {\r\n    return new Date().getTime() - time > this._apiCacheTime;\r\n  }\r\n\r\n  public async fetchChainTime(): Promise<void> {\r\n    try {\r\n      const data = await this.api.getChainTimeOffset();\r\n      this._chainTime = {\r\n        fetched: Date.now(),\r\n        value: {\r\n          chainTime: Date.now() + data.offset * 1000,\r\n          offset: data.offset * 1000,\r\n        },\r\n      };\r\n    } catch {\r\n      this._chainTime = undefined;\r\n    }\r\n  }\r\n\r\n  public async fetchV3TokenList(forceUpdate?: boolean): Promise<ApiV3TokenRes> {\r\n    if (this.apiData.tokenList && !this.isCacheInvalidate(this.apiData.tokenList.fetched) && !forceUpdate)\r\n      return this.apiData.tokenList.data;\r\n    try {\r\n      const raydiumList = await this.api.getTokenList();\r\n      const dataObject = {\r\n        fetched: Date.now(),\r\n        data: raydiumList,\r\n      };\r\n      this.apiData.tokenList = dataObject;\r\n\r\n      return dataObject.data;\r\n    } catch (e) {\r\n      console.error(e);\r\n      return {\r\n        mintList: [],\r\n        blacklist: [],\r\n        whiteList: [],\r\n      };\r\n    }\r\n  }\r\n\r\n  public async fetchJupTokenList(forceUpdate?: boolean): Promise<ApiV3Token[]> {\r\n    const prevFetched = this.apiData.jupTokenList;\r\n    if (prevFetched && !this.isCacheInvalidate(prevFetched.fetched) && !forceUpdate) return prevFetched.data;\r\n    try {\r\n      const jupList = await this.api.getJupTokenList();\r\n      this.apiData.jupTokenList = {\r\n        fetched: Date.now(),\r\n        data: jupList,\r\n      };\r\n\r\n      return this.apiData.jupTokenList.data;\r\n    } catch (e) {\r\n      console.error(e);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  get chainTimeData(): { offset: number; chainTime: number } | undefined {\r\n    return this._chainTime?.value;\r\n  }\r\n\r\n  public async chainTimeOffset(): Promise<number> {\r\n    if (this._chainTime && Date.now() - this._chainTime.fetched <= 1000 * 60 * 5) return this._chainTime.value.offset;\r\n    await this.fetchChainTime();\r\n    return this._chainTime?.value.offset || 0;\r\n  }\r\n\r\n  public async currentBlockChainTime(): Promise<number> {\r\n    if (this._chainTime && Date.now() - this._chainTime.fetched <= 1000 * 60 * 5)\r\n      return this._chainTime.value.chainTime;\r\n    await this.fetchChainTime();\r\n    return this._chainTime?.value.chainTime || Date.now();\r\n  }\r\n\r\n  public async fetchEpochInfo(): Promise<EpochInfo> {\r\n    if (this._epochInfo && Date.now() - this._epochInfo.fetched <= 1000 * 30) return this._epochInfo.value;\r\n    this._epochInfo = {\r\n      fetched: Date.now(),\r\n      value: await this.connection.getEpochInfo(),\r\n    };\r\n    return this._epochInfo.value;\r\n  }\r\n\r\n  public async fetchAvailabilityStatus(skipCheck?: boolean): Promise<Partial<AvailabilityCheckAPI3>> {\r\n    if (skipCheck) return {};\r\n    try {\r\n      const data = await this.api.fetchAvailabilityStatus();\r\n      const isAllDisabled = data.all === false;\r\n      this.availability = {\r\n        all: data.all,\r\n        swap: isAllDisabled ? false : data.swap,\r\n        createConcentratedPosition: isAllDisabled ? false : data.createConcentratedPosition,\r\n        addConcentratedPosition: isAllDisabled ? false : data.addConcentratedPosition,\r\n        addStandardPosition: isAllDisabled ? false : data.addStandardPosition,\r\n        removeConcentratedPosition: isAllDisabled ? false : data.removeConcentratedPosition,\r\n        removeStandardPosition: isAllDisabled ? false : data.removeStandardPosition,\r\n        addFarm: isAllDisabled ? false : data.addFarm,\r\n        removeFarm: isAllDisabled ? false : data.removeFarm,\r\n      };\r\n      return data;\r\n    } catch {\r\n      return {};\r\n    }\r\n  }\r\n}\r\n","import {\r\n  createAssociatedTokenAccountInstruction,\r\n  TOKEN_PROGRAM_ID,\r\n  AccountLayout,\r\n  TOKEN_2022_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\nimport { Commitment, PublicKey, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport { getATAAddress, BigNumberish, InstructionType, WSOLMint } from \"@/common\";\r\nimport { AddInstructionParam } from \"@/common/txTool/txTool\";\r\n\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport {\r\n  closeAccountInstruction,\r\n  createWSolAccountInstructions,\r\n  makeTransferInstruction,\r\n  initTokenAccountInstruction,\r\n} from \"./instruction\";\r\nimport { HandleTokenAccountParams, TokenAccount, TokenAccountRaw, GetOrCreateTokenAccountParams } from \"./types\";\r\nimport { parseTokenAccountResp, generatePubKey } from \"./util\";\r\n\r\nexport interface TokenAccountDataProp {\r\n  tokenAccounts?: TokenAccount[];\r\n  tokenAccountRawInfos?: TokenAccountRaw[];\r\n}\r\nexport default class Account extends ModuleBase {\r\n  private _tokenAccounts: TokenAccount[] = [];\r\n  private _tokenAccountRawInfos: TokenAccountRaw[] = [];\r\n  private _accountChangeListenerId?: number;\r\n  private _accountListener: ((data: TokenAccountDataProp) => void)[] = [];\r\n  private _clientOwnedToken = false;\r\n\r\n  constructor(params: TokenAccountDataProp & ModuleBaseProps) {\r\n    super(params);\r\n    const { tokenAccounts, tokenAccountRawInfos } = params;\r\n    this._tokenAccounts = tokenAccounts || [];\r\n    this._tokenAccountRawInfos = tokenAccountRawInfos || [];\r\n    this._clientOwnedToken = !!(tokenAccounts || tokenAccountRawInfos);\r\n  }\r\n\r\n  get tokenAccounts(): TokenAccount[] {\r\n    return this._tokenAccounts;\r\n  }\r\n  get tokenAccountRawInfos(): TokenAccountRaw[] {\r\n    return this._tokenAccountRawInfos;\r\n  }\r\n\r\n  public updateTokenAccount({ tokenAccounts, tokenAccountRawInfos }: TokenAccountDataProp): Account {\r\n    if (tokenAccounts) this._tokenAccounts = tokenAccounts;\r\n    if (tokenAccountRawInfos) this._tokenAccountRawInfos = tokenAccountRawInfos;\r\n    this._accountChangeListenerId && this.scope.connection.removeAccountChangeListener(this._accountChangeListenerId);\r\n    this._accountChangeListenerId = undefined;\r\n    this._clientOwnedToken = true;\r\n    return this;\r\n  }\r\n\r\n  public addAccountChangeListener(cbk: (data: TokenAccountDataProp) => void): Account {\r\n    this._accountListener.push(cbk);\r\n    return this;\r\n  }\r\n\r\n  public removeAccountChangeListener(cbk: (data: TokenAccountDataProp) => void): Account {\r\n    this._accountListener = this._accountListener.filter((listener) => listener !== cbk);\r\n    return this;\r\n  }\r\n\r\n  public getAssociatedTokenAccount(mint: PublicKey, programId?: PublicKey): PublicKey {\r\n    return getATAAddress(this.scope.ownerPubKey, mint, programId).publicKey;\r\n  }\r\n\r\n  public async fetchWalletTokenAccounts(config?: { forceUpdate?: boolean; commitment?: Commitment }): Promise<{\r\n    tokenAccounts: TokenAccount[];\r\n    tokenAccountRawInfos: TokenAccountRaw[];\r\n  }> {\r\n    if (this._clientOwnedToken || (!config?.forceUpdate && this._tokenAccounts.length)) {\r\n      return {\r\n        tokenAccounts: this._tokenAccounts,\r\n        tokenAccountRawInfos: this._tokenAccountRawInfos,\r\n      };\r\n    }\r\n    this.scope.checkOwner();\r\n\r\n    const defaultConfig = {};\r\n    const customConfig = { ...defaultConfig, ...config };\r\n\r\n    const [solAccountResp, ownerTokenAccountResp, ownerToken2022AccountResp] = await Promise.all([\r\n      this.scope.connection.getAccountInfo(this.scope.ownerPubKey, customConfig.commitment),\r\n      this.scope.connection.getTokenAccountsByOwner(\r\n        this.scope.ownerPubKey,\r\n        { programId: TOKEN_PROGRAM_ID },\r\n        customConfig.commitment,\r\n      ),\r\n      this.scope.connection.getTokenAccountsByOwner(\r\n        this.scope.ownerPubKey,\r\n        { programId: TOKEN_2022_PROGRAM_ID },\r\n        customConfig.commitment,\r\n      ),\r\n    ]);\r\n\r\n    const { tokenAccounts, tokenAccountRawInfos } = parseTokenAccountResp({\r\n      owner: this.scope.ownerPubKey,\r\n      solAccountResp,\r\n      tokenAccountResp: {\r\n        context: ownerTokenAccountResp.context,\r\n        value: [...ownerTokenAccountResp.value, ...ownerToken2022AccountResp.value],\r\n      },\r\n    });\r\n\r\n    this._tokenAccounts = tokenAccounts;\r\n    this._tokenAccountRawInfos = tokenAccountRawInfos;\r\n\r\n    this._accountChangeListenerId && this.scope.connection.removeAccountChangeListener(this._accountChangeListenerId);\r\n    this._accountChangeListenerId = this.scope.connection.onAccountChange(\r\n      this.scope.ownerPubKey,\r\n      () => this.fetchWalletTokenAccounts({ forceUpdate: true }),\r\n      config?.commitment,\r\n    );\r\n\r\n    return { tokenAccounts, tokenAccountRawInfos };\r\n  }\r\n\r\n  // user token account needed, old _selectTokenAccount\r\n  public async getCreatedTokenAccount({\r\n    mint,\r\n    programId = TOKEN_PROGRAM_ID,\r\n    associatedOnly = true,\r\n  }: {\r\n    mint: PublicKey;\r\n    programId?: PublicKey;\r\n    associatedOnly?: boolean;\r\n  }): Promise<PublicKey | undefined> {\r\n    await this.fetchWalletTokenAccounts();\r\n    const tokenAccounts = this._tokenAccounts\r\n      .filter(({ mint: accountMint }) => accountMint?.equals(mint))\r\n      // sort by balance\r\n      .sort((a, b) => (a.amount.lt(b.amount) ? 1 : -1));\r\n\r\n    const ata = this.getAssociatedTokenAccount(mint, programId);\r\n    for (const tokenAccount of tokenAccounts) {\r\n      const { publicKey } = tokenAccount;\r\n      if (publicKey) {\r\n        if (!associatedOnly || (associatedOnly && ata.equals(publicKey))) return publicKey;\r\n      }\r\n    }\r\n  }\r\n\r\n  // old _selectOrCreateTokenAccount\r\n  public async getOrCreateTokenAccount(params: GetOrCreateTokenAccountParams): Promise<{\r\n    account?: PublicKey;\r\n    instructionParams?: AddInstructionParam;\r\n  }> {\r\n    await this.fetchWalletTokenAccounts();\r\n    const {\r\n      mint,\r\n      createInfo,\r\n      associatedOnly,\r\n      owner,\r\n      notUseTokenAccount = false,\r\n      skipCloseAccount = false,\r\n      checkCreateATAOwner = false,\r\n    } = params;\r\n    const tokenProgram = new PublicKey(params.tokenProgram || TOKEN_PROGRAM_ID);\r\n    const ata = this.getAssociatedTokenAccount(mint, new PublicKey(tokenProgram));\r\n    const accounts = (notUseTokenAccount ? [] : this.tokenAccountRawInfos)\r\n      .filter((i) => i.accountInfo.mint.equals(mint) && (!associatedOnly || i.pubkey.equals(ata)))\r\n      .sort((a, b) => (a.accountInfo.amount.lt(b.accountInfo.amount) ? 1 : -1));\r\n    // find token or don't need create\r\n    if (createInfo === undefined || accounts.length > 0) {\r\n      return accounts.length > 0 ? { account: accounts[0].pubkey } : {};\r\n    }\r\n\r\n    const newTxInstructions: AddInstructionParam = {\r\n      instructions: [],\r\n      endInstructions: [],\r\n      signers: [],\r\n      instructionTypes: [],\r\n      endInstructionTypes: [],\r\n    };\r\n\r\n    if (associatedOnly) {\r\n      const _createATAIns = createAssociatedTokenAccountInstruction(owner, ata, owner, mint, tokenProgram);\r\n      if (checkCreateATAOwner) {\r\n        const ataInfo = await this.scope.connection.getAccountInfo(ata);\r\n        if (ataInfo === null) {\r\n          newTxInstructions.instructions?.push(_createATAIns);\r\n          newTxInstructions.instructionTypes!.push(InstructionType.CreateATA);\r\n        } else if (\r\n          ataInfo.owner.equals(tokenProgram) &&\r\n          AccountLayout.decode(ataInfo.data).mint.equals(mint) &&\r\n          AccountLayout.decode(ataInfo.data).owner.equals(owner)\r\n        ) {\r\n          /* empty */\r\n        } else {\r\n          throw Error(`create ata check error -> mint: ${mint.toString()}, ata: ${ata.toString()}`);\r\n        }\r\n      } else {\r\n        newTxInstructions.instructions!.push(_createATAIns);\r\n        newTxInstructions.instructionTypes!.push(InstructionType.CreateATA);\r\n      }\r\n      if (mint.equals(WSOLMint) && createInfo.amount) {\r\n        const txInstruction = await createWSolAccountInstructions({\r\n          connection: this.scope.connection,\r\n          owner: this.scope.ownerPubKey,\r\n          payer: createInfo.payer || this.scope.ownerPubKey,\r\n          amount: createInfo.amount ?? 0,\r\n          skipCloseAccount,\r\n        });\r\n        newTxInstructions.instructions!.push(...(txInstruction.instructions || []));\r\n        newTxInstructions.endInstructions!.push(...(txInstruction.endInstructions || []));\r\n        newTxInstructions.instructionTypes!.push(...(txInstruction.instructionTypes || []));\r\n        newTxInstructions.endInstructionTypes!.push(...(txInstruction.endInstructionTypes || []));\r\n\r\n        if (createInfo.amount) {\r\n          newTxInstructions.instructions!.push(\r\n            makeTransferInstruction({\r\n              source: txInstruction.addresses.newAccount,\r\n              destination: ata,\r\n              owner: this.scope.ownerPubKey,\r\n              amount: createInfo.amount,\r\n              tokenProgram: TOKEN_PROGRAM_ID,\r\n            }),\r\n          );\r\n          newTxInstructions.instructionTypes!.push(InstructionType.TransferAmount);\r\n        }\r\n      }\r\n\r\n      if (!skipCloseAccount) {\r\n        newTxInstructions.endInstructions!.push(\r\n          closeAccountInstruction({\r\n            owner,\r\n            payer: createInfo.payer || owner,\r\n            tokenAccount: ata,\r\n            programId: tokenProgram,\r\n          }),\r\n        );\r\n        newTxInstructions.endInstructionTypes!.push(InstructionType.CloseAccount);\r\n      }\r\n\r\n      return { account: ata, instructionParams: newTxInstructions };\r\n    } else {\r\n      // if (mint.equals(WSOLMint)) {\r\n      //   const txInstruction = await createWSolAccountInstructions({\r\n      //     connection: this.scope.connection,\r\n      //     owner: this.scope.ownerPubKey,\r\n      //     payer: createInfo.payer || this.scope.ownerPubKey,\r\n      //     amount: createInfo.amount ?? 0,\r\n      //     skipCloseAccount,\r\n      //   });\r\n      //   newTxInstructions.instructions!.push(...(txInstruction.instructions || []));\r\n      //   newTxInstructions.endInstructions!.push(...(txInstruction.endInstructions || []));\r\n      //   newTxInstructions.signers!.push(...(txInstruction.signers || []));\r\n      //   newTxInstructions.instructionTypes!.push(...(txInstruction.instructionTypes || []));\r\n      //   newTxInstructions.endInstructionTypes!.push(...(txInstruction.endInstructionTypes || []));\r\n\r\n      //   return { account: txInstruction.addresses.newAccount, instructionParams: newTxInstructions };\r\n      // } else {\r\n      const newTokenAccount = generatePubKey({ fromPublicKey: owner, programId: tokenProgram });\r\n      const balanceNeeded = await this.scope.connection.getMinimumBalanceForRentExemption(AccountLayout.span);\r\n\r\n      const createAccountIns = SystemProgram.createAccountWithSeed({\r\n        fromPubkey: owner,\r\n        basePubkey: owner,\r\n        seed: newTokenAccount.seed,\r\n        newAccountPubkey: newTokenAccount.publicKey,\r\n        lamports: balanceNeeded + Number(createInfo.amount?.toString() ?? 0),\r\n        space: AccountLayout.span,\r\n        programId: tokenProgram,\r\n      });\r\n\r\n      newTxInstructions.instructions!.push(\r\n        createAccountIns,\r\n        initTokenAccountInstruction({\r\n          mint,\r\n          tokenAccount: newTokenAccount.publicKey,\r\n          owner: this.scope.ownerPubKey,\r\n          programId: tokenProgram,\r\n        }),\r\n      );\r\n      newTxInstructions.instructionTypes!.push(InstructionType.CreateAccount);\r\n      newTxInstructions.instructionTypes!.push(InstructionType.InitAccount);\r\n      if (!skipCloseAccount) {\r\n        newTxInstructions.endInstructions!.push(\r\n          closeAccountInstruction({\r\n            owner,\r\n            payer: createInfo.payer || owner,\r\n            tokenAccount: newTokenAccount.publicKey,\r\n            programId: tokenProgram,\r\n          }),\r\n        );\r\n        newTxInstructions.endInstructionTypes!.push(InstructionType.CloseAccount);\r\n      }\r\n      return { account: newTokenAccount.publicKey, instructionParams: newTxInstructions };\r\n    }\r\n    // }\r\n  }\r\n\r\n  public async checkOrCreateAta({\r\n    mint,\r\n    programId = TOKEN_PROGRAM_ID,\r\n    autoUnwrapWSOLToSOL,\r\n  }: {\r\n    mint: PublicKey;\r\n    programId?: PublicKey;\r\n    autoUnwrapWSOLToSOL?: boolean;\r\n  }): Promise<{ pubKey: PublicKey; newInstructions: AddInstructionParam }> {\r\n    await this.fetchWalletTokenAccounts();\r\n    let tokenAccountAddress = this.scope.account.tokenAccounts.find(\r\n      ({ mint: accountTokenMint }) => accountTokenMint?.toBase58() === mint.toBase58(),\r\n    )?.publicKey;\r\n\r\n    const owner = this.scope.ownerPubKey;\r\n    const newTxInstructions: AddInstructionParam = {};\r\n\r\n    if (!tokenAccountAddress) {\r\n      const ataAddress = this.getAssociatedTokenAccount(mint, programId);\r\n      const instruction = await createAssociatedTokenAccountInstruction(owner, ataAddress, owner, mint, programId);\r\n      newTxInstructions.instructions = [instruction];\r\n      newTxInstructions.instructionTypes = [InstructionType.CreateATA];\r\n      tokenAccountAddress = ataAddress;\r\n    }\r\n    if (autoUnwrapWSOLToSOL && WSOLMint.toBase58() === mint.toBase58()) {\r\n      newTxInstructions.endInstructions = [\r\n        closeAccountInstruction({ owner, payer: owner, tokenAccount: tokenAccountAddress, programId }),\r\n      ];\r\n      newTxInstructions.endInstructionTypes = [InstructionType.CloseAccount];\r\n    }\r\n\r\n    return {\r\n      pubKey: tokenAccountAddress,\r\n      newInstructions: newTxInstructions,\r\n    };\r\n  }\r\n\r\n  // old _handleTokenAccount\r\n  public async handleTokenAccount(\r\n    params: HandleTokenAccountParams,\r\n  ): Promise<AddInstructionParam & { tokenAccount: PublicKey }> {\r\n    const {\r\n      side,\r\n      amount,\r\n      mint,\r\n      programId = TOKEN_PROGRAM_ID,\r\n      tokenAccount,\r\n      payer = this.scope.ownerPubKey,\r\n      bypassAssociatedCheck,\r\n      skipCloseAccount,\r\n      checkCreateATAOwner,\r\n    } = params;\r\n\r\n    const ata = this.getAssociatedTokenAccount(mint, programId);\r\n\r\n    if (new PublicKey(WSOLMint).equals(mint)) {\r\n      const txInstruction = await createWSolAccountInstructions({\r\n        connection: this.scope.connection,\r\n        owner: this.scope.ownerPubKey,\r\n        payer,\r\n        amount,\r\n        skipCloseAccount,\r\n      });\r\n      return { tokenAccount: txInstruction.addresses.newAccount, ...txInstruction };\r\n    } else if (!tokenAccount || (side === \"out\" && !ata.equals(tokenAccount) && !bypassAssociatedCheck)) {\r\n      const instructions: TransactionInstruction[] = [];\r\n      const _createATAIns = createAssociatedTokenAccountInstruction(\r\n        this.scope.ownerPubKey,\r\n        ata,\r\n        this.scope.ownerPubKey,\r\n        mint,\r\n        programId,\r\n      );\r\n\r\n      if (checkCreateATAOwner) {\r\n        const ataInfo = await this.scope.connection.getAccountInfo(ata);\r\n        if (ataInfo === null) {\r\n          instructions.push(_createATAIns);\r\n        } else if (\r\n          ataInfo.owner.equals(TOKEN_PROGRAM_ID) &&\r\n          AccountLayout.decode(ataInfo.data).mint.equals(mint) &&\r\n          AccountLayout.decode(ataInfo.data).owner.equals(this.scope.ownerPubKey)\r\n        ) {\r\n          /* empty */\r\n        } else {\r\n          throw Error(`create ata check error -> mint: ${mint.toString()}, ata: ${ata.toString()}`);\r\n        }\r\n      } else {\r\n        instructions.push(_createATAIns);\r\n      }\r\n\r\n      return {\r\n        tokenAccount: ata,\r\n        instructions,\r\n        instructionTypes: [InstructionType.CreateATA],\r\n      };\r\n    }\r\n\r\n    return { tokenAccount };\r\n  }\r\n\r\n  public async processTokenAccount(props: {\r\n    mint: PublicKey;\r\n    programId?: PublicKey;\r\n    amount?: BigNumberish;\r\n    useSOLBalance?: boolean;\r\n    handleTokenAccount?: boolean;\r\n  }): Promise<Promise<AddInstructionParam & { tokenAccount?: PublicKey }>> {\r\n    const { mint, programId = TOKEN_PROGRAM_ID, amount, useSOLBalance, handleTokenAccount } = props;\r\n    let tokenAccount: PublicKey | undefined;\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    if (mint.equals(new PublicKey(WSOLMint)) && useSOLBalance) {\r\n      // mintA\r\n      const { tokenAccount: _tokenAccount, ...instructions } = await this.handleTokenAccount({\r\n        side: \"in\",\r\n        amount: amount || 0,\r\n        mint,\r\n        bypassAssociatedCheck: true,\r\n        programId,\r\n      });\r\n      tokenAccount = _tokenAccount;\r\n      txBuilder.addInstruction(instructions);\r\n    } else {\r\n      tokenAccount = await this.getCreatedTokenAccount({\r\n        mint,\r\n        associatedOnly: false,\r\n        programId,\r\n      });\r\n      if (!tokenAccount && handleTokenAccount) {\r\n        const { tokenAccount: _tokenAccount, ...instructions } = await this.scope.account.handleTokenAccount({\r\n          side: \"in\",\r\n          amount: 0,\r\n          mint,\r\n          bypassAssociatedCheck: true,\r\n          programId,\r\n        });\r\n        tokenAccount = _tokenAccount;\r\n        txBuilder.addInstruction(instructions);\r\n      }\r\n    }\r\n\r\n    return { tokenAccount, ...txBuilder.AllTxData };\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { createLogger, Logger } from \"../common/logger\";\r\nimport { TxBuilder } from \"../common/txTool/txTool\";\r\n\r\nimport { Raydium } from \"./\";\r\n\r\nexport interface ModuleBaseProps {\r\n  scope: Raydium;\r\n  moduleName: string;\r\n}\r\n\r\nconst joinMsg = (...args: (string | number | Record<string, any>)[]): string =>\r\n  args\r\n    .map((arg) => {\r\n      try {\r\n        return typeof arg === \"object\" ? JSON.stringify(arg) : arg;\r\n      } catch {\r\n        return arg;\r\n      }\r\n    })\r\n    .join(\", \");\r\nexport default class ModuleBase {\r\n  public scope: Raydium;\r\n  private disabled = false;\r\n  protected logger: Logger;\r\n\r\n  constructor({ scope, moduleName }: ModuleBaseProps) {\r\n    this.scope = scope;\r\n    this.logger = createLogger(moduleName);\r\n  }\r\n\r\n  protected createTxBuilder(feePayer?: PublicKey): TxBuilder {\r\n    this.scope.checkOwner();\r\n    return new TxBuilder({\r\n      connection: this.scope.connection,\r\n      feePayer: feePayer || this.scope.ownerPubKey,\r\n      cluster: this.scope.cluster,\r\n      owner: this.scope.owner,\r\n      blockhashCommitment: this.scope.blockhashCommitment,\r\n      api: this.scope.api,\r\n      signAllTransactions: this.scope.signAllTransactions,\r\n    });\r\n  }\r\n\r\n  public logDebug(...args: (string | number | Record<string, any>)[]): void {\r\n    this.logger.debug(joinMsg(args));\r\n  }\r\n\r\n  public logInfo(...args: (string | number | Record<string, any>)[]): void {\r\n    this.logger.info(joinMsg(args));\r\n  }\r\n\r\n  public logAndCreateError(...args: (string | number | Record<string, any>)[]): void {\r\n    const message = joinMsg(args);\r\n    // this.logger.error(message);\r\n    throw new Error(message);\r\n  }\r\n\r\n  public checkDisabled(): void {\r\n    if (this.disabled || !this.scope) this.logAndCreateError(\"module not working\");\r\n  }\r\n}\r\n","import {\r\n  createInitializeAccountInstruction,\r\n  createCloseAccountInstruction,\r\n  createTransferInstruction,\r\n  TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\nimport { Commitment, Connection, PublicKey, Signer, SystemProgram, TransactionInstruction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { generatePubKey } from \"./util\";\r\nimport { BigNumberish, parseBigNumberish } from \"@/common\";\r\nimport { AddInstructionParam } from \"@/common/txTool/txTool\";\r\nimport { InstructionType } from \"@/common/txTool/txType\";\r\nimport { TOKEN_WSOL } from \"../token/constant\";\r\n\r\nimport { splAccountLayout } from \"./layout\";\r\n\r\nexport function initTokenAccountInstruction(params: {\r\n  mint: PublicKey;\r\n  tokenAccount: PublicKey;\r\n  owner: PublicKey;\r\n  programId?: PublicKey;\r\n}): TransactionInstruction {\r\n  const { mint, tokenAccount, owner, programId = TOKEN_PROGRAM_ID } = params;\r\n  return createInitializeAccountInstruction(tokenAccount, mint, owner, programId);\r\n}\r\n\r\nexport function closeAccountInstruction(params: {\r\n  tokenAccount: PublicKey;\r\n  payer: PublicKey;\r\n  multiSigners?: Signer[];\r\n  owner: PublicKey;\r\n  programId?: PublicKey;\r\n}): TransactionInstruction {\r\n  const { tokenAccount, payer, multiSigners = [], owner, programId = TOKEN_PROGRAM_ID } = params;\r\n  return createCloseAccountInstruction(tokenAccount, payer, owner, multiSigners, programId);\r\n}\r\n\r\ninterface CreateWSolTokenAccount {\r\n  connection: Connection;\r\n  payer: PublicKey;\r\n  owner: PublicKey;\r\n  amount: BigNumberish;\r\n  commitment?: Commitment;\r\n  skipCloseAccount?: boolean;\r\n}\r\n/**\r\n * WrappedNative account = wsol account\r\n */\r\nexport async function createWSolAccountInstructions(params: CreateWSolTokenAccount): Promise<\r\n  AddInstructionParam & {\r\n    addresses: { newAccount: PublicKey };\r\n  }\r\n> {\r\n  const { connection, amount, commitment, payer, owner, skipCloseAccount } = params;\r\n\r\n  const balanceNeeded = await connection.getMinimumBalanceForRentExemption(splAccountLayout.span, commitment);\r\n  const lamports = parseBigNumberish(amount).add(new BN(balanceNeeded));\r\n  const newAccount = generatePubKey({ fromPublicKey: payer, programId: TOKEN_PROGRAM_ID });\r\n\r\n  return {\r\n    addresses: { newAccount: newAccount.publicKey },\r\n    signers: [],\r\n    instructions: [\r\n      SystemProgram.createAccountWithSeed({\r\n        fromPubkey: payer,\r\n        basePubkey: payer,\r\n        seed: newAccount.seed,\r\n        newAccountPubkey: newAccount.publicKey,\r\n        lamports: lamports.toNumber(),\r\n        space: splAccountLayout.span,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n      initTokenAccountInstruction({\r\n        mint: new PublicKey(TOKEN_WSOL.address),\r\n        tokenAccount: newAccount.publicKey,\r\n        owner,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n    ],\r\n    instructionTypes: [InstructionType.CreateAccount, InstructionType.InitAccount],\r\n    endInstructionTypes: skipCloseAccount ? [] : [InstructionType.CloseAccount],\r\n    endInstructions: skipCloseAccount\r\n      ? []\r\n      : [\r\n          closeAccountInstruction({\r\n            tokenAccount: newAccount.publicKey,\r\n            payer,\r\n            owner,\r\n          }),\r\n        ],\r\n  };\r\n}\r\n\r\nexport function makeTransferInstruction({\r\n  source,\r\n  destination,\r\n  owner,\r\n  amount,\r\n  multiSigners = [],\r\n  tokenProgram = TOKEN_PROGRAM_ID,\r\n}: {\r\n  source: PublicKey;\r\n  destination: PublicKey;\r\n  owner: PublicKey;\r\n  amount: BigNumberish;\r\n  multiSigners?: Signer[];\r\n  tokenProgram?: PublicKey;\r\n}): TransactionInstruction {\r\n  return createTransferInstruction(source, destination, owner, BigInt(String(amount)), multiSigners, tokenProgram);\r\n}\r\n","import { AccountInfo, PublicKey, RpcResponseAndContext, Keypair, GetProgramAccountsResponse } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\nimport { createLogger, getATAAddress } from \"@/common\";\r\n\r\nimport { splAccountLayout } from \"./layout\";\r\nimport { TokenAccount, TokenAccountRaw } from \"./types\";\r\nimport { sha256 } from \"@noble/hashes/sha256\";\r\n\r\nconst logger = createLogger(\"Raydium_Util\");\r\n\r\nexport interface ParseTokenAccount {\r\n  owner: PublicKey;\r\n  solAccountResp?: AccountInfo<Buffer> | null;\r\n  tokenAccountResp: RpcResponseAndContext<GetProgramAccountsResponse>;\r\n}\r\n\r\nexport function parseTokenAccountResp({ owner, solAccountResp, tokenAccountResp }: ParseTokenAccount): {\r\n  tokenAccounts: TokenAccount[];\r\n  tokenAccountRawInfos: TokenAccountRaw[];\r\n} {\r\n  const tokenAccounts: TokenAccount[] = [];\r\n  const tokenAccountRawInfos: TokenAccountRaw[] = [];\r\n\r\n  for (const { pubkey, account } of tokenAccountResp.value) {\r\n    const accountInfo = splAccountLayout.decode(account.data);\r\n    const { mint, amount } = accountInfo;\r\n    tokenAccounts.push({\r\n      publicKey: pubkey,\r\n      mint,\r\n      amount,\r\n      isAssociated: getATAAddress(owner, mint, account.owner).publicKey.equals(pubkey),\r\n      isNative: false,\r\n      programId: account.owner,\r\n    });\r\n    // todo programId should get from api\r\n    tokenAccountRawInfos.push({ pubkey, accountInfo, programId: account.owner });\r\n  }\r\n\r\n  if (solAccountResp) {\r\n    tokenAccounts.push({\r\n      mint: PublicKey.default,\r\n      amount: new BN(solAccountResp.lamports),\r\n      isNative: true,\r\n      programId: solAccountResp.owner,\r\n    });\r\n  }\r\n\r\n  return {\r\n    tokenAccounts,\r\n    tokenAccountRawInfos,\r\n  };\r\n}\r\n\r\nexport function generatePubKey({\r\n  fromPublicKey,\r\n  programId = TOKEN_PROGRAM_ID,\r\n}: {\r\n  fromPublicKey: PublicKey;\r\n  programId: PublicKey;\r\n}): { publicKey: PublicKey; seed: string } {\r\n  const seed = Keypair.generate().publicKey.toBase58().slice(0, 32);\r\n  const publicKey = createWithSeed(fromPublicKey, seed, programId);\r\n  return { publicKey, seed };\r\n}\r\n\r\nfunction createWithSeed(fromPublicKey: PublicKey, seed: string, programId: PublicKey): PublicKey {\r\n  const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\r\n  const publicKeyBytes = sha256(buffer);\r\n  return new PublicKey(publicKeyBytes);\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN, { isBN } from \"bn.js\";\r\n\r\nimport {\r\n  bits,\r\n  blob,\r\n  Blob,\r\n  Layout,\r\n  offset as _offset,\r\n  seq as _seq,\r\n  Structure as _Structure,\r\n  u32 as _u32,\r\n  u8 as _u8,\r\n  UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n} from \"./buffer-layout\";\r\n\r\nexport * from \"./buffer-layout\";\r\nexport { blob };\r\n\r\nexport class BNLayout<P extends string = \"\"> extends Layout<BN, P> {\r\n  blob: Layout<Buffer>;\r\n  signed: boolean;\r\n\r\n  constructor(span: number, signed: boolean, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends, but it desn't matter\r\n    super(span, property);\r\n    this.blob = blob(span);\r\n    this.signed = signed;\r\n  }\r\n\r\n  /** @override */\r\n  decode(b: Buffer, offset = 0): BN {\r\n    const num = new BN(this.blob.decode(b, offset), 10, \"le\");\r\n    if (this.signed) {\r\n      return num.fromTwos(this.span * 8).clone();\r\n    }\r\n    return num;\r\n  }\r\n\r\n  /** @override */\r\n  encode(src: BN, b: Buffer, offset = 0): number {\r\n    if (typeof src === \"number\") src = new BN(src); // src will pass a number accidently in union\r\n    if (this.signed) {\r\n      src = src.toTwos(this.span * 8);\r\n    }\r\n    return this.blob.encode(src.toArrayLike(Buffer, \"le\", this.span), b, offset);\r\n  }\r\n}\r\n\r\nexport class WideBits<P extends string = \"\"> extends Layout<Record<string, boolean>, P> {\r\n  _lower: any;\r\n  _upper: any;\r\n  // TODO: unknown\r\n  constructor(property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(8, property);\r\n    this._lower = bits(_u32(), false);\r\n    this._upper = bits(_u32(), false);\r\n  }\r\n\r\n  addBoolean(property: string): void {\r\n    if (this._lower.fields.length < 32) {\r\n      this._lower.addBoolean(property);\r\n    } else {\r\n      this._upper.addBoolean(property);\r\n    }\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): Record<string, boolean> {\r\n    const lowerDecoded = this._lower.decode(b, offset);\r\n    const upperDecoded = this._upper.decode(b, offset + this._lower.span);\r\n    return { ...lowerDecoded, ...upperDecoded };\r\n  }\r\n\r\n  encode(src: any /* TEMP */, b: Buffer, offset = 0): any {\r\n    return this._lower.encode(src, b, offset) + this._upper.encode(src, b, offset + this._lower.span);\r\n  }\r\n}\r\n\r\nexport function u8<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(1, property);\r\n}\r\n\r\nexport function u32<P extends string = \"\">(property?: P): UInt<number, P> {\r\n  return new UInt(4, property);\r\n}\r\n\r\nexport function u64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, false, property);\r\n}\r\n\r\nexport function u128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, false, property);\r\n}\r\n\r\nexport function i8<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(1, true, property);\r\n}\r\n\r\nexport function i64<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(8, true, property);\r\n}\r\n\r\nexport function i128<P extends string = \"\">(property?: P): BNLayout<P> {\r\n  return new BNLayout(16, true, property);\r\n}\r\n\r\nexport class WrappedLayout<T, U, P extends string = \"\"> extends Layout<U, P> {\r\n  layout: Layout<T>;\r\n  decoder: (data: T) => U;\r\n  encoder: (src: U) => T;\r\n\r\n  constructor(layout: Layout<T>, decoder: (data: T) => U, encoder: (src: U) => T, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(layout.span, property);\r\n    this.layout = layout;\r\n    this.decoder = decoder;\r\n    this.encoder = encoder;\r\n  }\r\n\r\n  decode(b: Buffer, offset?: number): U {\r\n    return this.decoder(this.layout.decode(b, offset));\r\n  }\r\n\r\n  encode(src: U, b: Buffer, offset?: number): number {\r\n    return this.layout.encode(this.encoder(src), b, offset);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset?: number): number {\r\n    return this.layout.getSpan(b, offset);\r\n  }\r\n}\r\n\r\nexport function publicKey<P extends string = \"\">(property?: P): Layout<PublicKey, P> {\r\n  return new WrappedLayout(\r\n    blob(32),\r\n    (b: Buffer) => new PublicKey(b),\r\n    (key: PublicKey) => key.toBuffer(),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class OptionLayout<T, P> extends Layout<T | null, P> {\r\n  layout: Layout<T>;\r\n  discriminator: Layout<number>;\r\n\r\n  constructor(layout: Layout<T>, property?: P) {\r\n    //@ts-expect-error type wrong for super()'s type different from extends , but it desn't matter\r\n    super(-1, property);\r\n    this.layout = layout;\r\n    this.discriminator = _u8();\r\n  }\r\n\r\n  encode(src: T | null, b: Buffer, offset = 0): number {\r\n    if (src === null || src === undefined) {\r\n      return this.discriminator.encode(0, b, offset);\r\n    }\r\n    this.discriminator.encode(1, b, offset);\r\n    return this.layout.encode(src, b, offset + 1) + 1;\r\n  }\r\n\r\n  decode(b: Buffer, offset = 0): T | null {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return null;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.decode(b, offset + 1);\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n\r\n  getSpan(b: Buffer, offset = 0): number {\r\n    const discriminator = this.discriminator.decode(b, offset);\r\n    if (discriminator === 0) {\r\n      return 1;\r\n    } else if (discriminator === 1) {\r\n      return this.layout.getSpan(b, offset + 1) + 1;\r\n    }\r\n    throw new Error(\"Invalid option \" + this.property);\r\n  }\r\n}\r\n\r\nexport function option<T, P extends string = \"\">(layout: Layout<T>, property?: P): Layout<T | null, P> {\r\n  return new OptionLayout<T, P>(layout, property);\r\n}\r\n\r\nexport function bool<P extends string = \"\">(property?: P): Layout<boolean, P> {\r\n  return new WrappedLayout(_u8(), decodeBool, encodeBool, property);\r\n}\r\n\r\nexport function decodeBool(value: number): boolean {\r\n  if (value === 0) {\r\n    return false;\r\n  } else if (value === 1) {\r\n    return true;\r\n  }\r\n  throw new Error(\"Invalid bool: \" + value);\r\n}\r\n\r\nexport function encodeBool(value: boolean): number {\r\n  return value ? 1 : 0;\r\n}\r\n\r\nexport function vec<T, P extends string = \"\">(elementLayout: Layout<T>, property?: P): Layout<T[], P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ values: T[] }> = struct([\r\n    length,\r\n    seq(elementLayout, _offset(length, -length.span), \"values\"),\r\n  ]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function tagged<T, P extends string = \"\">(tag: BN, layout: Layout<T>, property?: P): Layout<T, P> {\r\n  const wrappedLayout: Layout<{ tag: BN; data: T }> = struct([u64(\"tag\"), layout.replicate(\"data\")]) as any; // Something I don't know\r\n\r\n  function decodeTag({ tag: receivedTag, data }: { tag: BN; data: T }): T {\r\n    if (!receivedTag.eq(tag)) {\r\n      throw new Error(\"Invalid tag, expected: \" + tag.toString(\"hex\") + \", got: \" + receivedTag.toString(\"hex\"));\r\n    }\r\n    return data;\r\n  }\r\n\r\n  return new WrappedLayout(wrappedLayout, decodeTag, (data) => ({ tag, data }), property);\r\n}\r\n\r\nexport function vecU8<P extends string = \"\">(property?: P): Layout<Buffer, P> {\r\n  const length = _u32(\"length\");\r\n  const layout: Layout<{ data: Buffer }> = struct([length, blob(_offset(length, -length.span), \"data\")]) as any; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ data }) => data,\r\n    (data) => ({ data }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport function str<P extends string = \"\">(property?: P): Layout<string, P> {\r\n  return new WrappedLayout(\r\n    vecU8(),\r\n    (data) => data.toString(\"utf-8\"),\r\n    (s) => Buffer.from(s, \"utf-8\"),\r\n    property,\r\n  );\r\n}\r\n\r\nexport interface EnumLayout<T, P extends string = \"\"> extends Layout<T, P> {\r\n  registry: Record<string, Layout<any>>;\r\n}\r\n\r\nexport function rustEnum<T, P extends string = \"\">(variants: Layout<any>[], property?: P): EnumLayout<T, P> {\r\n  const unionLayout = _union(_u8(), property);\r\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property));\r\n  return unionLayout as any; // ?why use UnionLayout? This must be a fault\r\n}\r\n\r\nexport function array<T, P extends string = \"\">(\r\n  elementLayout: Layout<T>,\r\n  length: number,\r\n  property?: P,\r\n): Layout<T[], P> {\r\n  const layout = struct([seq(elementLayout, length, \"values\")]) as any as Layout<{ values: T[] }>; // Something I don't know\r\n  return new WrappedLayout(\r\n    layout,\r\n    ({ values }) => values,\r\n    (values) => ({ values }),\r\n    property,\r\n  );\r\n}\r\n\r\nexport class Structure<T, P, D> extends _Structure<T, P, D> {\r\n  /** @override */\r\n  decode(b: Buffer, offset?: number): D {\r\n    return super.decode(b, offset);\r\n  }\r\n}\r\n\r\nexport function struct<T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n): T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n      Value,\r\n      P,\r\n      {\r\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n          ? V\r\n          : any;\r\n      }\r\n    >\r\n  : any {\r\n  //@ts-expect-error this type is not quite satisfied the define, but, never no need to worry about.\r\n  return new Structure(fields, property, decodePrefixes);\r\n}\r\n\r\nexport type GetLayoutSchemaFromStructure<T extends Structure<any, any, any>> = T extends Structure<any, any, infer S>\r\n  ? S\r\n  : any;\r\nexport type GetStructureFromLayoutSchema<S> = Structure<any, any, S>;\r\n\r\nexport class Union<Schema> extends _Union<Schema> {\r\n  encodeInstruction(instruction: any): Buffer {\r\n    const instructionMaxSpan = Math.max(...Object.values(this.registry).map((r) => r.span));\r\n    const b = Buffer.alloc(instructionMaxSpan);\r\n    return b.slice(0, this.encode(instruction, b));\r\n  }\r\n\r\n  decodeInstruction(instruction: any): Partial<Schema> {\r\n    return this.decode(instruction);\r\n  }\r\n}\r\nexport function union<UnionSchema extends { [key: string]: any } = any>(\r\n  discr: any,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n): Union<UnionSchema> {\r\n  return new Union(discr, defaultLayout, property);\r\n}\r\n\r\nclass Zeros extends Blob {\r\n  decode(b: Buffer, offset: number): Buffer {\r\n    const slice = super.decode(b, offset);\r\n    if (!slice.every((v) => v === 0)) {\r\n      throw new Error(\"nonzero padding bytes\");\r\n    }\r\n    return slice;\r\n  }\r\n}\r\n\r\nexport function zeros(length: number): Zeros {\r\n  return new Zeros(length);\r\n}\r\n\r\nexport function seq<T, P extends string = \"\", AnotherP extends string = \"\">(\r\n  elementLayout: Layout<T, P>,\r\n  count: number | BN | Layout<BN | number, P>,\r\n  property?: AnotherP,\r\n): Layout<T[], AnotherP> {\r\n  let parsedCount: number;\r\n  const superCount =\r\n    typeof count === \"number\"\r\n      ? count\r\n      : isBN(count)\r\n      ? count.toNumber()\r\n      : new Proxy(count as unknown as Layout<number> /* pretend to be Layout<number> */, {\r\n          get(target, property): any {\r\n            if (!parsedCount) {\r\n              // get count in targetLayout. note that count may be BN\r\n              const countProperty = Reflect.get(target, \"count\");\r\n\r\n              // let targetLayout's  property:count be a number\r\n              parsedCount = isBN(countProperty) ? countProperty.toNumber() : countProperty;\r\n\r\n              // record the count\r\n              Reflect.set(target, \"count\", parsedCount);\r\n            }\r\n            return Reflect.get(target, property);\r\n          },\r\n          set(target, property, value): any {\r\n            if (property === \"count\") {\r\n              parsedCount = value;\r\n            }\r\n            return Reflect.set(target, property, value);\r\n          },\r\n        });\r\n\r\n  // @ts-expect-error force type\r\n  return _seq(elementLayout, superCount, property);\r\n}\r\n","import {\r\n  bits as _bits,\r\n  BitStructure as _BitStructure,\r\n  blob as _blob,\r\n  Blob as _Blob,\r\n  cstr as _cstr,\r\n  f32 as _f32,\r\n  f32be as _f32be,\r\n  f64 as _f64,\r\n  f64be as _f64be,\r\n  greedy as _greedy,\r\n  Layout as _Layout,\r\n  ns64 as _ns64,\r\n  ns64be as _ns64be,\r\n  nu64 as _nu64,\r\n  nu64be as _nu64be,\r\n  offset as _offset,\r\n  s16 as _s16,\r\n  s16be as _s16be,\r\n  s24 as _s24,\r\n  s24be as _s24be,\r\n  s32 as _s32,\r\n  s32be as _s32be,\r\n  s40 as _s40,\r\n  s40be as _s40be,\r\n  s48 as _s48,\r\n  s48be as _s48be,\r\n  s8 as _s8,\r\n  seq as _seq,\r\n  struct as _struct,\r\n  Structure as _Structure,\r\n  u16 as _u16,\r\n  u16be as _u16be,\r\n  u24 as _u24,\r\n  u24be as _u24be,\r\n  u32 as _u32,\r\n  u32be as _u32be,\r\n  u40 as _u40,\r\n  u40be as _u40be,\r\n  u48 as _u48,\r\n  u48be as _u48be,\r\n  u8 as _u8,\r\n  UInt as _UInt,\r\n  union as _union,\r\n  Union as _Union,\r\n  unionLayoutDiscriminator as _unionLayoutDiscriminator,\r\n  utf8 as _utf8,\r\n} from \"@solana/buffer-layout\";\r\n\r\n//#region ------------------- Layout -------------------\r\nexport interface Layout<T = any, P = \"\"> {\r\n  span: number;\r\n  property?: P;\r\n  decode(b: Buffer, offset?: number): T;\r\n  encode(src: T, b: Buffer, offset?: number): number;\r\n  getSpan(b: Buffer, offset?: number): number;\r\n  replicate<AP extends string>(name: AP): Layout<T, AP>;\r\n}\r\nexport interface LayoutConstructor {\r\n  new <T, P>(): Layout<T, P>; // for class extends syntex\r\n  new <T, P>(span?: T, property?: P): Layout<T, P>;\r\n  readonly prototype: Layout;\r\n}\r\nexport const Layout = _Layout as unknown as LayoutConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Structure -------------------\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport interface Structure<T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>\r\n  extends Layout<DecodeSchema, P> {\r\n  span: number;\r\n  decode(b: Buffer, offset?: number): DecodeSchema;\r\n  layoutFor<AP extends string>(property: AP): Layout<DecodeSchema[AP]>;\r\n  offsetOf<AP extends string>(property: AP): number;\r\n}\r\ninterface StructureConstructor {\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(): Structure<T, P, DecodeSchema>;\r\n  new <T = any, P = \"\", DecodeSchema extends { [key: string]: any } = any>(\r\n    fields: T,\r\n    property?: P,\r\n    decodePrefixes?: boolean,\r\n  ): Structure<T, P, DecodeSchema>;\r\n}\r\nexport const Structure = _Structure as unknown as StructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Union -------------------\r\nexport interface Union<UnionSchema extends { [key: string]: any } = any> extends Layout {\r\n  registry: object;\r\n  decode(b: Buffer, offset?: number): Partial<UnionSchema>;\r\n  addVariant(\r\n    variant: number,\r\n    layout: Structure<any, any, Partial<UnionSchema>> | Layout<any, keyof UnionSchema>,\r\n    property?: string,\r\n  ): any /* TEMP: code in Layout.js 1809 */;\r\n}\r\ninterface UnionConstructor {\r\n  new <UnionSchema extends { [key: string]: any } = any>(): Union<UnionSchema>;\r\n  new <UnionSchema extends { [key: string]: any } = any>(\r\n    discr: Layout<any, any>,\r\n    defaultLayout: Layout<any, any>,\r\n    property?: string,\r\n  ): Union<UnionSchema>;\r\n}\r\nexport const Union = _Union as unknown as UnionConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- BitStructure -------------------\r\nexport type BitStructure<T = unknown /* TEMP */, P = \"\"> = Layout<T, P>;\r\ninterface BitStructureConstructor {\r\n  new (...params: any[]): BitStructure;\r\n}\r\nexport const BitStructure = _BitStructure as BitStructureConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- UInt -------------------\r\nexport type UInt<T = any, P = \"\"> = Layout<T, P>;\r\ninterface UIntConstructor {\r\n  new <T, P>(span?: T, property?: P): UInt<T, P>;\r\n}\r\nexport const UInt = _UInt as UIntConstructor;\r\n//#endregion\r\n\r\n//#region ------------------- Blob -------------------\r\nexport type Blob<P extends string = \"\"> = Layout<Buffer, P>;\r\ninterface BlobConstructor {\r\n  new (...params: ConstructorParameters<LayoutConstructor>): Blob;\r\n}\r\nexport const Blob = _Blob as unknown as BlobConstructor;\r\n//#endregion\r\n\r\nexport const greedy = _greedy as <P extends string = \"\">(elementSpan?: number, property?: P) => Layout<number, P>;\r\nexport const u8 = _u8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16 = _u16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24 = _u24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32 = _u32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40 = _u40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48 = _u48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64 = _nu64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u16be = _u16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u24be = _u24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u32be = _u32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u40be = _u40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const u48be = _u48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const nu64be = _nu64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s8 = _s8 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16 = _s16 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24 = _s24 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32 = _s32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40 = _s40 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48 = _s48 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64 = _ns64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s16be = _s16be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s24be = _s24be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s32be = _s32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s40be = _s40be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const s48be = _s48be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const ns64be = _ns64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32 = _f32 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f32be = _f32be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64 = _f64 as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\nexport const f64be = _f64be as <P extends string = \"\">(property?: P) => Layout<number, P>;\r\n\r\nexport const struct = _struct as <T, P extends string = \"\">(\r\n  fields: T,\r\n  property?: P,\r\n  decodePrefixes?: boolean,\r\n) => T extends Layout<infer Value, infer Property>[]\r\n  ? Structure<\r\n      Value,\r\n      P,\r\n      {\r\n        [K in Exclude<Extract<Property, string>, \"\">]: Extract<T[number], Layout<any, K>> extends Layout<infer V, any>\r\n          ? V\r\n          : any;\r\n      }\r\n    >\r\n  : any;\r\n\r\nexport const seq = _seq as unknown as <T, P>(\r\n  elementLayout: Layout<T, string>,\r\n  count: number | Layout<number, string>,\r\n  property?: P,\r\n) => Layout<T[]>;\r\nexport const union = _union as <UnionSchema extends { [key: string]: any } = any>(\r\n  discr: Layout<any, any>,\r\n  defaultLayout?: any,\r\n  property?: string,\r\n) => Union<UnionSchema>;\r\nexport const unionLayoutDiscriminator = _unionLayoutDiscriminator as <P extends string = \"\">(\r\n  layout: Layout<any, P>,\r\n  property?: P,\r\n) => any;\r\nexport const blob = _blob as unknown as <P extends string = \"\">(\r\n  length: number | Layout<number, P>,\r\n  property?: P,\r\n) => Blob<P>;\r\nexport const cstr = _cstr as <P extends string = \"\">(property?: P) => Layout<string, P>;\r\nexport const utf8 = _utf8 as <P extends string = \"\">(maxSpan: number, property?: P) => Layout<string, P>;\r\nexport const bits = _bits as unknown as <T, P extends string = \"\">(\r\n  word: Layout<T>,\r\n  msb?: boolean,\r\n  property?: P,\r\n) => BitStructure<T, P>; // TODO: not quite sure\r\nexport const offset = _offset as unknown as <T, P extends string = \"\">(\r\n  layout: Layout<T, P>,\r\n  offset?: number,\r\n  property?: P,\r\n) => Layout<T, P>;\r\n\r\nexport type GetStructureSchema<T extends Structure> = T extends Structure<any, any, infer S> ? S : unknown;\r\n","import { publicKey, struct, u32, u64, u8 } from \"@/marshmallow\";\r\n\r\nexport const splAccountLayout = struct([\r\n  publicKey(\"mint\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"amount\"),\r\n  u32(\"delegateOption\"),\r\n  publicKey(\"delegate\"),\r\n  u8(\"state\"),\r\n  u32(\"isNativeOption\"),\r\n  u64(\"isNative\"),\r\n  u64(\"delegatedAmount\"),\r\n  u32(\"closeAuthorityOption\"),\r\n  publicKey(\"closeAuthority\"),\r\n]);\r\n","import { createAssociatedTokenAccountInstruction } from \"@solana/spl-token\";\r\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\r\n\r\nimport { FormatFarmKeyOut } from \"@/api/type\";\r\nimport { AddInstructionParam, jsonInfo2PoolKeys } from \"@/common\";\r\nimport { parseBigNumberish, BN_ZERO } from \"@/common/bignumber\";\r\nimport { SOLMint, WSOLMint } from \"@/common/pubKey\";\r\nimport { MakeTxData, MakeMultiTxData } from \"@/common/txTool/txTool\";\r\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\r\nimport { getATAAddress } from \"@/common/pda\";\r\nimport { FARM_PROGRAM_ID_V6 } from \"@/common/programId\";\r\nimport { generatePubKey } from \"../account/util\";\r\n\r\nimport { createWSolAccountInstructions } from \"../account/instruction\";\r\nimport ModuleBase from \"../moduleBase\";\r\nimport { TOKEN_WSOL } from \"../token/constant\";\r\nimport { ComputeBudgetConfig } from \"@/raydium/type\";\r\nimport {\r\n  FARM_LOCK_MINT,\r\n  FARM_LOCK_VAULT,\r\n  isValidFarmVersion,\r\n  poolTypeV6,\r\n  validateFarmRewards,\r\n  FARM_PROGRAM_TO_VERSION,\r\n} from \"./config\";\r\nimport {\r\n  createAssociatedLedgerAccountInstruction,\r\n  makeCreateFarmInstruction,\r\n  makeCreatorWithdrawFarmRewardInstruction,\r\n  makeRestartRewardInstruction,\r\n  makeAddNewRewardInstruction,\r\n  makeWithdrawInstructionV3,\r\n  makeWithdrawInstructionV5,\r\n  makeWithdrawInstructionV6,\r\n  makeDepositInstructionV3,\r\n  makeDepositInstructionV5,\r\n  makeDepositInstructionV6,\r\n} from \"./instruction\";\r\nimport { farmStateV6Layout, FarmLedger } from \"./layout\";\r\nimport {\r\n  CreateFarm,\r\n  FarmDWParam,\r\n  FarmRewardInfo,\r\n  FarmRewardInfoConfig,\r\n  RewardInfoKey,\r\n  UpdateFarmReward,\r\n  UpdateFarmRewards,\r\n  CreateFarmExtInfo,\r\n} from \"./type\";\r\nimport {\r\n  calFarmRewardAmount,\r\n  farmRewardInfoToConfig,\r\n  getAssociatedAuthority,\r\n  getAssociatedLedgerAccount,\r\n  getAssociatedLedgerPoolAccount,\r\n  getFarmLedgerLayout,\r\n} from \"./util\";\r\nimport { FormatFarmInfoOut, FormatFarmKeyOutV6 } from \"@/api/type\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nexport default class Farm extends ModuleBase {\r\n  // token account needed\r\n  private async _getUserRewardInfo({ payer, rewardInfo }: { payer: PublicKey; rewardInfo: FarmRewardInfo }): Promise<{\r\n    rewardPubKey?: PublicKey;\r\n    newInstruction?: AddInstructionParam;\r\n  }> {\r\n    if (rewardInfo.mint.equals(SOLMint)) {\r\n      const txInstructions = await createWSolAccountInstructions({\r\n        connection: this.scope.connection,\r\n        owner: this.scope.ownerPubKey,\r\n        payer,\r\n        amount: calFarmRewardAmount({\r\n          ...rewardInfo,\r\n          openTime: rewardInfo.openTime.toString(),\r\n          endTime: rewardInfo.endTime.toString(),\r\n        }),\r\n      });\r\n      return {\r\n        rewardPubKey: txInstructions.addresses.newAccount,\r\n        newInstruction: txInstructions,\r\n      };\r\n    }\r\n\r\n    return {\r\n      rewardPubKey: await this.scope.account.getCreatedTokenAccount({\r\n        mint: rewardInfo.mint,\r\n        associatedOnly: false,\r\n      })!,\r\n    };\r\n  }\r\n\r\n  // token account needed\r\n  public async create<T extends TxVersion>({\r\n    poolInfo: propPoolInfo,\r\n    rewardInfos,\r\n    payer,\r\n    programId = FARM_PROGRAM_ID_V6,\r\n    txVersion,\r\n  }: CreateFarm<T>): Promise<MakeTxData<T, CreateFarmExtInfo>> {\r\n    this.checkDisabled();\r\n    this.scope.checkOwner();\r\n\r\n    const lpMint = new PublicKey(propPoolInfo.lpMint.address);\r\n    const poolInfo = {\r\n      lpMint,\r\n      lockInfo: { lockMint: FARM_LOCK_MINT, lockVault: FARM_LOCK_VAULT },\r\n      version: 6,\r\n      rewardInfos,\r\n      programId,\r\n    };\r\n\r\n    const txBuilder = this.createTxBuilder();\r\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\r\n    const farmKeyPair = generatePubKey({ fromPublicKey: payerPubKey, programId: poolInfo.programId });\r\n    const lamports = await this.scope.connection.getMinimumBalanceForRentExemption(farmStateV6Layout.span);\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        SystemProgram.createAccountWithSeed({\r\n          fromPubkey: payerPubKey,\r\n          basePubkey: payerPubKey,\r\n          seed: farmKeyPair.seed,\r\n          newAccountPubkey: farmKeyPair.publicKey,\r\n          lamports,\r\n          space: farmStateV6Layout.span,\r\n          programId: poolInfo.programId,\r\n        }),\r\n      ],\r\n    });\r\n\r\n    const { publicKey: authority, nonce } = getAssociatedAuthority({\r\n      programId: new PublicKey(poolInfo.programId),\r\n      poolId: farmKeyPair.publicKey,\r\n    });\r\n\r\n    const lpVault = getAssociatedLedgerPoolAccount({\r\n      programId: poolInfo.programId,\r\n      poolId: farmKeyPair.publicKey,\r\n      mint: poolInfo.lpMint,\r\n      type: \"lpVault\",\r\n    });\r\n\r\n    const rewardInfoConfig: FarmRewardInfoConfig[] = [];\r\n    const rewardInfoKey: RewardInfoKey[] = [];\r\n\r\n    for (const rewardInfo of poolInfo.rewardInfos) {\r\n      if (rewardInfo.openTime >= rewardInfo.endTime)\r\n        this.logAndCreateError(\"start time error\", \"rewardInfo.rewardOpenTime\", rewardInfo.openTime.toString());\r\n      if (isNaN(poolTypeV6[rewardInfo.rewardType])) this.logAndCreateError(\"rewardType error\", rewardInfo.rewardType);\r\n      if (Number(rewardInfo.perSecond) <= 0) this.logAndCreateError(\"rewardPerSecond error\", rewardInfo.perSecond);\r\n\r\n      rewardInfoConfig.push(farmRewardInfoToConfig(rewardInfo));\r\n\r\n      const { rewardPubKey, newInstruction } = await this._getUserRewardInfo({\r\n        rewardInfo,\r\n        payer: payerPubKey,\r\n      });\r\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n\r\n      if (!rewardPubKey) this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\r\n\r\n      const rewardMint = rewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : rewardInfo.mint;\r\n      rewardInfoKey.push({\r\n        rewardMint,\r\n        rewardVault: getAssociatedLedgerPoolAccount({\r\n          programId: poolInfo.programId,\r\n          poolId: farmKeyPair.publicKey,\r\n          mint: rewardMint,\r\n          type: \"rewardVault\",\r\n        }),\r\n        userRewardToken: rewardPubKey!,\r\n      });\r\n    }\r\n\r\n    const { account: lockUserAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n      mint: new PublicKey(poolInfo.lockInfo.lockMint),\r\n      owner: this.scope.ownerPubKey,\r\n      skipCloseAccount: false,\r\n      createInfo: {\r\n        payer: this.scope.ownerPubKey,\r\n        amount: 0,\r\n      },\r\n      associatedOnly: false,\r\n    });\r\n    instructionParams && txBuilder.addInstruction(instructionParams);\r\n    if (!lockUserAccount)\r\n      this.logAndCreateError(\"cannot found lock vault\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const { instruction, instructionType } = makeCreateFarmInstruction({\r\n      farmId: farmKeyPair.publicKey,\r\n      owner: this.scope.ownerPubKey,\r\n      farmAuthority: authority,\r\n      lpVault,\r\n      lpMint: poolInfo.lpMint,\r\n      lockVault: poolInfo.lockInfo.lockVault,\r\n      lockMint: poolInfo.lockInfo.lockMint,\r\n      lockUserAccount,\r\n      programId: poolInfo.programId,\r\n      rewardInfo: rewardInfoKey,\r\n      rewardInfoConfig,\r\n      nonce,\r\n    });\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [instruction],\r\n        instructionTypes: [instructionType],\r\n      })\r\n      .versionBuild<CreateFarmExtInfo>({\r\n        txVersion,\r\n        extInfo: {\r\n          farmId: farmKeyPair.publicKey,\r\n          farmAuthority: authority,\r\n          lpVault,\r\n          lockUserAccount: lockUserAccount!,\r\n          nonce,\r\n        },\r\n      }) as Promise<MakeTxData<T, CreateFarmExtInfo>>;\r\n  }\r\n\r\n  public async restartReward<T extends TxVersion>({\r\n    farmInfo,\r\n    payer,\r\n    newRewardInfo,\r\n    txVersion,\r\n  }: UpdateFarmReward): Promise<MakeTxData<T>> {\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\r\n\r\n    const farmInfoKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\r\n\r\n    const farmKeys = {\r\n      id: farmInfoKeys.id,\r\n      rewardInfos: farmInfo.rewardInfos,\r\n      lpVault: farmInfoKeys.lpVault,\r\n      programId: farmInfoKeys.programId,\r\n    };\r\n\r\n    if (newRewardInfo.openTime >= newRewardInfo.endTime)\r\n      this.logAndCreateError(\"start time error\", \"newRewardInfo\", newRewardInfo);\r\n\r\n    const payerPubKey = payer || this.scope.ownerPubKey;\r\n\r\n    const rewardMint = newRewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : newRewardInfo.mint;\r\n    const rewardInfoIndex = farmKeys.rewardInfos.findIndex((item) =>\r\n      new PublicKey(item.mint.address).equals(rewardMint),\r\n    );\r\n    const rewardInfo = farmInfoKeys.rewardInfos[rewardInfoIndex];\r\n\r\n    if (!rewardInfo) this.logAndCreateError(\"configuration does not exist\", \"rewardMint\", rewardMint);\r\n\r\n    const rewardVault = rewardInfo!.vault ?? SOLMint;\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\r\n      rewardInfo: newRewardInfo,\r\n      payer: payerPubKey,\r\n    });\r\n    if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n\r\n    if (!userRewardTokenPub)\r\n      this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [\r\n          makeRestartRewardInstruction({\r\n            payer: this.scope.ownerPubKey,\r\n            rewardVault,\r\n            userRewardTokenPub: userRewardTokenPub!,\r\n            farmKeys,\r\n            rewardInfo: newRewardInfo,\r\n          }),\r\n        ],\r\n        instructionTypes: [InstructionType.FarmV6Restart],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async restartRewards<T extends TxVersion>({\r\n    farmInfo,\r\n    payer,\r\n    newRewardInfos,\r\n    txVersion,\r\n  }: UpdateFarmRewards<T>): Promise<MakeTxData<T>> {\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\r\n\r\n    const farmInfoKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\r\n\r\n    const farmKeys = {\r\n      id: farmInfoKeys.id,\r\n      rewardInfos: farmInfo.rewardInfos,\r\n      lpVault: farmInfoKeys.lpVault,\r\n      programId: farmInfoKeys.programId,\r\n    };\r\n\r\n    newRewardInfos.forEach((reward) => {\r\n      if (reward.openTime >= reward.endTime) this.logAndCreateError(\"start time error\", \"newRewardInfo\", reward);\r\n    });\r\n\r\n    const payerPubKey = payer || this.scope.ownerPubKey;\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    for (const itemReward of newRewardInfos) {\r\n      const rewardMint = itemReward.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : itemReward.mint;\r\n      const rewardInfoIndex = farmKeys.rewardInfos.findIndex((item) =>\r\n        new PublicKey(item.mint.address).equals(rewardMint),\r\n      );\r\n      const rewardInfo = farmInfoKeys.rewardInfos[rewardInfoIndex];\r\n      if (!rewardInfo) this.logAndCreateError(\"configuration does not exist\", \"rewardMint\", rewardMint);\r\n      const rewardVault = rewardInfo!.vault ?? SOLMint;\r\n      const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\r\n        rewardInfo: itemReward,\r\n        payer: payerPubKey,\r\n      });\r\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n      if (!userRewardTokenPub)\r\n        this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\r\n      const ins = makeRestartRewardInstruction({\r\n        payer: this.scope.ownerPubKey,\r\n        rewardVault,\r\n        userRewardTokenPub: userRewardTokenPub!,\r\n        farmKeys,\r\n        rewardInfo: itemReward,\r\n      });\r\n      txBuilder.addInstruction({\r\n        instructions: [ins],\r\n        instructionTypes: [InstructionType.FarmV6Restart],\r\n      });\r\n    }\r\n\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async addNewRewardToken<T extends TxVersion>(params: UpdateFarmReward): Promise<MakeTxData<T>> {\r\n    const { txVersion, farmInfo, newRewardInfo, payer } = params;\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\r\n\r\n    const farmKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\r\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    const rewardMint = newRewardInfo.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : newRewardInfo.mint;\r\n\r\n    const rewardVault = getAssociatedLedgerPoolAccount({\r\n      programId: new PublicKey(farmInfo.programId),\r\n      poolId: new PublicKey(farmInfo.id),\r\n      mint: rewardMint,\r\n      type: \"rewardVault\",\r\n    });\r\n\r\n    const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\r\n      rewardInfo: newRewardInfo,\r\n      payer: payerPubKey,\r\n    });\r\n    if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n\r\n    if (!userRewardTokenPub)\r\n      this.logAndCreateError(\"annot found target token accounts\", this.scope.account.tokenAccounts);\r\n\r\n    newRewardInfo.mint = rewardMint;\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [\r\n          makeAddNewRewardInstruction({\r\n            payer: this.scope.ownerPubKey,\r\n            userRewardTokenPub: userRewardTokenPub!,\r\n            farmKeys,\r\n            rewardVault,\r\n            rewardInfo: newRewardInfo,\r\n          }),\r\n        ],\r\n        instructionTypes: [InstructionType.FarmV6CreatorAddReward],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async addNewRewardsToken<T extends TxVersion>(params: UpdateFarmRewards<T>): Promise<MakeTxData<T>> {\r\n    const { txVersion, farmInfo, newRewardInfos, payer } = params;\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version \", version);\r\n\r\n    const farmKeys = jsonInfo2PoolKeys((await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0]);\r\n    const payerPubKey = payer ?? this.scope.ownerPubKey;\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    for (const itemReward of newRewardInfos) {\r\n      const rewardMint = itemReward.mint.equals(SOLMint) ? new PublicKey(TOKEN_WSOL.address) : itemReward.mint;\r\n      const rewardVault = getAssociatedLedgerPoolAccount({\r\n        programId: new PublicKey(farmInfo.programId),\r\n        poolId: new PublicKey(farmInfo.id),\r\n        mint: rewardMint,\r\n        type: \"rewardVault\",\r\n      });\r\n      const { rewardPubKey: userRewardTokenPub, newInstruction } = await this._getUserRewardInfo({\r\n        rewardInfo: itemReward,\r\n        payer: payerPubKey,\r\n      });\r\n      if (newInstruction) txBuilder.addInstruction(newInstruction);\r\n      if (!userRewardTokenPub)\r\n        this.logAndCreateError(\"cannot found target token accounts\", this.scope.account.tokenAccounts);\r\n      const ins = makeAddNewRewardInstruction({\r\n        payer: this.scope.ownerPubKey,\r\n        userRewardTokenPub: userRewardTokenPub!,\r\n        farmKeys,\r\n        rewardVault,\r\n        rewardInfo: { ...itemReward, mint: rewardMint },\r\n      });\r\n      txBuilder.addInstruction({\r\n        instructions: [ins],\r\n        instructionTypes: [InstructionType.FarmV6CreatorAddReward],\r\n      });\r\n    }\r\n\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async deposit<T extends TxVersion>(params: FarmDWParam<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      txVersion,\r\n      farmInfo,\r\n      amount,\r\n      feePayer,\r\n      useSOLBalance,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      userAuxiliaryLedgers,\r\n      computeBudgetConfig,\r\n    } = params;\r\n\r\n    if (this.scope.availability.addFarm === false)\r\n      this.logAndCreateError(\"farm deposit feature disabled in your region\");\r\n\r\n    const { rewardInfos, programId } = farmInfo;\r\n    const version = FARM_PROGRAM_TO_VERSION[programId];\r\n    if (!isValidFarmVersion(version)) this.logAndCreateError(\"invalid farm program:\", farmInfo.programId);\r\n    const [farmProgramId, farmId] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n    const farmKeys = (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0];\r\n\r\n    const ledger = getAssociatedLedgerAccount({\r\n      programId: farmProgramId,\r\n      poolId: farmId,\r\n      owner: this.scope.ownerPubKey,\r\n      version,\r\n    });\r\n\r\n    const txBuilder = this.createTxBuilder();\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccounts) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint, item.programId).publicKey;\r\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\r\n      } else {\r\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\r\n      }\r\n    }\r\n\r\n    const lpMint = farmKeys.lpMint;\r\n    const ownerLpTokenAccount = ownerMintToAccount[lpMint.address];\r\n    if (!ownerLpTokenAccount) this.logAndCreateError(\"you don't have any lp\", \"lp zero\", ownerMintToAccount);\r\n\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of rewardInfos) {\r\n      const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n\r\n      if (!ownerRewardAccount) {\r\n        const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: itemReward.mint.programId,\r\n          mint: new PublicKey(itemReward.mint.address),\r\n          notUseTokenAccount: rewardUseSOLBalance,\r\n          createInfo: {\r\n            payer: feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardUseSOLBalance,\r\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerRewardAccount = _ownerRewardAccount!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n      rewardAccounts.push(ownerRewardAccount);\r\n    }\r\n\r\n    let ledgerInfo: FarmLedger | undefined = undefined;\r\n    const ledgerData = await this.scope.connection.getAccountInfo(ledger);\r\n    if (ledgerData) {\r\n      const ledgerLayout = getFarmLedgerLayout(version)!;\r\n      ledgerInfo = ledgerLayout.decode(ledgerData.data);\r\n    }\r\n\r\n    if (farmInfo.programId !== FARM_PROGRAM_ID_V6.toString() && !ledgerInfo) {\r\n      const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\r\n        id: farmId,\r\n        programId: farmProgramId,\r\n        version,\r\n        ledger,\r\n        owner: this.scope.ownerPubKey,\r\n      });\r\n      txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\r\n    }\r\n\r\n    const errorMsg = validateFarmRewards({\r\n      version,\r\n      rewardInfos,\r\n      rewardTokenAccountsPublicKeys: rewardAccounts,\r\n    });\r\n    if (errorMsg) this.logAndCreateError(errorMsg);\r\n\r\n    const insParams = {\r\n      amount: parseBigNumberish(amount),\r\n      owner: this.scope.ownerPubKey,\r\n      farmInfo,\r\n      farmKeys,\r\n      lpAccount: ownerLpTokenAccount,\r\n      rewardAccounts,\r\n      userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\r\n    };\r\n\r\n    const newInstruction =\r\n      version === 6\r\n        ? makeDepositInstructionV6(insParams)\r\n        : version === 5\r\n        ? makeDepositInstructionV5(insParams)\r\n        : makeDepositInstructionV3(insParams);\r\n\r\n    const insType = {\r\n      3: InstructionType.FarmV3Deposit,\r\n      5: InstructionType.FarmV5Deposit,\r\n      6: InstructionType.FarmV6Deposit,\r\n    };\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [newInstruction],\r\n        instructionTypes: [insType[version]],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async withdraw<T extends TxVersion>(params: FarmDWParam<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      txVersion,\r\n      farmInfo,\r\n      amount,\r\n      deposited,\r\n      useSOLBalance,\r\n      feePayer,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      userAuxiliaryLedgers,\r\n      computeBudgetConfig,\r\n    } = params;\r\n    const { rewardInfos } = farmInfo;\r\n\r\n    if (this.scope.availability.removeFarm === false)\r\n      this.logAndCreateError(\"farm withdraw feature disabled in your region\");\r\n\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n\r\n    if (!isValidFarmVersion(version)) this.logAndCreateError(\"invalid farm program:\", farmInfo.programId);\r\n\r\n    const farmKeys = (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0];\r\n    const txBuilder = this.createTxBuilder();\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccounts) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint).publicKey;\r\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\r\n      } else {\r\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\r\n      }\r\n    }\r\n\r\n    if (!deposited) {\r\n      const ledger = getAssociatedLedgerAccount({\r\n        programId: new PublicKey(farmInfo.programId),\r\n        poolId: new PublicKey(farmInfo.id),\r\n        owner: this.scope.ownerPubKey,\r\n        version,\r\n      });\r\n      const ledgerData = await this.scope.connection.getAccountInfo(ledger);\r\n      if (!ledgerData) {\r\n        // user has old not ata farm vault and don't have ata vault\r\n        if (version !== 6 && (userAuxiliaryLedgers || []).length > 0) {\r\n          const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\r\n            id: new PublicKey(farmKeys.id),\r\n            programId: new PublicKey(farmKeys.programId),\r\n            version,\r\n            ledger,\r\n            owner: this.scope.ownerPubKey,\r\n          });\r\n          txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\r\n        } else {\r\n          this.logAndCreateError(\"no lp data\", { farmId: farmInfo.id, version, ledgerData });\r\n        }\r\n      } else {\r\n        const ledgerLayout = getFarmLedgerLayout(version)!;\r\n        const ledgerInfo = ledgerLayout.decode(ledgerData!.data);\r\n        if (ledgerInfo.deposited.isZero()) this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\r\n      }\r\n    } else {\r\n      if (deposited.isZero()) this.logAndCreateError(\"no deposited lp\", { farmId: farmInfo.id });\r\n    }\r\n\r\n    const lpMint = farmKeys.lpMint.address;\r\n    const lpMintUseSOLBalance = useSOLBalance && lpMint === WSOLMint.toString();\r\n\r\n    let ownerLpTokenAccount = ownerMintToAccount[lpMint.toString()];\r\n    if (!ownerLpTokenAccount) {\r\n      const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: farmKeys.lpMint.programId,\r\n        mint: new PublicKey(lpMint),\r\n        notUseTokenAccount: lpMintUseSOLBalance,\r\n        createInfo: {\r\n          payer: feePayer || this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: true,\r\n        associatedOnly: lpMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerLpTokenAccount = _ownerRewardAccount!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n    ownerMintToAccount[lpMint.toString()] = ownerLpTokenAccount;\r\n\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of rewardInfos) {\r\n      const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n      let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n      if (!ownerRewardAccount) {\r\n        const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: itemReward.mint.programId,\r\n          mint: new PublicKey(itemReward.mint.address),\r\n          notUseTokenAccount: rewardUseSOLBalance,\r\n          createInfo: {\r\n            payer: feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardUseSOLBalance,\r\n          associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerRewardAccount = _ownerRewardAccount!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n      rewardAccounts.push(ownerRewardAccount);\r\n    }\r\n\r\n    const errorMsg = validateFarmRewards({\r\n      version,\r\n      rewardInfos,\r\n      rewardTokenAccountsPublicKeys: rewardAccounts,\r\n    });\r\n    if (errorMsg) this.logAndCreateError(errorMsg);\r\n\r\n    const insParams = {\r\n      amount: parseBigNumberish(amount),\r\n      owner: this.scope.ownerPubKey,\r\n      farmInfo,\r\n      farmKeys,\r\n      lpAccount: ownerLpTokenAccount,\r\n      rewardAccounts,\r\n      userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\r\n    };\r\n\r\n    const newInstruction =\r\n      version === 6\r\n        ? makeWithdrawInstructionV6(insParams)\r\n        : version === 5\r\n        ? makeWithdrawInstructionV5(insParams)\r\n        : makeWithdrawInstructionV3(insParams);\r\n\r\n    const insType = {\r\n      3: InstructionType.FarmV3Withdraw,\r\n      5: InstructionType.FarmV5Withdraw,\r\n      6: InstructionType.FarmV6Withdraw,\r\n    };\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [newInstruction],\r\n        instructionTypes: [insType[version]],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  // token account needed\r\n  public async withdrawFarmReward<T extends TxVersion>({\r\n    farmInfo,\r\n    withdrawMint,\r\n    txVersion,\r\n  }: {\r\n    farmInfo: FormatFarmInfoOut;\r\n    withdrawMint: PublicKey;\r\n    payer?: PublicKey;\r\n    txVersion?: T;\r\n  }): Promise<MakeTxData<T>> {\r\n    this.scope.checkOwner();\r\n    const farmKeys = jsonInfo2PoolKeys(\r\n      (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0] as FormatFarmKeyOutV6,\r\n    );\r\n    const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n    if (version !== 6) this.logAndCreateError(\"invalid farm version\", version);\r\n\r\n    const rewardInfoIdx = farmInfo.rewardInfos.findIndex((item) =>\r\n      item.mint.address === SOLMint.toString() ? new PublicKey(TOKEN_WSOL.address) : withdrawMint,\r\n    );\r\n    const rewardInfo = farmKeys.rewardInfos[rewardInfoIdx];\r\n    if (!rewardInfo) this.logAndCreateError(\"withdraw mint error\", \"rewardInfos\", farmInfo);\r\n\r\n    const rewardVault = rewardInfo?.vault ?? SOLMint;\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    let userRewardToken: PublicKey;\r\n\r\n    if (withdrawMint.equals(SOLMint)) {\r\n      const txInstruction = await createWSolAccountInstructions({\r\n        connection: this.scope.connection,\r\n        owner: this.scope.ownerPubKey,\r\n        payer: this.scope.ownerPubKey,\r\n        amount: calFarmRewardAmount({\r\n          ...rewardInfo,\r\n          openTime: rewardInfo.openTime as unknown as string,\r\n          endTime: rewardInfo.endTime as unknown as string,\r\n          perSecond: new Decimal(rewardInfo.perSecond).mul(10 ** rewardInfo.mint.decimals).toString(),\r\n        }),\r\n      });\r\n      userRewardToken = txInstruction.addresses.newAccount;\r\n      txBuilder.addInstruction(txInstruction);\r\n    } else {\r\n      const selectUserRewardToken = await this.scope.account.getCreatedTokenAccount({\r\n        mint: withdrawMint,\r\n      });\r\n\r\n      if (selectUserRewardToken === null) {\r\n        userRewardToken = await this.scope.account.getAssociatedTokenAccount(withdrawMint);\r\n        txBuilder.addInstruction({\r\n          instructions: [\r\n            createAssociatedTokenAccountInstruction(\r\n              this.scope.ownerPubKey,\r\n              userRewardToken,\r\n              this.scope.ownerPubKey,\r\n              withdrawMint,\r\n            ),\r\n          ],\r\n          instructionTypes: [InstructionType.CreateATA],\r\n        });\r\n      } else {\r\n        userRewardToken = selectUserRewardToken!;\r\n      }\r\n    }\r\n\r\n    const { instruction, instructionType } = makeCreatorWithdrawFarmRewardInstruction({\r\n      programId: farmKeys.programId,\r\n      id: farmKeys.id,\r\n      authority: farmKeys.authority,\r\n      lpVault: farmKeys.lpVault,\r\n      rewardVault,\r\n      userRewardToken,\r\n      owner: this.scope.ownerPubKey,\r\n    });\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [instruction],\r\n        instructionTypes: [instructionType],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async harvestAllRewards<T extends TxVersion = TxVersion.LEGACY>(params: {\r\n    farmInfoList: Record<string, FormatFarmInfoOut>;\r\n    feePayer?: PublicKey;\r\n    useSOLBalance?: boolean;\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    userAuxiliaryLedgers?: string[];\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n  }): Promise<MakeMultiTxData<T>> {\r\n    const {\r\n      farmInfoList,\r\n      useSOLBalance,\r\n      feePayer,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      userAuxiliaryLedgers,\r\n      txVersion,\r\n      computeBudgetConfig,\r\n    } = params;\r\n\r\n    const txBuilder = this.createTxBuilder();\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccounts) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.mint).publicKey;\r\n        if (item.publicKey && ata.equals(item.publicKey)) ownerMintToAccount[item.mint.toString()] = item.publicKey;\r\n      } else {\r\n        ownerMintToAccount[item.mint.toString()] = item.publicKey!;\r\n      }\r\n    }\r\n\r\n    const allFarmKeys = await this.scope.api.fetchFarmKeysById({\r\n      ids: Object.values(farmInfoList)\r\n        .map((f) => f.id)\r\n        .join(\",\"),\r\n    });\r\n    const farmKeyMap: { [key: string]: FormatFarmKeyOut } = allFarmKeys.reduce(\r\n      (acc, cur) => ({ ...acc, [cur.id]: cur }),\r\n      {},\r\n    );\r\n    for (const farmInfo of Object.values(farmInfoList)) {\r\n      const { programId, lpMint: farmLpMint, rewardInfos, id } = farmInfo;\r\n      const version = FARM_PROGRAM_TO_VERSION[programId];\r\n\r\n      const lpMint = farmLpMint.address;\r\n      const lpMintUseSOLBalance = useSOLBalance && lpMint === WSOLMint.toString();\r\n      let ownerLpTokenAccount = ownerMintToAccount[lpMint];\r\n\r\n      if (!ownerLpTokenAccount) {\r\n        const { account: _ownerLpAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: farmLpMint.programId,\r\n          mint: new PublicKey(lpMint),\r\n          notUseTokenAccount: lpMintUseSOLBalance,\r\n          createInfo: {\r\n            payer: feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: true,\r\n          associatedOnly: lpMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerLpTokenAccount = _ownerLpAccount!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n      ownerMintToAccount[lpMint.toString()] = ownerLpTokenAccount;\r\n\r\n      const rewardAccounts: PublicKey[] = [];\r\n      for (const itemReward of rewardInfos) {\r\n        const rewardUseSOLBalance = useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n        let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n        if (!ownerRewardAccount) {\r\n          const { account: _ownerRewardAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: itemReward.mint.programId,\r\n            mint: new PublicKey(itemReward.mint.address),\r\n            notUseTokenAccount: rewardUseSOLBalance,\r\n            createInfo: {\r\n              payer: feePayer || this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            owner: this.scope.ownerPubKey,\r\n            skipCloseAccount: !rewardUseSOLBalance,\r\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n            checkCreateATAOwner,\r\n          });\r\n          ownerRewardAccount = _ownerRewardAccount!;\r\n          instructionParams && txBuilder.addInstruction(instructionParams);\r\n        }\r\n\r\n        ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n        rewardAccounts.push(ownerRewardAccount);\r\n      }\r\n\r\n      const farmKeys = farmKeyMap[id];\r\n      const insParams = {\r\n        amount: BN_ZERO,\r\n        owner: this.scope.ownerPubKey,\r\n        farmInfo,\r\n        farmKeys,\r\n        lpAccount: ownerLpTokenAccount,\r\n        rewardAccounts,\r\n        userAuxiliaryLedgers: userAuxiliaryLedgers?.map((key) => new PublicKey(key)),\r\n      };\r\n\r\n      const withdrawInstruction =\r\n        version === 6\r\n          ? makeWithdrawInstructionV6(insParams)\r\n          : version === 5\r\n          ? makeWithdrawInstructionV5(insParams)\r\n          : makeWithdrawInstructionV3(insParams);\r\n\r\n      const insType = {\r\n        3: InstructionType.FarmV3Withdraw,\r\n        5: InstructionType.FarmV5Withdraw,\r\n        6: InstructionType.FarmV6Withdraw,\r\n      };\r\n\r\n      txBuilder.addInstruction({\r\n        instructions: [withdrawInstruction],\r\n        instructionTypes: [insType[version]],\r\n      });\r\n    }\r\n\r\n    if (txVersion === TxVersion.LEGACY)\r\n      return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { createLogger } from \"@/common/logger\";\r\nimport { FARM_PROGRAM_ID_V3, FARM_PROGRAM_ID_V5, FARM_PROGRAM_ID_V6 } from \"@/common/programId\";\r\nimport { ApiV3Token, RewardInfoV345, RewardInfoV6 } from \"@/api/type\";\r\n\r\nimport {\r\n  FarmLedgerLayout,\r\n  farmLedgerLayoutV3_2,\r\n  farmLedgerLayoutV5_2,\r\n  farmLedgerLayoutV6_1,\r\n  FarmStateLayout,\r\n  farmStateV3Layout,\r\n  farmStateV5Layout,\r\n  farmStateV6Layout,\r\n} from \"./layout\";\r\n\r\nconst logger = createLogger(\"Raydium_farm_config\");\r\n\r\nexport type FarmVersion = 3 | 4 | 5 | 6;\r\nexport const FARM_LOCK_MINT = new PublicKey(\"4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R\");\r\nexport const FARM_LOCK_VAULT = new PublicKey(\"FrspKwj8i3pNmKwXreTveC4fu7KL5ZbGeXdZBe2XViu1\");\r\n\r\n/* ================= index ================= */\r\n// version => farm state layout\r\nexport const FARM_VERSION_TO_STATE_LAYOUT: {\r\n  [version in FarmVersion]?: FarmStateLayout;\r\n} = {\r\n  3: farmStateV3Layout,\r\n  5: farmStateV5Layout,\r\n  6: farmStateV6Layout,\r\n};\r\n\r\n// version => farm ledger layout\r\nexport const FARM_VERSION_TO_LEDGER_LAYOUT: {\r\n  [version in FarmVersion]?: FarmLedgerLayout;\r\n} = {\r\n  3: farmLedgerLayoutV3_2,\r\n  5: farmLedgerLayoutV5_2,\r\n  6: farmLedgerLayoutV6_1,\r\n};\r\n\r\nexport const isValidFarmVersion = (version: number): boolean => [3, 5, 6].indexOf(version) !== -1;\r\n\r\nexport const validateFarmRewards = (params: {\r\n  version: number;\r\n  rewardInfos: { mint: ApiV3Token }[];\r\n  rewardTokenAccountsPublicKeys: PublicKey[];\r\n}): (() => string | undefined) => {\r\n  const { version, rewardInfos, rewardTokenAccountsPublicKeys } = params;\r\n\r\n  const infoMsg = `rewardInfo:${JSON.stringify(rewardInfos)}, rewardAccount:${JSON.stringify(\r\n    rewardTokenAccountsPublicKeys,\r\n  )}`;\r\n\r\n  const validator = {\r\n    3: (): string | undefined => {\r\n      if (rewardInfos.length !== 1 || rewardTokenAccountsPublicKeys.length !== 1) {\r\n        return `rewardInfos or rewardTokenAccounts lengths not equal 1: ${infoMsg}`;\r\n      }\r\n    },\r\n    5: (): string | undefined => {\r\n      if (rewardInfos.length !== rewardTokenAccountsPublicKeys.length) {\r\n        return `rewardInfos and rewardTokenAccounts lengths not equal: ${infoMsg}`;\r\n      }\r\n    },\r\n    6: (): string | undefined => {\r\n      if (!rewardTokenAccountsPublicKeys.length || rewardInfos.length !== rewardTokenAccountsPublicKeys.length) {\r\n        return `no rewardTokenAccounts or rewardInfos and rewardTokenAccounts lengths not equal: ${infoMsg}`;\r\n      }\r\n    },\r\n  };\r\n\r\n  return validator[version]?.();\r\n};\r\n\r\nexport const poolTypeV6 = { \"Standard SPL\": 0, \"Option tokens\": 1 };\r\n\r\nexport const FARM_PROGRAM_TO_VERSION: Record<string, 3 | 5 | 6> = {\r\n  [FARM_PROGRAM_ID_V3.toString()]: 3,\r\n  [FARM_PROGRAM_ID_V5.toString()]: 5,\r\n  [FARM_PROGRAM_ID_V6.toString()]: 6,\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport {\r\n  blob,\r\n  GetLayoutSchemaFromStructure,\r\n  GetStructureFromLayoutSchema,\r\n  GetStructureSchema,\r\n  publicKey,\r\n  seq,\r\n  struct,\r\n  u128,\r\n  u64,\r\n  u8,\r\n  i8,\r\n  i64,\r\n  bool,\r\n} from \"@/marshmallow\";\r\n\r\nimport { poolTypeV6 } from \"./config\";\r\nimport { RewardType } from \"./type\";\r\n\r\nexport const associatedLedgerAccountLayout = struct([u8(\"instruction\")]);\r\nexport const withdrawRewardLayout = struct([u8(\"instruction\")]);\r\n\r\nconst farmStateRewardInfoV6Layout = struct([\r\n  u64(\"rewardState\"),\r\n  u64(\"rewardOpenTime\"),\r\n  u64(\"rewardEndTime\"),\r\n  u64(\"rewardLastUpdateTime\"),\r\n  u64(\"totalReward\"),\r\n  u64(\"totalRewardEmissioned\"),\r\n  u64(\"rewardClaimed\"),\r\n  u64(\"rewardPerSecond\"),\r\n  u128(\"accRewardPerShare\"),\r\n  publicKey(\"rewardVault\"),\r\n  publicKey(\"rewardMint\"),\r\n  publicKey(\"rewardSender\"),\r\n  u64(\"rewardType\"),\r\n  seq(u64(), 15, \"padding\"),\r\n]);\r\n\r\nexport const realFarmStateV3Layout = struct([\r\n  u64(\"state\"),\r\n  u64(\"nonce\"),\r\n  publicKey(\"lpVault\"),\r\n  publicKey(\"rewardVault\"),\r\n  publicKey(),\r\n  publicKey(),\r\n  u64(),\r\n  u64(),\r\n  u64(\"totalReward\"),\r\n  u128(\"perShareReward\"),\r\n  u64(\"lastSlot\"),\r\n  u64(\"perSlotReward\"),\r\n]);\r\n\r\nexport const realFarmStateV5Layout = struct([\r\n  u64(\"state\"),\r\n  u64(\"nonce\"),\r\n  publicKey(\"lpVault\"),\r\n  publicKey(\"rewardVaultA\"),\r\n  u64(\"totalRewardA\"),\r\n  u128(\"perShareRewardA\"),\r\n  u64(\"perSlotRewardA\"),\r\n  u8(\"option\"),\r\n  publicKey(\"rewardVaultB\"),\r\n  blob(7),\r\n  u64(\"totalRewardB\"),\r\n  u128(\"perShareRewardB\"),\r\n  u64(\"perSlotRewardB\"),\r\n  u64(\"lastSlot\"),\r\n  publicKey(),\r\n]);\r\n\r\nexport const realFarmV6Layout = struct([\r\n  u64(),\r\n  u64(\"state\"),\r\n  u64(\"nonce\"),\r\n  u64(\"validRewardTokenNum\"),\r\n  u128(\"rewardMultiplier\"),\r\n  u64(\"rewardPeriodMax\"),\r\n  u64(\"rewardPeriodMin\"),\r\n  u64(\"rewardPeriodExtend\"),\r\n  publicKey(\"lpMint\"),\r\n  publicKey(\"lpVault\"),\r\n  seq(farmStateRewardInfoV6Layout, 5, \"rewardInfos\"),\r\n  publicKey(\"creator\"),\r\n  publicKey(),\r\n  seq(u64(), 32, \"padding\"),\r\n]);\r\n\r\nexport const farmStateV3Layout = new Proxy(\r\n  realFarmStateV3Layout as GetStructureFromLayoutSchema<\r\n    {\r\n      version: 3;\r\n      rewardInfos: {\r\n        rewardVault: PublicKey;\r\n        totalReward: BN;\r\n        perSlotReward: BN;\r\n        perShareReward: BN;\r\n      }[];\r\n    } & GetLayoutSchemaFromStructure<typeof realFarmStateV3Layout>\r\n  >,\r\n  {\r\n    get(target, p, receiver): any {\r\n      if (p === \"decode\")\r\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\r\n          const originalResult = target.decode(...decodeParams);\r\n          return {\r\n            ...originalResult,\r\n            version: 3,\r\n            rewardInfos: [\r\n              {\r\n                rewardVault: originalResult.rewardVault,\r\n                totalReward: originalResult.totalReward,\r\n                perSlotReward: originalResult.perSlotReward,\r\n                perShareReward: originalResult.perShareReward,\r\n              },\r\n            ],\r\n          };\r\n        };\r\n      else return Reflect.get(target, p, receiver);\r\n    },\r\n  },\r\n);\r\n\r\nexport const farmStateV5Layout = new Proxy(\r\n  realFarmStateV5Layout as GetStructureFromLayoutSchema<\r\n    {\r\n      version: 5;\r\n      rewardInfos: {\r\n        rewardVault: PublicKey;\r\n        totalReward: BN;\r\n        perSlotReward: BN;\r\n        perShareReward: BN;\r\n      }[];\r\n    } & GetLayoutSchemaFromStructure<typeof realFarmStateV5Layout>\r\n  >,\r\n  {\r\n    get(target, p, receiver): any {\r\n      if (p === \"decode\")\r\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\r\n          const originalResult = target.decode(...decodeParams);\r\n          return {\r\n            ...originalResult,\r\n            version: 5,\r\n            rewardInfos: [\r\n              {\r\n                rewardVault: originalResult.rewardVaultA,\r\n                totalReward: originalResult.totalRewardA,\r\n                perSlotReward: originalResult.perSlotRewardA,\r\n                perShareReward: originalResult.perShareRewardA,\r\n              },\r\n              {\r\n                rewardVault: originalResult.rewardVaultB,\r\n                totalReward: originalResult.totalRewardB,\r\n                perSlotReward: originalResult.perSlotRewardB,\r\n                perShareReward: originalResult.perShareRewardB,\r\n              },\r\n            ],\r\n          };\r\n        };\r\n      else return Reflect.get(target, p, receiver);\r\n    },\r\n  },\r\n);\r\n\r\nexport const farmStateV6Layout = new Proxy(\r\n  realFarmV6Layout as GetStructureFromLayoutSchema<\r\n    {\r\n      version: 6;\r\n      rewardInfos: {\r\n        rewardState: BN;\r\n        rewardOpenTime: BN;\r\n        rewardEndTime: BN;\r\n        rewardLastUpdateTime: BN;\r\n        totalReward: BN;\r\n        totalRewardEmissioned: BN;\r\n        rewardClaimed: BN;\r\n        rewardPerSecond: BN;\r\n        accRewardPerShare: BN;\r\n        rewardVault: PublicKey;\r\n        rewardMint: PublicKey;\r\n        rewardSender: PublicKey;\r\n        rewardType: RewardType;\r\n      }[];\r\n    } & GetLayoutSchemaFromStructure<typeof realFarmV6Layout>\r\n  >,\r\n  {\r\n    get(target, p, receiver): any {\r\n      if (p === \"decode\")\r\n        return (...decodeParams: Parameters<typeof target[\"decode\"]>) => {\r\n          const originalResult = target.decode(...decodeParams);\r\n          return {\r\n            ...originalResult,\r\n            version: 6,\r\n            rewardInfos: originalResult.rewardInfos.map((item) => ({\r\n              ...item,\r\n              rewardType: (Object.entries(poolTypeV6).find((i) => String(i[1]) === item.rewardType.toString()) ?? [\r\n                \"Standard SPL\",\r\n              ])[0],\r\n            })),\r\n          };\r\n        };\r\n      else return Reflect.get(target, p, receiver);\r\n    },\r\n  },\r\n);\r\n\r\nexport const farmRewardTimeInfoLayout = struct([\r\n  u64(\"isSet\"),\r\n  u64(\"rewardPerSecond\"),\r\n  u64(\"rewardOpenTime\"),\r\n  u64(\"rewardEndTime\"),\r\n  u64(\"rewardType\"),\r\n]);\r\n\r\nexport const farmRewardLayout = struct([\r\n  u8(\"instruction\"),\r\n  u64(\"nonce\"),\r\n  seq(farmRewardTimeInfoLayout, 5, \"rewardTimeInfo\"),\r\n]);\r\n\r\nexport const farmRewardRestartLayout = struct([\r\n  u8(\"instruction\"),\r\n  u64(\"rewardReopenTime\"),\r\n  u64(\"rewardEndTime\"),\r\n  u64(\"rewardPerSecond\"),\r\n]);\r\n\r\nexport const farmAddRewardLayout = struct([\r\n  u8(\"instruction\"),\r\n  u64(\"isSet\"),\r\n  u64(\"rewardPerSecond\"),\r\n  u64(\"rewardOpenTime\"),\r\n  u64(\"rewardEndTime\"),\r\n  u64(\"rewardType\"),\r\n]);\r\n\r\nexport type FarmStateLayoutV3 = typeof farmStateV3Layout;\r\nexport type FarmStateLayoutV5 = typeof farmStateV5Layout;\r\nexport type FarmStateLayoutV6 = typeof farmStateV6Layout;\r\n\r\nexport type FarmStateV3 = GetStructureSchema<FarmStateLayoutV3>;\r\nexport type FarmStateV5 = GetStructureSchema<FarmStateLayoutV5>;\r\nexport type FarmStateV6 = GetStructureSchema<FarmStateLayoutV6>;\r\n\r\nexport type FarmState = FarmStateV3 | FarmStateV5 | FarmStateV6;\r\n// farmStateLayoutV3\r\nexport type FarmStateLayout = FarmStateLayoutV3 | FarmStateLayoutV5 | FarmStateLayoutV6;\r\n\r\n/* ================= ledger layouts ================= */\r\nexport const farmLedgerLayoutV3_1 = struct([\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u64(), 1, \"rewardDebts\"),\r\n]);\r\n\r\nexport const farmLedgerLayoutV3_2 = struct([\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u128(), 1, \"rewardDebts\"),\r\n  u64(\"\"),\r\n  u64(\"voteLockedBalance\"),\r\n  seq(u64(), 15),\r\n]);\r\n\r\nexport const farmLedgerLayoutV5_1 = struct([\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u64(), 2, \"rewardDebts\"),\r\n]);\r\n\r\nexport const farmLedgerLayoutV5_2 = struct([\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u128(), 2, \"rewardDebts\"),\r\n  seq(u64(), 17),\r\n]);\r\n\r\nexport const farmLedgerLayoutV6_1 = struct([\r\n  u64(),\r\n  u64(\"state\"),\r\n  publicKey(\"id\"),\r\n  publicKey(\"owner\"),\r\n  u64(\"deposited\"),\r\n  seq(u128(), 5, \"rewardDebts\"),\r\n  seq(u64(), 16),\r\n]);\r\n\r\nexport type FarmLedgerLayoutV3_1 = typeof farmLedgerLayoutV3_1;\r\nexport type FarmLedgerLayoutV3_2 = typeof farmLedgerLayoutV3_2;\r\nexport type FarmLedgerLayoutV5_1 = typeof farmLedgerLayoutV5_1;\r\nexport type FarmLedgerLayoutV5_2 = typeof farmLedgerLayoutV5_2;\r\nexport type FarmLedgerLayoutV6_1 = typeof farmLedgerLayoutV6_1;\r\nexport type FarmLedgerLayout =\r\n  | FarmLedgerLayoutV3_1\r\n  | FarmLedgerLayoutV3_2\r\n  | FarmLedgerLayoutV5_1\r\n  | FarmLedgerLayoutV5_2\r\n  | FarmLedgerLayoutV6_1;\r\n\r\nexport type FarmLedgerV3_1 = GetStructureSchema<FarmLedgerLayoutV3_1>;\r\nexport type FarmLedgerV3_2 = GetStructureSchema<FarmLedgerLayoutV3_2>;\r\nexport type FarmLedgerV5_1 = GetStructureSchema<FarmLedgerLayoutV5_1>;\r\nexport type FarmLedgerV5_2 = GetStructureSchema<FarmLedgerLayoutV5_2>;\r\nexport type FarmLedgerV6_1 = GetStructureSchema<FarmLedgerLayoutV6_1>;\r\nexport type FarmLedger = FarmLedgerV3_1 | FarmLedgerV3_2 | FarmLedgerV5_1 | FarmLedgerV5_2 | FarmLedgerV6_1;\r\n\r\nexport const dwLayout = struct([u8(\"instruction\"), u64(\"amount\")]);\r\n\r\nexport const VoterVotingMintConfig = struct([\r\n  publicKey(\"mint\"),\r\n  publicKey(\"grantAuthority\"),\r\n  u64(\"baselineVoteWeightScaledFactor\"),\r\n  u64(\"maxExtraLockupVoteWeightScaledFactor\"),\r\n  u64(\"lockupSaturationSecs\"),\r\n\r\n  i8(\"digitShift\"), // TODO\r\n  seq(u8(), 7, \"reserved1\"),\r\n  seq(u64(), 7, \"reserved2\"),\r\n]);\r\n\r\nexport const VoterRegistrar = struct([\r\n  blob(8),\r\n  publicKey(\"governanceProgramId\"),\r\n  publicKey(\"realm\"),\r\n  publicKey(\"realmGoverningTokenMint\"),\r\n  publicKey(\"realmAuthority\"),\r\n\r\n  seq(u8(), 32, \"reserved1\"),\r\n  seq(VoterVotingMintConfig, 4, \"votingMints\"),\r\n\r\n  i64(\"timeOffset\"),\r\n  u8(\"bump\"),\r\n  seq(u8(), 7, \"reserved2\"),\r\n  seq(u64(), 11, \"reserved3\"),\r\n]);\r\n\r\nexport const VoterLockup = struct([i64(\"startTime\"), i64(\"endTime\"), u8(\"kind\"), seq(u8(), 15, \"reserved\")]);\r\n\r\nexport const VoterDepositEntry = struct([\r\n  seq(VoterLockup, 1, \"lockup\"),\r\n  u64(\"amountDeposited_native\"),\r\n  u64(\"amountInitiallyLockedNative\"),\r\n  bool(\"isUsed\"),\r\n  bool(\"allowClawback\"),\r\n  u8(\"votingMintConfigIdx\"),\r\n  seq(u8(), 29, \"reserved\"),\r\n]);\r\n\r\nexport const Voter = struct([\r\n  blob(8),\r\n  publicKey(\"voterAuthority\"),\r\n  publicKey(\"registrar\"),\r\n\r\n  seq(VoterDepositEntry, 32, \"deposits\"),\r\n\r\n  u8(\"voterBump\"),\r\n  u8(\"voterWweightRecordBump\"),\r\n  seq(u8(), 94, \"reserved\"),\r\n]);\r\n","import {\r\n  PublicKey,\r\n  SystemProgram,\r\n  SYSVAR_RENT_PUBKEY,\r\n  SYSVAR_CLOCK_PUBKEY,\r\n  TransactionInstruction,\r\n  Connection,\r\n} from \"@solana/web3.js\";\r\nimport {\r\n  createAssociatedTokenAccountInstruction,\r\n  TOKEN_PROGRAM_ID,\r\n  ASSOCIATED_TOKEN_PROGRAM_ID,\r\n} from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { struct, u8, u64, u32, bool } from \"@/marshmallow\";\r\nimport { FormatFarmKeyOut } from \"@/api/type\";\r\nimport { getATAAddress } from \"@/common/pda\";\r\nimport { createLogger } from \"@/common/logger\";\r\nimport { parseBigNumberish } from \"@/common/bignumber\";\r\nimport {\r\n  accountMeta,\r\n  commonSystemAccountMeta,\r\n  SOLMint,\r\n  RENT_PROGRAM_ID,\r\n  INSTRUCTION_PROGRAM_ID,\r\n} from \"@/common/pubKey\";\r\nimport { InstructionType } from \"@/common/txTool/txType\";\r\nimport { InstructionReturn } from \"../type\";\r\nimport {\r\n  associatedLedgerAccountLayout,\r\n  farmRewardLayout,\r\n  withdrawRewardLayout,\r\n  farmLedgerLayoutV3_2,\r\n  farmAddRewardLayout,\r\n} from \"./layout\";\r\nimport { FarmRewardInfoConfig, RewardInfoKey, RewardType } from \"./type\";\r\nimport {\r\n  getRegistrarAddress,\r\n  getVotingTokenMint,\r\n  getVotingMintAuthority,\r\n  getVoterAddress,\r\n  getVoterWeightRecordAddress,\r\n  getTokenOwnerRecordAddress,\r\n} from \"./pda\";\r\nimport { dwLayout, farmRewardRestartLayout } from \"./layout\";\r\nimport { getAssociatedLedgerAccount, getDepositEntryIndex } from \"./util\";\r\nimport { poolTypeV6 } from \"./config\";\r\n\r\nconst logger = createLogger(\"Raydium_farm_instruction\");\r\n\r\nconst anchorDataBuf = {\r\n  voterStakeRegistryCreateVoter: Buffer.from([6, 24, 245, 52, 243, 255, 148, 25]), // CreateVoter\r\n  voterStakeRegistryCreateDepositEntry: Buffer.from([185, 131, 167, 186, 159, 125, 19, 67]), // CreateDepositEntry\r\n  voterStakeRegistryDeposit: Buffer.from([242, 35, 198, 137, 82, 225, 242, 182]), // Deposit\r\n  voterStakeRegistryWithdraw: Buffer.from([183, 18, 70, 156, 148, 109, 161, 34]), // Withdraw\r\n  voterStakeRegistryUpdateVoterWeightRecord: Buffer.from([45, 185, 3, 36, 109, 190, 115, 169]), // UpdateVoterWeightRecord\r\n};\r\n\r\nexport function createAssociatedLedgerAccountInstruction(params: {\r\n  version: number;\r\n  id: PublicKey;\r\n  programId: PublicKey;\r\n  ledger: PublicKey;\r\n  owner: PublicKey;\r\n}): InstructionReturn {\r\n  const { version, id, ledger, programId, owner } = params;\r\n  const instruction = { 3: 9, 5: 10 }[version];\r\n  if (!instruction) logger.logWithError(`invalid farm pool version: ${version}`);\r\n\r\n  const data = Buffer.alloc(associatedLedgerAccountLayout.span);\r\n  associatedLedgerAccountLayout.encode(\r\n    {\r\n      instruction: instruction!,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: ledger }),\r\n    accountMeta({ pubkey: owner, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\r\n  ];\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({\r\n      programId,\r\n      keys,\r\n      data,\r\n    }),\r\n    instructionType: InstructionType.FarmV3CreateLedger,\r\n  };\r\n}\r\n\r\ninterface CreateFarmInstruction {\r\n  farmId: PublicKey;\r\n  farmAuthority: PublicKey;\r\n  lpVault: PublicKey;\r\n  lpMint: PublicKey;\r\n  lockVault: PublicKey;\r\n  lockMint: PublicKey;\r\n  lockUserAccount?: PublicKey;\r\n  programId: PublicKey;\r\n  owner: PublicKey;\r\n  rewardInfo: RewardInfoKey[];\r\n  rewardInfoConfig: FarmRewardInfoConfig[];\r\n  nonce: number;\r\n}\r\nexport function makeCreateFarmInstruction(params: CreateFarmInstruction): InstructionReturn {\r\n  const data = Buffer.alloc(farmRewardLayout.span);\r\n  farmRewardLayout.encode(\r\n    {\r\n      instruction: 0,\r\n      nonce: new BN(params.nonce),\r\n      rewardTimeInfo: params.rewardInfoConfig,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    ...commonSystemAccountMeta,\r\n    accountMeta({ pubkey: params.farmId }),\r\n    accountMeta({ pubkey: params.farmAuthority, isWritable: false }),\r\n    accountMeta({ pubkey: params.lpVault }),\r\n    accountMeta({ pubkey: params.lpMint, isWritable: false }),\r\n    accountMeta({ pubkey: params.lockVault }),\r\n    accountMeta({ pubkey: params.lockMint, isWritable: false }),\r\n    accountMeta({ pubkey: params.lockUserAccount ?? SOLMint }),\r\n    accountMeta({ pubkey: params.owner, isWritable: false, isSigner: true }),\r\n  ];\r\n\r\n  for (const item of params.rewardInfo) {\r\n    keys.push(\r\n      ...[\r\n        accountMeta({ pubkey: item.rewardMint, isWritable: false }),\r\n        accountMeta({ pubkey: item.rewardVault }),\r\n        accountMeta({ pubkey: item.userRewardToken }),\r\n      ],\r\n    );\r\n  }\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({ programId: params.programId, keys, data }),\r\n    instructionType: InstructionType.FarmV6Create,\r\n  };\r\n}\r\n\r\ninterface CreatorWithdrawFarmRewardInstruction {\r\n  id: PublicKey;\r\n  programId: PublicKey;\r\n  authority: PublicKey;\r\n  lpVault: PublicKey;\r\n  rewardVault: PublicKey;\r\n  userRewardToken: PublicKey;\r\n  owner: PublicKey;\r\n}\r\n\r\nexport function makeCreatorWithdrawFarmRewardInstruction(\r\n  params: CreatorWithdrawFarmRewardInstruction,\r\n): InstructionReturn {\r\n  const data = Buffer.alloc(withdrawRewardLayout.span);\r\n  withdrawRewardLayout.encode({ instruction: 5 }, data);\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: params.id }),\r\n    accountMeta({ pubkey: params.authority, isWritable: false }),\r\n    accountMeta({ pubkey: params.lpVault, isWritable: false }),\r\n    accountMeta({ pubkey: params.rewardVault }),\r\n    accountMeta({ pubkey: params.userRewardToken }),\r\n    accountMeta({ pubkey: params.owner, isWritable: false, isSigner: true }),\r\n  ];\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({ programId: params.programId, keys, data }),\r\n    instructionType: InstructionType.FarmV6CreatorWithdraw,\r\n  };\r\n}\r\n\r\nexport function voterStakeRegistryDeposit(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterVault: PublicKey,\r\n  depositToken: PublicKey,\r\n  depositAuthority: PublicKey,\r\n\r\n  userStakerInfoV2: PublicKey,\r\n  pool: PublicKey,\r\n  votingMint: PublicKey,\r\n  votingMintAuthority: PublicKey,\r\n  stakeProgramId: PublicKey,\r\n\r\n  depositEntryIndex: number,\r\n  amount: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"depositEntryIndex\"), u64(\"amount\")]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: true },\r\n    { pubkey: voterVault, isSigner: false, isWritable: true },\r\n    { pubkey: depositToken, isSigner: false, isWritable: true },\r\n    { pubkey: depositAuthority, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: userStakerInfoV2, isSigner: false, isWritable: true },\r\n    { pubkey: pool, isSigner: false, isWritable: false },\r\n    { pubkey: votingMint, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: votingMintAuthority, isSigner: false, isWritable: false },\r\n    { pubkey: stakeProgramId, isSigner: false, isWritable: false },\r\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      depositEntryIndex,\r\n      amount,\r\n    },\r\n    data,\r\n  );\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryDeposit, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function voterStakeRegistryUpdateVoterWeightRecord(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterWeightRecord: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: false },\r\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({}, data);\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryUpdateVoterWeightRecord, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function voterStakeRegistryWithdraw(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterAuthority: PublicKey,\r\n  tokenOwnerRecord: PublicKey,\r\n  voterWeightRecord: PublicKey,\r\n  vault: PublicKey,\r\n  destination: PublicKey,\r\n\r\n  userStakerInfoV2: PublicKey,\r\n  pool: PublicKey,\r\n  votingMint: PublicKey,\r\n  votingMintAuthority: PublicKey,\r\n  stakeProgramId: PublicKey,\r\n\r\n  depositEntryIndex: number,\r\n  amount: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"depositEntryIndex\"), u64(\"amount\")]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: true },\r\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\r\n    { pubkey: tokenOwnerRecord, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\r\n    { pubkey: vault, isSigner: false, isWritable: true },\r\n    { pubkey: destination, isSigner: false, isWritable: true },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: userStakerInfoV2, isSigner: false, isWritable: true },\r\n    { pubkey: pool, isSigner: false, isWritable: false },\r\n    { pubkey: votingMint, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: votingMintAuthority, isSigner: false, isWritable: false },\r\n    { pubkey: stakeProgramId, isSigner: false, isWritable: false },\r\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      depositEntryIndex,\r\n      amount,\r\n    },\r\n    data,\r\n  );\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryWithdraw, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function governanceCreateTokenOwnerRecord(\r\n  programId: PublicKey,\r\n  realm: PublicKey,\r\n  governingTokenOwner: PublicKey,\r\n  governingTokenMint: PublicKey,\r\n  payer: PublicKey,\r\n  tokenOwnerRecordAddress: PublicKey,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"ins\")]);\r\n\r\n  const keys = [\r\n    { pubkey: realm, isSigner: false, isWritable: false },\r\n    { pubkey: governingTokenOwner, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: tokenOwnerRecordAddress, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: governingTokenMint, isSigner: false, isWritable: false },\r\n\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({ ins: 23 }, data);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function voterStakeRegistryCreateVoter(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterWeightRecord: PublicKey,\r\n  voterAuthority: PublicKey,\r\n  payer: PublicKey,\r\n\r\n  voterBump: number,\r\n  voterWeightRecordBump: number,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"voterBump\"), u8(\"voterWeightRecordBump\")]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: true },\r\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\r\n    { pubkey: voterWeightRecord, isSigner: false, isWritable: true },\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: INSTRUCTION_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({ voterBump, voterWeightRecordBump }, data);\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryCreateVoter, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport function voterStakeRegistryCreateDepositEntry(\r\n  programId: PublicKey,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterVault: PublicKey,\r\n  voterAuthority: PublicKey,\r\n  payer: PublicKey,\r\n  depositMint: PublicKey,\r\n\r\n  depositEntryIndex: number,\r\n  kind: number,\r\n  startTs: BN | undefined,\r\n  periods: number,\r\n  allowClawback: boolean,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([\r\n    u8(\"depositEntryIndex\"),\r\n    u8(\"kind\"),\r\n    u8(\"option\"),\r\n    u64(\"startTs\"),\r\n    u32(\"periods\"),\r\n    bool(\"allowClawback\"),\r\n  ]);\r\n\r\n  const keys = [\r\n    { pubkey: registrar, isSigner: false, isWritable: false },\r\n    { pubkey: voter, isSigner: false, isWritable: true },\r\n    { pubkey: voterVault, isSigner: false, isWritable: true },\r\n    { pubkey: voterAuthority, isSigner: true, isWritable: false },\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: depositMint, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      depositEntryIndex,\r\n      kind,\r\n      option: startTs === undefined ? 0 : 1,\r\n      startTs: startTs!,\r\n      periods,\r\n      allowClawback,\r\n    },\r\n    data,\r\n  );\r\n  const aData = Buffer.from([...anchorDataBuf.voterStakeRegistryCreateDepositEntry, ...data]);\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: aData,\r\n  });\r\n}\r\n\r\nexport async function makeDepositTokenInstruction({\r\n  connection,\r\n  programId,\r\n  governanceProgramId,\r\n  voteWeightAddinProgramId,\r\n  realm,\r\n  communityTokenMint,\r\n  owner,\r\n  poolId,\r\n  tokenProgram,\r\n}: {\r\n  connection: Connection;\r\n  programId: PublicKey;\r\n  governanceProgramId: PublicKey;\r\n  voteWeightAddinProgramId: PublicKey;\r\n  realm: PublicKey;\r\n  communityTokenMint: PublicKey;\r\n  owner: PublicKey;\r\n  poolId: PublicKey;\r\n  tokenProgram?: PublicKey;\r\n}): Promise<TransactionInstruction[]> {\r\n  const registrar = getRegistrarAddress(voteWeightAddinProgramId, realm, communityTokenMint).publicKey;\r\n  const ownerPda = getAssociatedLedgerAccount({ programId, poolId, owner, version: 3 });\r\n  const ownerAccountInfo = await connection.getAccountInfo(ownerPda);\r\n  if (ownerAccountInfo === null) {\r\n    throw Error(\"user is not staker\");\r\n  }\r\n  const ownerInfo = farmLedgerLayoutV3_2.decode(ownerAccountInfo.data);\r\n  const mintAmount = ownerInfo.deposited.sub(ownerInfo.voteLockedBalance);\r\n  console.log(\"amount\", mintAmount.toString());\r\n  if (mintAmount.eq(new BN(0))) {\r\n    throw Error(\"user do not has new stake amount\");\r\n  }\r\n\r\n  const votingMint = getVotingTokenMint(programId, poolId).publicKey;\r\n  const votingMintAuthority = getVotingMintAuthority(programId, poolId).publicKey;\r\n  const { publicKey: voter, nonce: voterBump } = getVoterAddress(voteWeightAddinProgramId, registrar, owner);\r\n  const voterVault = getATAAddress(voter, votingMint, tokenProgram).publicKey;\r\n\r\n  const { publicKey: voterWeightRecord, nonce: voterWeightRecordBump } = getVoterWeightRecordAddress(\r\n    voteWeightAddinProgramId,\r\n    registrar,\r\n    owner,\r\n  );\r\n\r\n  const tokenOwnerRecordAddress = getTokenOwnerRecordAddress(\r\n    governanceProgramId,\r\n    realm,\r\n    communityTokenMint,\r\n    owner,\r\n  ).publicKey;\r\n\r\n  const instructions: TransactionInstruction[] = [];\r\n\r\n  const depositToken = getATAAddress(owner, votingMint, tokenProgram).publicKey;\r\n  const depositTokenAccountInfo = await connection.getAccountInfo(depositToken);\r\n  if (depositTokenAccountInfo === null) {\r\n    instructions.push(createAssociatedTokenAccountInstruction(owner, depositToken, owner, votingMint));\r\n  }\r\n  const voterAccountInfo = await connection.getAccountInfo(voter);\r\n  if (voterAccountInfo === null) {\r\n    const createTokenOwnerRecodeIns = governanceCreateTokenOwnerRecord(\r\n      governanceProgramId,\r\n      realm,\r\n      owner,\r\n      communityTokenMint,\r\n      owner,\r\n      tokenOwnerRecordAddress,\r\n    );\r\n\r\n    instructions.push(\r\n      createTokenOwnerRecodeIns,\r\n      voterStakeRegistryCreateVoter(\r\n        voteWeightAddinProgramId,\r\n        registrar,\r\n        voter,\r\n        voterWeightRecord,\r\n        owner,\r\n        owner,\r\n        voterBump,\r\n        voterWeightRecordBump,\r\n      ),\r\n    );\r\n  }\r\n\r\n  const { index: depositEntryIndex, isInit: depositEntryInit } = await getDepositEntryIndex(\r\n    connection,\r\n    registrar,\r\n    voter,\r\n    votingMint,\r\n  );\r\n  if (!depositEntryInit) {\r\n    instructions.push(\r\n      voterStakeRegistryCreateDepositEntry(\r\n        voteWeightAddinProgramId,\r\n        registrar,\r\n        voter,\r\n        voterVault,\r\n        owner,\r\n        owner,\r\n        votingMint,\r\n\r\n        depositEntryIndex,\r\n        0,\r\n        undefined,\r\n        0,\r\n        false,\r\n      ),\r\n    );\r\n  }\r\n\r\n  instructions.push(\r\n    voterStakeRegistryDeposit(\r\n      voteWeightAddinProgramId,\r\n      registrar,\r\n      voter,\r\n      voterVault,\r\n      depositToken,\r\n      owner,\r\n\r\n      ownerPda,\r\n      poolId,\r\n      votingMint,\r\n      votingMintAuthority,\r\n      programId,\r\n\r\n      depositEntryIndex,\r\n      mintAmount,\r\n    ),\r\n    voterStakeRegistryUpdateVoterWeightRecord(voteWeightAddinProgramId, registrar, voter, voterWeightRecord),\r\n  );\r\n\r\n  return instructions;\r\n}\r\n\r\nexport async function makeWithdrawTokenInstruction({\r\n  connection,\r\n  programId,\r\n  governanceProgramId,\r\n  voteWeightAddinProgramId,\r\n  realm,\r\n  communityTokenMint,\r\n  owner,\r\n  poolId,\r\n  tokenProgram,\r\n}: {\r\n  connection: Connection;\r\n  programId: PublicKey;\r\n\r\n  governanceProgramId: PublicKey;\r\n  voteWeightAddinProgramId: PublicKey;\r\n  realm: PublicKey;\r\n  communityTokenMint: PublicKey;\r\n  owner: PublicKey;\r\n  poolId: PublicKey;\r\n  tokenProgram?: PublicKey;\r\n}): Promise<TransactionInstruction[]> {\r\n  const registrar = getRegistrarAddress(voteWeightAddinProgramId, realm, communityTokenMint).publicKey;\r\n  const ownerPda = getAssociatedLedgerAccount({ programId, poolId, owner, version: 3 });\r\n  const ownerAccountInfo = await connection.getAccountInfo(ownerPda);\r\n  if (ownerAccountInfo === null) {\r\n    throw Error(\"user is not staker\");\r\n  }\r\n  const ownerInfo = farmLedgerLayoutV3_2.decode(ownerAccountInfo.data);\r\n  if (ownerInfo.voteLockedBalance.eq(new BN(0))) {\r\n    throw Error(\"user has vote locked balance = 0\");\r\n  }\r\n\r\n  const votingMint = getVotingTokenMint(programId, poolId).publicKey;\r\n  const votingMintAuthority = getVotingMintAuthority(programId, poolId).publicKey;\r\n  const { publicKey: voter } = getVoterAddress(voteWeightAddinProgramId, registrar, owner);\r\n  const voterVault = getATAAddress(voter, votingMint, tokenProgram).publicKey;\r\n  const { publicKey: voterWeightRecord } = getVoterWeightRecordAddress(voteWeightAddinProgramId, registrar, owner);\r\n\r\n  const tokenOwnerRecordAddress = getTokenOwnerRecordAddress(\r\n    governanceProgramId,\r\n    realm,\r\n    communityTokenMint,\r\n    owner,\r\n  ).publicKey;\r\n\r\n  const instructions: TransactionInstruction[] = [];\r\n\r\n  const { index: depositEntryIndex, isInit: depositEntryInit } = await getDepositEntryIndex(\r\n    connection,\r\n    registrar,\r\n    voter,\r\n    votingMint,\r\n  );\r\n  if (!depositEntryInit) throw Error(\"deposit entry index check error\");\r\n\r\n  instructions.push(\r\n    voterStakeRegistryWithdraw(\r\n      voteWeightAddinProgramId,\r\n      registrar,\r\n      voter,\r\n      owner,\r\n      tokenOwnerRecordAddress,\r\n      voterWeightRecord,\r\n      voterVault,\r\n      getATAAddress(owner, votingMint, tokenProgram).publicKey,\r\n      ownerPda,\r\n      poolId,\r\n      votingMint,\r\n      votingMintAuthority,\r\n      programId,\r\n\r\n      depositEntryIndex,\r\n      ownerInfo.voteLockedBalance,\r\n    ),\r\n  );\r\n\r\n  return instructions;\r\n}\r\n\r\nexport function makeRestartRewardInstruction({\r\n  payer,\r\n  rewardVault,\r\n  userRewardTokenPub,\r\n  farmKeys,\r\n  rewardInfo,\r\n}: {\r\n  payer: PublicKey;\r\n  rewardVault: PublicKey;\r\n  userRewardTokenPub: PublicKey;\r\n  farmKeys: {\r\n    id: PublicKey;\r\n    programId: PublicKey;\r\n    lpVault: PublicKey;\r\n  };\r\n  rewardInfo: {\r\n    openTime: number;\r\n    endTime: number;\r\n    perSecond: string;\r\n  };\r\n}): TransactionInstruction {\r\n  const data = Buffer.alloc(farmRewardRestartLayout.span);\r\n  farmRewardRestartLayout.encode(\r\n    {\r\n      instruction: 3,\r\n      rewardReopenTime: parseBigNumberish(rewardInfo.openTime),\r\n      rewardEndTime: parseBigNumberish(rewardInfo.endTime),\r\n      rewardPerSecond: parseBigNumberish(rewardInfo.perSecond),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: farmKeys.id }),\r\n    accountMeta({ pubkey: farmKeys.lpVault, isWritable: false }),\r\n    accountMeta({ pubkey: rewardVault }),\r\n    accountMeta({ pubkey: userRewardTokenPub! }),\r\n    accountMeta({ pubkey: payer, isWritable: false, isSigner: true }),\r\n  ];\r\n\r\n  return new TransactionInstruction({ programId: farmKeys.programId, keys, data });\r\n}\r\n\r\nexport function makeAddNewRewardInstruction({\r\n  payer,\r\n  userRewardTokenPub,\r\n  farmKeys,\r\n  rewardVault,\r\n  rewardInfo,\r\n}: {\r\n  payer: PublicKey;\r\n  userRewardTokenPub: PublicKey;\r\n  rewardVault: PublicKey;\r\n  farmKeys: {\r\n    id: PublicKey;\r\n    programId: PublicKey;\r\n    authority: PublicKey;\r\n  };\r\n  rewardInfo: {\r\n    mint: PublicKey;\r\n    openTime: number;\r\n    endTime: number;\r\n    perSecond: string;\r\n    rewardType: RewardType;\r\n  };\r\n}): TransactionInstruction {\r\n  const data = Buffer.alloc(farmAddRewardLayout.span);\r\n  farmAddRewardLayout.encode(\r\n    {\r\n      instruction: 4,\r\n      isSet: new BN(1),\r\n      rewardPerSecond: parseBigNumberish(rewardInfo.perSecond),\r\n      rewardOpenTime: parseBigNumberish(rewardInfo.openTime),\r\n      rewardEndTime: parseBigNumberish(rewardInfo.endTime),\r\n      rewardType: parseBigNumberish(poolTypeV6[rewardInfo.rewardType]),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    ...commonSystemAccountMeta,\r\n    accountMeta({ pubkey: farmKeys.id }),\r\n    accountMeta({ pubkey: farmKeys.authority, isWritable: false }),\r\n    accountMeta({ pubkey: rewardInfo.mint, isWritable: false }),\r\n    accountMeta({ pubkey: rewardVault }),\r\n    accountMeta({ pubkey: userRewardTokenPub! }),\r\n    accountMeta({ pubkey: payer, isWritable: false, isSigner: true }),\r\n  ];\r\n\r\n  return new TransactionInstruction({ programId: farmKeys.programId, keys, data });\r\n}\r\n\r\nexport function makeDepositWithdrawInstruction(params: {\r\n  instruction: number;\r\n  amount: BN;\r\n  farmInfo: { id: string; programId: string };\r\n  farmKeys: FormatFarmKeyOut;\r\n  lpAccount: PublicKey;\r\n  owner: PublicKey;\r\n  rewardAccounts: PublicKey[];\r\n  deposit?: boolean;\r\n  version: 3 | 5 | 6;\r\n}): TransactionInstruction {\r\n  const { farmInfo, farmKeys, version, lpAccount, rewardAccounts, owner, instruction, amount, deposit } = params;\r\n\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction,\r\n      amount,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys =\r\n    version === 6\r\n      ? [\r\n          accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n          ...(deposit ? [accountMeta({ pubkey: SystemProgram.programId, isWritable: false })] : []),\r\n          accountMeta({ pubkey: id }),\r\n          accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n          accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n          accountMeta({ pubkey: ledgerAddress }),\r\n          accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n          accountMeta({ pubkey: lpAccount }),\r\n        ]\r\n      : [\r\n          accountMeta({ pubkey: id }),\r\n          accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n          accountMeta({ pubkey: ledgerAddress }),\r\n          accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n          accountMeta({ pubkey: lpAccount }),\r\n          accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n          accountMeta({ pubkey: rewardAccounts[0] }),\r\n          accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n          // system\r\n          accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n          accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n        ];\r\n\r\n  if (version === 5) {\r\n    for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\r\n      keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n    }\r\n  }\r\n\r\n  if (version === 6) {\r\n    for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\r\n      keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n      keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\ninterface DepositWithdrawParams {\r\n  amount: BN;\r\n  farmInfo: { id: string; programId: string };\r\n  farmKeys: FormatFarmKeyOut;\r\n  lpAccount: PublicKey;\r\n  owner: PublicKey;\r\n  rewardAccounts: PublicKey[];\r\n  userAuxiliaryLedgers?: PublicKey[];\r\n}\r\n\r\nexport function makeWithdrawInstructionV6(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 6,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 2,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n\r\n    accountMeta({ pubkey: id }),\r\n\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n  ];\r\n\r\n  for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\r\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeWithdrawInstructionV5(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 5,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 12,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: rewardAccounts[0] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n    // system\r\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  ];\r\n\r\n  for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\r\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n  }\r\n\r\n  if (userAuxiliaryLedgers) {\r\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\r\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeWithdrawInstructionV3(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 3,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 11,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: rewardAccounts[0] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n    // system\r\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  ];\r\n\r\n  if (userAuxiliaryLedgers) {\r\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\r\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeDepositInstructionV3(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 3,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 10,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: rewardAccounts[0] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n    // system\r\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  ];\r\n\r\n  if (userAuxiliaryLedgers) {\r\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\r\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeDepositInstructionV5(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount, userAuxiliaryLedgers } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 5,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 11,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: rewardAccounts[0] }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[0].vault) }),\r\n    // system\r\n    accountMeta({ pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n  ];\r\n\r\n  for (let index = 1; index < farmKeys.rewardInfos.length; index++) {\r\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n  }\r\n\r\n  if (userAuxiliaryLedgers) {\r\n    for (const auxiliaryLedger of userAuxiliaryLedgers) {\r\n      keys.push(accountMeta({ pubkey: auxiliaryLedger }));\r\n    }\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n\r\nexport function makeDepositInstructionV6(params: DepositWithdrawParams): TransactionInstruction {\r\n  const { farmInfo, farmKeys, lpAccount, rewardAccounts, owner, amount } = params;\r\n  const [programId, id] = [new PublicKey(farmInfo.programId), new PublicKey(farmInfo.id)];\r\n\r\n  const ledgerAddress = getAssociatedLedgerAccount({\r\n    programId,\r\n    poolId: id,\r\n    owner,\r\n    version: 6,\r\n  });\r\n\r\n  const data = Buffer.alloc(dwLayout.span);\r\n  dwLayout.encode(\r\n    {\r\n      instruction: 1,\r\n      amount: parseBigNumberish(amount),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: id }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(farmKeys.lpVault) }),\r\n    accountMeta({ pubkey: ledgerAddress }),\r\n    accountMeta({ pubkey: owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: lpAccount }),\r\n  ];\r\n\r\n  for (let index = 0; index < farmKeys.rewardInfos.length; index++) {\r\n    keys.push(accountMeta({ pubkey: new PublicKey(farmKeys.rewardInfos[index].vault) }));\r\n    keys.push(accountMeta({ pubkey: rewardAccounts[index] }));\r\n  }\r\n\r\n  return new TransactionInstruction({ programId, keys, data });\r\n}\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport { GetMultipleAccountsInfoConfig, getMultipleAccountsInfoWithCustomFlags } from \"@/common/accountInfo\";\r\nimport { parseBigNumberish } from \"@/common/bignumber\";\r\nimport { createLogger } from \"@/common/logger\";\r\nimport { findProgramAddress, ProgramAddress } from \"@/common/txTool/txUtils\";\r\nimport { DateParam, isDateAfter, isDateBefore } from \"@/common/date\";\r\nimport { jsonInfo2PoolKeys } from \"@/common/utility\";\r\nimport { RewardInfoV6 } from \"@/api/type\";\r\n\r\nimport { splAccountLayout } from \"../account/layout\";\r\nimport { SplAccount } from \"../account/types\";\r\nimport { FARM_VERSION_TO_LEDGER_LAYOUT, FARM_VERSION_TO_STATE_LAYOUT, poolTypeV6 } from \"./config\";\r\nimport { FarmLedger, FarmLedgerLayout, FarmState, FarmStateLayout } from \"./layout\";\r\nimport { FarmRewardInfo, FarmRewardInfoConfig } from \"./type\";\r\n\r\nimport { VoterRegistrar, Voter } from \"./layout\";\r\n\r\nconst logger = createLogger(\"Raydium.farm.util\");\r\ninterface AssociatedLedgerPoolAccount {\r\n  programId: PublicKey;\r\n  poolId: PublicKey;\r\n  mint: PublicKey;\r\n  type: \"lpVault\" | \"rewardVault\";\r\n}\r\n\r\nexport function getAssociatedLedgerPoolAccount({\r\n  programId,\r\n  poolId,\r\n  mint,\r\n  type,\r\n}: AssociatedLedgerPoolAccount): PublicKey {\r\n  const { publicKey } = findProgramAddress(\r\n    [\r\n      poolId.toBuffer(),\r\n      mint.toBuffer(),\r\n      Buffer.from(\r\n        type === \"lpVault\" ? \"lp_vault_associated_seed\" : type === \"rewardVault\" ? \"reward_vault_associated_seed\" : \"\",\r\n        \"utf-8\",\r\n      ),\r\n    ],\r\n    programId,\r\n  );\r\n  return publicKey;\r\n}\r\n\r\nexport function getAssociatedLedgerAccount({\r\n  programId,\r\n  poolId,\r\n  owner,\r\n  version,\r\n}: {\r\n  programId: PublicKey;\r\n  poolId: PublicKey;\r\n  owner: PublicKey;\r\n  version: 6 | 5 | 3;\r\n}): PublicKey {\r\n  const { publicKey } = findProgramAddress(\r\n    [\r\n      poolId.toBuffer(),\r\n      owner.toBuffer(),\r\n      Buffer.from(version === 6 ? \"farmer_info_associated_seed\" : \"staker_info_v2_associated_seed\", \"utf-8\"),\r\n    ],\r\n    programId,\r\n  );\r\n  return publicKey;\r\n}\r\n\r\nexport const getAssociatedAuthority = ({\r\n  programId,\r\n  poolId,\r\n}: {\r\n  programId: PublicKey;\r\n  poolId: PublicKey;\r\n}): ProgramAddress => findProgramAddress([poolId.toBuffer()], programId);\r\n\r\nexport function farmRewardInfoToConfig(data: FarmRewardInfo): FarmRewardInfoConfig {\r\n  return {\r\n    isSet: new BN(1),\r\n    rewardPerSecond: parseBigNumberish(data.perSecond),\r\n    rewardOpenTime: parseBigNumberish(data.openTime),\r\n    rewardEndTime: parseBigNumberish(data.endTime),\r\n    rewardType: parseBigNumberish(poolTypeV6[data.rewardType]),\r\n  };\r\n}\r\n\r\nexport function calFarmRewardAmount(data: Pick<RewardInfoV6, \"openTime\" | \"endTime\"> & { perSecond: string }): BN {\r\n  return parseBigNumberish(data.endTime).sub(parseBigNumberish(data.openTime)).mul(parseBigNumberish(data.perSecond));\r\n}\r\n\r\nexport function getFarmLedgerLayout(version: number): FarmLedgerLayout | undefined {\r\n  const ledgerLayout = FARM_VERSION_TO_LEDGER_LAYOUT[version];\r\n  if (!ledgerLayout) logger.logWithError(\"invalid version\", version);\r\n  return ledgerLayout;\r\n}\r\n\r\nexport function getFarmStateLayout(version: number): FarmStateLayout | undefined {\r\n  const stateLayout = FARM_VERSION_TO_STATE_LAYOUT[version];\r\n  if (!stateLayout) logger.logWithError(\"invalid version\", version);\r\n  return stateLayout;\r\n}\r\n\r\nexport function updateFarmPoolInfo(\r\n  poolInfo: FarmState,\r\n  lpVault: SplAccount,\r\n  slot: number,\r\n  chainTime: number,\r\n): FarmState {\r\n  if (poolInfo.version === 3 || poolInfo.version === 5) {\r\n    if (poolInfo.lastSlot.gte(new BN(slot))) return poolInfo;\r\n\r\n    const spread = new BN(slot).sub(poolInfo.lastSlot);\r\n    poolInfo.lastSlot = new BN(slot);\r\n\r\n    for (const itemRewardInfo of poolInfo.rewardInfos) {\r\n      if (lpVault.amount.eq(new BN(0))) continue;\r\n\r\n      const reward = itemRewardInfo.perSlotReward.mul(spread);\r\n      itemRewardInfo.perShareReward = itemRewardInfo.perShareReward.add(\r\n        reward.mul(new BN(10).pow(new BN(poolInfo.version === 3 ? 9 : 15))).div(lpVault.amount),\r\n      );\r\n      itemRewardInfo.totalReward = itemRewardInfo.totalReward.add(reward);\r\n    }\r\n  } else if (poolInfo.version === 6) {\r\n    for (const itemRewardInfo of poolInfo.rewardInfos) {\r\n      if (itemRewardInfo.rewardState.eq(new BN(0))) continue;\r\n      const updateTime = BN.min(new BN(chainTime), itemRewardInfo.rewardEndTime);\r\n      if (itemRewardInfo.rewardOpenTime.gte(updateTime)) continue;\r\n      const spread = updateTime.sub(itemRewardInfo.rewardLastUpdateTime);\r\n      let reward = spread.mul(itemRewardInfo.rewardPerSecond);\r\n      const leftReward = itemRewardInfo.totalReward.sub(itemRewardInfo.totalRewardEmissioned);\r\n      if (leftReward.lt(reward)) {\r\n        reward = leftReward;\r\n        itemRewardInfo.rewardLastUpdateTime = itemRewardInfo.rewardLastUpdateTime.add(\r\n          leftReward.div(itemRewardInfo.rewardPerSecond),\r\n        );\r\n      } else {\r\n        itemRewardInfo.rewardLastUpdateTime = updateTime;\r\n      }\r\n      if (lpVault.amount.eq(new BN(0))) continue;\r\n      itemRewardInfo.accRewardPerShare = itemRewardInfo.accRewardPerShare.add(\r\n        reward.mul(poolInfo.rewardMultiplier).div(lpVault.amount),\r\n      );\r\n      itemRewardInfo.totalRewardEmissioned = itemRewardInfo.totalRewardEmissioned.add(reward);\r\n    }\r\n  }\r\n  return poolInfo;\r\n}\r\n\r\ninterface FarmPoolsInfo {\r\n  [id: string]: {\r\n    state: FarmState;\r\n    lpVault: SplAccount;\r\n    ledger?: FarmLedger;\r\n    wrapped?: { pendingRewards: BN[] };\r\n  };\r\n}\r\n\r\nexport interface FarmFetchMultipleInfoParams {\r\n  connection: Connection;\r\n  farmPools: any[];\r\n  owner?: PublicKey;\r\n  config?: GetMultipleAccountsInfoConfig;\r\n  chainTime: number;\r\n}\r\n\r\nexport async function fetchMultipleFarmInfoAndUpdate({\r\n  connection,\r\n  farmPools,\r\n  owner,\r\n  config,\r\n  chainTime,\r\n}: FarmFetchMultipleInfoParams): Promise<FarmPoolsInfo> {\r\n  let hasNotV6Pool = false;\r\n  let hasV6Pool = false;\r\n  const tenBN = new BN(10);\r\n\r\n  const publicKeys: {\r\n    pubkey: PublicKey;\r\n    version: number;\r\n    key: \"state\" | \"lpVault\" | \"ledger\";\r\n    poolId: PublicKey;\r\n  }[] = [];\r\n\r\n  for (const poolInfo of farmPools) {\r\n    const pool = jsonInfo2PoolKeys(poolInfo);\r\n    if (pool.version === 6) hasV6Pool = true;\r\n    else hasNotV6Pool = true;\r\n\r\n    publicKeys.push(\r\n      {\r\n        pubkey: pool.id,\r\n        version: pool.version,\r\n        key: \"state\",\r\n        poolId: pool.id,\r\n      },\r\n      {\r\n        pubkey: pool.lpVault,\r\n        version: pool.version,\r\n        key: \"lpVault\",\r\n        poolId: pool.id,\r\n      },\r\n    );\r\n\r\n    if (owner) {\r\n      publicKeys.push({\r\n        pubkey: getAssociatedLedgerAccount({\r\n          programId: pool.programId,\r\n          poolId: pool.id,\r\n          owner,\r\n          version: poolInfo.version as 6 | 5 | 3,\r\n        }),\r\n        version: pool.version,\r\n        key: \"ledger\",\r\n        poolId: pool.id,\r\n      });\r\n    }\r\n  }\r\n\r\n  const poolsInfo: FarmPoolsInfo = {};\r\n  const accountsInfo = await getMultipleAccountsInfoWithCustomFlags(connection, publicKeys, config);\r\n  for (const { pubkey, version, key, poolId, accountInfo } of accountsInfo) {\r\n    const _poolId = poolId.toBase58();\r\n    poolsInfo[_poolId] = { ...poolsInfo[_poolId] };\r\n    if (key === \"state\") {\r\n      const stateLayout = getFarmStateLayout(version);\r\n      if (!accountInfo || !accountInfo.data || accountInfo.data.length !== stateLayout!.span)\r\n        logger.logWithError(`invalid farm state account info, pools.id, ${pubkey}`);\r\n      poolsInfo[_poolId].state = stateLayout!.decode(accountInfo!.data);\r\n    } else if (key === \"lpVault\") {\r\n      if (!accountInfo || !accountInfo.data || accountInfo.data.length !== splAccountLayout.span)\r\n        logger.logWithError(`invalid farm lp vault account info, pools.lpVault, ${pubkey}`);\r\n      poolsInfo[_poolId].lpVault = splAccountLayout.decode(accountInfo!.data);\r\n    } else if (key === \"ledger\") {\r\n      const legerLayout = getFarmLedgerLayout(version)!;\r\n      if (accountInfo && accountInfo.data) {\r\n        if (accountInfo.data.length !== legerLayout.span)\r\n          logger.logWithError(`invalid farm ledger account info, ledger, ${pubkey}`);\r\n        poolsInfo[_poolId].ledger = legerLayout.decode(accountInfo.data);\r\n      }\r\n    }\r\n  }\r\n\r\n  const slot = hasV6Pool || hasNotV6Pool ? await connection.getSlot() : 0;\r\n\r\n  for (const poolId of Object.keys(poolsInfo)) {\r\n    if (poolsInfo[poolId] === undefined) continue;\r\n    poolsInfo[poolId].state = updateFarmPoolInfo(poolsInfo[poolId].state, poolsInfo[poolId].lpVault, slot, chainTime);\r\n  }\r\n\r\n  for (const [poolId, { state, ledger }] of Object.entries(poolsInfo)) {\r\n    if (ledger) {\r\n      const multiplier =\r\n        state.version === 6\r\n          ? state.rewardMultiplier\r\n          : state.rewardInfos.length === 1\r\n          ? tenBN.pow(new BN(9))\r\n          : tenBN.pow(new BN(15));\r\n\r\n      const pendingRewards = state.rewardInfos.map((rewardInfo, index) => {\r\n        const rewardDebt = ledger.rewardDebts[index];\r\n        const pendingReward = ledger.deposited\r\n          .mul(state.version === 6 ? rewardInfo.accRewardPerShare : rewardInfo.perShareReward)\r\n          .div(multiplier)\r\n          .sub(rewardDebt);\r\n\r\n        return pendingReward;\r\n      });\r\n\r\n      poolsInfo[poolId].wrapped = {\r\n        ...poolsInfo[poolId].wrapped,\r\n        pendingRewards,\r\n      };\r\n    }\r\n  }\r\n\r\n  return poolsInfo;\r\n}\r\n/** deprecated */\r\nexport function judgeFarmType(\r\n  info: any,\r\n  currentTime: DateParam = Date.now(),\r\n): \"closed pool\" | \"normal fusion pool\" | \"dual fusion pool\" | undefined | \"upcoming pool\" {\r\n  if (info.version === 6) {\r\n    const rewardInfos = info.state.rewardInfos;\r\n    if (rewardInfos.every(({ rewardOpenTime }) => isDateBefore(currentTime, rewardOpenTime.toNumber(), { unit: \"s\" })))\r\n      return \"upcoming pool\";\r\n    if (rewardInfos.every(({ rewardEndTime }) => isDateAfter(currentTime, rewardEndTime.toNumber(), { unit: \"s\" })))\r\n      return \"closed pool\";\r\n  } else {\r\n    const perSlotRewards = info.state.rewardInfos.map(({ perSlotReward }) => perSlotReward);\r\n    if (perSlotRewards.length === 2) {\r\n      // v5\r\n      if (String(perSlotRewards[0]) === \"0\" && String(perSlotRewards[1]) !== \"0\") {\r\n        return \"normal fusion pool\"; // reward xxx token\r\n      }\r\n      if (String(perSlotRewards[0]) !== \"0\" && String(perSlotRewards[1]) !== \"0\") {\r\n        return \"dual fusion pool\"; // reward ray and xxx token\r\n      }\r\n      if (String(perSlotRewards[0]) === \"0\" && String(perSlotRewards[1]) === \"0\") {\r\n        return \"closed pool\";\r\n      }\r\n    } else if (perSlotRewards.length === 1) {\r\n      // v3\r\n      if (String(perSlotRewards[0]) === \"0\") {\r\n        return \"closed pool\";\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport async function getDepositEntryIndex(\r\n  connection: Connection,\r\n  registrar: PublicKey,\r\n  voter: PublicKey,\r\n  voterMint: PublicKey,\r\n): Promise<{ index: number; isInit: boolean }> {\r\n  const registrarAccountData = await connection.getAccountInfo(registrar);\r\n  if (registrarAccountData === null) throw Error(\"registrar info check error\");\r\n  const registrarData = VoterRegistrar.decode(registrarAccountData.data);\r\n\r\n  const votingMintConfigIndex = registrarData.votingMints.findIndex((i) => i.mint.equals(voterMint));\r\n\r\n  if (votingMintConfigIndex === -1) throw Error(\"find voter mint error\");\r\n\r\n  const voterAccountData = await connection.getAccountInfo(voter);\r\n  if (voterAccountData === null) return { index: votingMintConfigIndex, isInit: false }; // throw Error('voter info check error')\r\n\r\n  const voterData = Voter.decode(voterAccountData.data);\r\n\r\n  const depositEntryIndex = voterData.deposits.findIndex(\r\n    (i) => i.isUsed && i.votingMintConfigIdx === votingMintConfigIndex,\r\n  );\r\n  if (depositEntryIndex === -1) return { index: votingMintConfigIndex, isInit: false };\r\n  else return { index: depositEntryIndex, isInit: true };\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { AccountLayout, NATIVE_MINT, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport {\r\n  ApiV3PoolInfoConcentratedItem,\r\n  ApiV3PoolInfoStandardItem,\r\n  AmmV4Keys,\r\n  AmmV5Keys,\r\n  FormatFarmInfoOutV6,\r\n} from \"@/api/type\";\r\nimport { Token, TokenAmount, Percent } from \"@/module\";\r\nimport { toToken } from \"../token\";\r\nimport { BN_ZERO, divCeil } from \"@/common/bignumber\";\r\nimport { getATAAddress } from \"@/common/pda\";\r\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\r\nimport { MakeMultiTxData, MakeTxData } from \"@/common/txTool/txTool\";\r\nimport { BNDivCeil } from \"@/common/transfer\";\r\nimport { getMultipleAccountsInfoWithCustomFlags } from \"@/common/accountInfo\";\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport {\r\n  AmountSide,\r\n  AddLiquidityParams,\r\n  RemoveParams,\r\n  CreatePoolParam,\r\n  CreatePoolAddress,\r\n  ComputeAmountOutParam,\r\n  SwapParam,\r\n  AmmRpcData,\r\n} from \"./type\";\r\nimport {\r\n  makeAddLiquidityInstruction,\r\n  removeLiquidityInstruction,\r\n  createPoolV4InstructionV2,\r\n  makeAMMSwapInstruction,\r\n} from \"./instruction\";\r\nimport { ComputeBudgetConfig } from \"../type\";\r\nimport { ClmmInstrument } from \"../clmm/instrument\";\r\nimport { getAssociatedPoolKeys, getAssociatedConfigId, toAmmComputePoolInfo } from \"./utils\";\r\nimport { createPoolFeeLayout, liquidityStateV4Layout } from \"./layout\";\r\nimport {\r\n  FARM_PROGRAM_TO_VERSION,\r\n  FarmLedger,\r\n  makeWithdrawInstructionV3,\r\n  makeWithdrawInstructionV5,\r\n  makeWithdrawInstructionV6,\r\n  createAssociatedLedgerAccountInstruction,\r\n  getAssociatedLedgerAccount,\r\n  getFarmLedgerLayout,\r\n} from \"@/raydium/farm\";\r\nimport { StableLayout, getStablePrice, getDyByDxBaseIn, getDxByDyBaseIn } from \"./stable\";\r\nimport { LIQUIDITY_FEES_NUMERATOR, LIQUIDITY_FEES_DENOMINATOR } from \"./constant\";\r\n\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { WSOLMint } from \"@/common\";\r\n\r\nexport default class LiquidityModule extends ModuleBase {\r\n  public stableLayout: StableLayout;\r\n\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n    this.stableLayout = new StableLayout({ connection: this.scope.connection });\r\n  }\r\n\r\n  public async initLayout(): Promise<void> {\r\n    await this.stableLayout.initStableModelLayout();\r\n  }\r\n\r\n  public async load(): Promise<void> {\r\n    this.checkDisabled();\r\n  }\r\n\r\n  public computePairAmount({\r\n    poolInfo,\r\n    amount,\r\n    // anotherToken,\r\n    slippage,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoStandardItem;\r\n    amount: string | Decimal;\r\n    slippage: Percent;\r\n    baseIn?: boolean;\r\n  }): { anotherAmount: TokenAmount; maxAnotherAmount: TokenAmount; liquidity: BN } {\r\n    const inputAmount = new BN(new Decimal(amount).mul(10 ** poolInfo[baseIn ? \"mintA\" : \"mintB\"].decimals).toFixed(0));\r\n    const _anotherToken = toToken(poolInfo[baseIn ? \"mintB\" : \"mintA\"]);\r\n\r\n    const [baseReserve, quoteReserve] = [\r\n      new BN(new Decimal(poolInfo.mintAmountA).mul(10 ** poolInfo.mintA.decimals).toString()),\r\n      new BN(new Decimal(poolInfo.mintAmountB).mul(10 ** poolInfo.mintB.decimals).toString()),\r\n    ];\r\n    const lpAmount = new BN(\r\n      new Decimal(poolInfo.lpAmount).mul(10 ** poolInfo.lpMint.decimals).toFixed(0, Decimal.ROUND_DOWN),\r\n    );\r\n    this.logDebug(\"baseReserve:\", baseReserve.toString(), \"quoteReserve:\", quoteReserve.toString());\r\n\r\n    this.logDebug(\r\n      \"tokenIn:\",\r\n      baseIn ? poolInfo.mintA.symbol : poolInfo.mintB.symbol,\r\n      \"amountIn:\",\r\n      inputAmount.toString(),\r\n      \"anotherToken:\",\r\n      baseIn ? poolInfo.mintB.symbol : poolInfo.mintA.symbol,\r\n      \"slippage:\",\r\n      `${slippage.toSignificant()}%`,\r\n      \"baseReserve\",\r\n      baseReserve.toString(),\r\n      \"quoteReserve\",\r\n      quoteReserve.toString(),\r\n    );\r\n\r\n    // input is fixed\r\n    const input = baseIn ? \"base\" : \"quote\";\r\n    this.logDebug(\"input side:\", input);\r\n\r\n    // round up\r\n    let amountRaw = BN_ZERO;\r\n    if (!inputAmount.isZero()) {\r\n      amountRaw =\r\n        input === \"base\"\r\n          ? divCeil(inputAmount.mul(quoteReserve), baseReserve)\r\n          : divCeil(inputAmount.mul(baseReserve), quoteReserve);\r\n    }\r\n\r\n    this.logDebug(\"amountRaw:\", amountRaw.toString(), \"lpAmount:\", lpAmount.toString());\r\n\r\n    const liquidity = divCeil(inputAmount.mul(lpAmount), input === \"base\" ? baseReserve : quoteReserve);\r\n\r\n    this.logDebug(\"liquidity:\", liquidity.toString());\r\n\r\n    const _slippage = new Percent(new BN(1)).add(slippage);\r\n    const slippageAdjustedAmount = _slippage.mul(amountRaw).quotient;\r\n\r\n    const _anotherAmount = new TokenAmount(_anotherToken, amountRaw);\r\n    const _maxAnotherAmount = new TokenAmount(_anotherToken, slippageAdjustedAmount);\r\n    this.logDebug(\"anotherAmount:\", _anotherAmount.toFixed(), \"maxAnotherAmount:\", _maxAnotherAmount.toFixed());\r\n\r\n    return {\r\n      anotherAmount: _anotherAmount,\r\n      maxAnotherAmount: _maxAnotherAmount,\r\n      liquidity,\r\n    };\r\n  }\r\n\r\n  public async getAmmPoolKeys(poolId: string): Promise<AmmV4Keys | AmmV5Keys> {\r\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as (AmmV4Keys | AmmV5Keys)[])[0];\r\n  }\r\n\r\n  public async addLiquidity<T extends TxVersion>(params: AddLiquidityParams<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      amountInA,\r\n      amountInB,\r\n      fixedSide,\r\n      config,\r\n      txVersion,\r\n      computeBudgetConfig,\r\n    } = params;\r\n\r\n    if (this.scope.availability.addStandardPosition === false)\r\n      this.logAndCreateError(\"add liquidity feature disabled in your region\");\r\n\r\n    this.logDebug(\"amountInA:\", amountInA, \"amountInB:\", amountInB);\r\n    if (amountInA.isZero() || amountInB.isZero())\r\n      this.logAndCreateError(\"amounts must greater than zero\", \"amountInA & amountInB\", {\r\n        amountInA: amountInA.toFixed(),\r\n        amountInB: amountInB.toFixed(),\r\n      });\r\n    const { account } = this.scope;\r\n    const { bypassAssociatedCheck, checkCreateATAOwner } = {\r\n      // default\r\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false },\r\n      // custom\r\n      ...config,\r\n    };\r\n    const [tokenA, tokenB] = [amountInA.token, amountInB.token];\r\n    const tokenAccountA = await account.getCreatedTokenAccount({\r\n      mint: tokenA.mint,\r\n      associatedOnly: false,\r\n    });\r\n    const tokenAccountB = await account.getCreatedTokenAccount({\r\n      mint: tokenB.mint,\r\n      associatedOnly: false,\r\n    });\r\n    if (!tokenAccountA && !tokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", account.tokenAccounts);\r\n\r\n    const lpTokenAccount = await account.getCreatedTokenAccount({\r\n      mint: new PublicKey(poolInfo.lpMint.address),\r\n    });\r\n\r\n    const tokens = [tokenA, tokenB];\r\n    const _tokenAccounts = [tokenAccountA, tokenAccountB];\r\n    const rawAmounts = [amountInA.raw, amountInB.raw];\r\n\r\n    // handle amount a & b and direction\r\n    const sideA = amountInA.token.mint.toBase58() === poolInfo.mintA.address ? \"base\" : \"quote\";\r\n    let _fixedSide: AmountSide = \"base\";\r\n    if (![\"quote\", \"base\"].includes(sideA)) this.logAndCreateError(\"invalid fixedSide\", \"fixedSide\", fixedSide);\r\n    if (sideA === \"quote\") {\r\n      tokens.reverse();\r\n      _tokenAccounts.reverse();\r\n      rawAmounts.reverse();\r\n      _fixedSide = fixedSide === \"a\" ? \"quote\" : \"base\";\r\n    } else if (sideA === \"base\") {\r\n      _fixedSide = fixedSide === \"a\" ? \"base\" : \"quote\";\r\n    }\r\n\r\n    const [baseToken, quoteToken] = tokens;\r\n    const [baseTokenAccount, quoteTokenAccount] = _tokenAccounts;\r\n    const [baseAmountRaw, quoteAmountRaw] = rawAmounts;\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getAmmPoolKeys(poolInfo.id));\r\n\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    const { tokenAccount: _baseTokenAccount, ...baseInstruction } = await account.handleTokenAccount({\r\n      side: \"in\",\r\n      amount: baseAmountRaw,\r\n      mint: baseToken.mint,\r\n      tokenAccount: baseTokenAccount,\r\n      bypassAssociatedCheck,\r\n      checkCreateATAOwner,\r\n    });\r\n    txBuilder.addInstruction(baseInstruction);\r\n    const { tokenAccount: _quoteTokenAccount, ...quoteInstruction } = await account.handleTokenAccount({\r\n      side: \"in\",\r\n      amount: quoteAmountRaw,\r\n      mint: quoteToken.mint,\r\n      tokenAccount: quoteTokenAccount,\r\n      bypassAssociatedCheck,\r\n      checkCreateATAOwner,\r\n    });\r\n    txBuilder.addInstruction(quoteInstruction);\r\n    const { tokenAccount: _lpTokenAccount, ...lpInstruction } = await account.handleTokenAccount({\r\n      side: \"out\",\r\n      amount: 0,\r\n      mint: new PublicKey(poolInfo.lpMint.address),\r\n      tokenAccount: lpTokenAccount,\r\n      bypassAssociatedCheck,\r\n      checkCreateATAOwner,\r\n    });\r\n    txBuilder.addInstruction(lpInstruction);\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        makeAddLiquidityInstruction({\r\n          poolInfo,\r\n          poolKeys: poolKeys as AmmV4Keys | AmmV5Keys,\r\n          userKeys: {\r\n            baseTokenAccount: _baseTokenAccount!,\r\n            quoteTokenAccount: _quoteTokenAccount!,\r\n            lpTokenAccount: _lpTokenAccount!,\r\n            owner: this.scope.ownerPubKey,\r\n          },\r\n          baseAmountIn: baseAmountRaw,\r\n          quoteAmountIn: quoteAmountRaw,\r\n          fixedSide: _fixedSide,\r\n        }),\r\n      ],\r\n      instructionTypes: [\r\n        poolInfo.pooltype.includes(\"StablePool\")\r\n          ? InstructionType.AmmV5AddLiquidity\r\n          : InstructionType.AmmV4AddLiquidity,\r\n      ],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    if (txVersion === TxVersion.V0) (await txBuilder.buildV0()) as MakeTxData<T>;\r\n    return txBuilder.build() as MakeTxData<T>;\r\n  }\r\n\r\n  public async removeLiquidity<T extends TxVersion>(params: RemoveParams<T>): Promise<Promise<MakeTxData<T>>> {\r\n    if (this.scope.availability.removeStandardPosition === false)\r\n      this.logAndCreateError(\"remove liquidity feature disabled in your region\");\r\n    const { poolInfo, poolKeys: propPoolKeys, amountIn, config, txVersion, computeBudgetConfig } = params;\r\n    const poolKeys = propPoolKeys ?? (await this.getAmmPoolKeys(poolInfo.id));\r\n    const [baseMint, quoteMint, lpMint] = [\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n      new PublicKey(poolInfo.lpMint.address),\r\n    ];\r\n    this.logDebug(\"amountIn:\", amountIn);\r\n    if (amountIn.isZero()) this.logAndCreateError(\"amount must greater than zero\", \"amountIn\", amountIn.toString());\r\n\r\n    const { account } = this.scope;\r\n    const lpTokenAccount = await account.getCreatedTokenAccount({\r\n      mint: lpMint,\r\n      associatedOnly: false,\r\n    });\r\n    if (!lpTokenAccount) this.logAndCreateError(\"cannot found lpTokenAccount\", \"tokenAccounts\", account.tokenAccounts);\r\n\r\n    const baseTokenAccount = await account.getCreatedTokenAccount({\r\n      mint: baseMint,\r\n    });\r\n    const quoteTokenAccount = await account.getCreatedTokenAccount({\r\n      mint: quoteMint,\r\n    });\r\n\r\n    const txBuilder = this.createTxBuilder();\r\n    const { bypassAssociatedCheck, checkCreateATAOwner } = {\r\n      // default\r\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false },\r\n      // custom\r\n      ...config,\r\n    };\r\n\r\n    const { tokenAccount: _baseTokenAccount, ...baseInstruction } = await account.handleTokenAccount({\r\n      side: \"out\",\r\n      amount: 0,\r\n      mint: baseMint,\r\n      tokenAccount: baseTokenAccount,\r\n      bypassAssociatedCheck,\r\n      checkCreateATAOwner,\r\n    });\r\n    txBuilder.addInstruction(baseInstruction);\r\n    const { tokenAccount: _quoteTokenAccount, ...quoteInstruction } = await account.handleTokenAccount({\r\n      side: \"out\",\r\n      amount: 0,\r\n      mint: quoteMint,\r\n      tokenAccount: quoteTokenAccount,\r\n      bypassAssociatedCheck,\r\n      checkCreateATAOwner,\r\n    });\r\n    txBuilder.addInstruction(quoteInstruction);\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        removeLiquidityInstruction({\r\n          poolInfo,\r\n          poolKeys,\r\n          userKeys: {\r\n            lpTokenAccount: lpTokenAccount!,\r\n            baseTokenAccount: _baseTokenAccount!,\r\n            quoteTokenAccount: _quoteTokenAccount!,\r\n            owner: this.scope.ownerPubKey,\r\n          },\r\n          amountIn,\r\n        }),\r\n      ],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      instructionTypes: [\r\n        poolInfo.pooltype.includes(\"StablePool\")\r\n          ? InstructionType.AmmV5RemoveLiquidity\r\n          : InstructionType.AmmV4RemoveLiquidity,\r\n      ],\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    if (txVersion === TxVersion.V0) return (await txBuilder.buildV0()) as MakeTxData<T>;\r\n    return txBuilder.build() as MakeTxData<T>;\r\n  }\r\n\r\n  public async removeAllLpAndCreateClmmPosition<T extends TxVersion>({\r\n    poolInfo,\r\n    clmmPoolInfo,\r\n    removeLpAmount,\r\n    createPositionInfo,\r\n    farmInfo,\r\n    userFarmLpAmount,\r\n    base,\r\n    computeBudgetConfig,\r\n    payer,\r\n    userAuxiliaryLedgers,\r\n    tokenProgram = TOKEN_PROGRAM_ID,\r\n    checkCreateATAOwner = true,\r\n    getEphemeralSigners,\r\n    txVersion,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoStandardItem;\r\n    clmmPoolInfo: ApiV3PoolInfoConcentratedItem;\r\n    removeLpAmount: BN;\r\n    createPositionInfo: {\r\n      tickLower: number;\r\n      tickUpper: number;\r\n      baseAmount: BN;\r\n      otherAmountMax: BN;\r\n    };\r\n    farmInfo?: FormatFarmInfoOutV6;\r\n    userFarmLpAmount?: BN;\r\n    userAuxiliaryLedgers?: PublicKey[];\r\n    base: \"MintA\" | \"MintB\";\r\n    payer?: PublicKey;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    tokenProgram?: PublicKey;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n    getEphemeralSigners?: (k: number) => any;\r\n  }): Promise<MakeMultiTxData<T>> {\r\n    if (\r\n      this.scope.availability.removeStandardPosition === false ||\r\n      this.scope.availability.createConcentratedPosition === false\r\n    )\r\n      this.logAndCreateError(\"remove liquidity or create position feature disabled in your region\");\r\n\r\n    if (\r\n      !(poolInfo.mintA.address === clmmPoolInfo.mintA.address || poolInfo.mintA.address === clmmPoolInfo.mintB.address)\r\n    )\r\n      throw Error(\"mint check error\");\r\n    if (\r\n      !(poolInfo.mintB.address === clmmPoolInfo.mintA.address || poolInfo.mintB.address === clmmPoolInfo.mintB.address)\r\n    )\r\n      throw Error(\"mint check error\");\r\n\r\n    const txBuilder = this.createTxBuilder();\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    const mintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccountRawInfos) {\r\n      if (\r\n        mintToAccount[item.accountInfo.mint.toString()] === undefined ||\r\n        getATAAddress(this.scope.ownerPubKey, item.accountInfo.mint, TOKEN_PROGRAM_ID).publicKey.equals(item.pubkey)\r\n      ) {\r\n        mintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\r\n      }\r\n    }\r\n\r\n    const lpTokenAccount = mintToAccount[poolInfo.lpMint.address];\r\n    if (lpTokenAccount === undefined) throw Error(\"find lp account error in trade accounts\");\r\n\r\n    const amountIn = removeLpAmount.add(userFarmLpAmount ?? new BN(0));\r\n    const mintBaseUseSOLBalance = poolInfo.mintA.address === Token.WSOL.mint.toString();\r\n    const mintQuoteUseSOLBalance = poolInfo.mintB.address === Token.WSOL.mint.toString();\r\n\r\n    const { account: baseTokenAccount, instructionParams: ownerTokenAccountBaseInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo: mintBaseUseSOLBalance\r\n          ? {\r\n              payer: this.scope.ownerPubKey,\r\n            }\r\n          : undefined,\r\n        skipCloseAccount: !mintBaseUseSOLBalance,\r\n        notUseTokenAccount: mintBaseUseSOLBalance,\r\n        associatedOnly: true,\r\n        checkCreateATAOwner,\r\n      });\r\n    txBuilder.addInstruction(ownerTokenAccountBaseInstruction || {});\r\n    if (baseTokenAccount === undefined) throw new Error(\"base token account not found\");\r\n\r\n    const { account: quoteTokenAccount, instructionParams: ownerTokenAccountQuoteInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: mintQuoteUseSOLBalance\r\n          ? {\r\n              payer: this.scope.ownerPubKey!,\r\n              amount: 0,\r\n            }\r\n          : undefined,\r\n        skipCloseAccount: !mintQuoteUseSOLBalance,\r\n        notUseTokenAccount: mintQuoteUseSOLBalance,\r\n        associatedOnly: true,\r\n        checkCreateATAOwner,\r\n      });\r\n    txBuilder.addInstruction(ownerTokenAccountQuoteInstruction || {});\r\n    if (quoteTokenAccount === undefined) throw new Error(\"quote token account not found\");\r\n\r\n    mintToAccount[poolInfo.mintA.address] = baseTokenAccount;\r\n    mintToAccount[poolInfo.mintB.address] = quoteTokenAccount;\r\n\r\n    if (farmInfo !== undefined && !userFarmLpAmount?.isZero()) {\r\n      const farmVersion = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n      const ledger = getAssociatedLedgerAccount({\r\n        programId: new PublicKey(farmInfo.programId),\r\n        poolId: new PublicKey(farmInfo.id),\r\n        owner: this.scope.ownerPubKey,\r\n        version: farmVersion,\r\n      });\r\n      let ledgerInfo: FarmLedger | undefined = undefined;\r\n      const ledgerData = await this.scope.connection.getAccountInfo(ledger);\r\n      if (ledgerData) {\r\n        const ledgerLayout = getFarmLedgerLayout(farmVersion)!;\r\n        ledgerInfo = ledgerLayout.decode(ledgerData.data);\r\n      }\r\n      if (farmVersion !== 6 && !ledgerInfo) {\r\n        const { instruction, instructionType } = createAssociatedLedgerAccountInstruction({\r\n          id: new PublicKey(farmInfo.id),\r\n          programId: new PublicKey(farmInfo.programId),\r\n          version: farmVersion,\r\n          ledger,\r\n          owner: this.scope.ownerPubKey,\r\n        });\r\n        txBuilder.addInstruction({ instructions: [instruction], instructionTypes: [instructionType] });\r\n      }\r\n\r\n      const rewardTokenAccounts: PublicKey[] = [];\r\n      for (const item of farmInfo.rewardInfos) {\r\n        const rewardIsWsol = item.mint.address === Token.WSOL.mint.toString();\r\n        if (mintToAccount[item.mint.address]) rewardTokenAccounts.push(mintToAccount[item.mint.address]);\r\n        else {\r\n          const { account: farmRewardAccount, instructionParams: ownerTokenAccountFarmInstruction } =\r\n            await this.scope.account.getOrCreateTokenAccount({\r\n              mint: new PublicKey(item.mint.address),\r\n              tokenProgram,\r\n              owner: this.scope.ownerPubKey,\r\n              skipCloseAccount: !rewardIsWsol,\r\n              createInfo: {\r\n                payer: payer || this.scope.ownerPubKey,\r\n              },\r\n              associatedOnly: true,\r\n              checkCreateATAOwner,\r\n            });\r\n          if (!farmRewardAccount) this.logAndCreateError(\"farm reward account not found:\", item.mint.address);\r\n          ownerTokenAccountFarmInstruction && txBuilder.addInstruction(ownerTokenAccountFarmInstruction);\r\n          rewardTokenAccounts.push(farmRewardAccount!);\r\n        }\r\n      }\r\n      const farmKeys = (await this.scope.api.fetchFarmKeysById({ ids: farmInfo.id }))[0];\r\n      const insParams = {\r\n        userAuxiliaryLedgers,\r\n        amount: userFarmLpAmount!,\r\n        owner: this.scope.ownerPubKey,\r\n        farmInfo,\r\n        farmKeys,\r\n        lpAccount: lpTokenAccount,\r\n        rewardAccounts: rewardTokenAccounts,\r\n      };\r\n      const version = FARM_PROGRAM_TO_VERSION[farmInfo.programId];\r\n      const newInstruction =\r\n        version === 6\r\n          ? makeWithdrawInstructionV6(insParams)\r\n          : version === 5\r\n          ? makeWithdrawInstructionV5(insParams)\r\n          : makeWithdrawInstructionV3(insParams);\r\n      const insType = {\r\n        3: InstructionType.FarmV3Withdraw,\r\n        5: InstructionType.FarmV5Withdraw,\r\n        6: InstructionType.FarmV6Withdraw,\r\n      };\r\n      txBuilder.addInstruction({\r\n        instructions: [newInstruction],\r\n        instructionTypes: [insType[version]],\r\n      });\r\n    }\r\n\r\n    const poolKeys = await this.getAmmPoolKeys(poolInfo.id);\r\n\r\n    const removeIns = removeLiquidityInstruction({\r\n      poolInfo,\r\n      poolKeys,\r\n      userKeys: {\r\n        lpTokenAccount,\r\n        baseTokenAccount,\r\n        quoteTokenAccount,\r\n        owner: this.scope.ownerPubKey,\r\n      },\r\n      amountIn,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [removeIns],\r\n      instructionTypes: [\r\n        !poolInfo.pooltype.includes(\"StablePool\")\r\n          ? InstructionType.AmmV4RemoveLiquidity\r\n          : InstructionType.AmmV5RemoveLiquidity,\r\n      ],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    });\r\n\r\n    const [tokenAccountA, tokenAccountB] =\r\n      poolInfo.mintA.address === clmmPoolInfo.mintA.address\r\n        ? [baseTokenAccount, quoteTokenAccount]\r\n        : [quoteTokenAccount, baseTokenAccount];\r\n\r\n    const clmmPoolKeys = await this.scope.clmm.getClmmPoolKeys(poolInfo.id);\r\n\r\n    const createPositionIns = await ClmmInstrument.openPositionFromBaseInstructions({\r\n      poolInfo: clmmPoolInfo,\r\n      poolKeys: clmmPoolKeys,\r\n      ownerInfo: {\r\n        feePayer: this.scope.ownerPubKey,\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA,\r\n        tokenAccountB,\r\n      },\r\n      withMetadata: \"create\",\r\n      ...createPositionInfo,\r\n      base,\r\n      getEphemeralSigners,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [...createPositionIns.instructions],\r\n      signers: createPositionIns.signers,\r\n      instructionTypes: [...createPositionIns.instructionTypes],\r\n      lookupTableAddress: clmmPoolKeys.lookupTableAccount ? [clmmPoolKeys.lookupTableAccount] : [],\r\n    });\r\n\r\n    if (txVersion === TxVersion.V0) return txBuilder.sizeCheckBuildV0() as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuild() as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  public async createPoolV4<T extends TxVersion>({\r\n    programId,\r\n    marketInfo,\r\n    baseMintInfo,\r\n    quoteMintInfo,\r\n    baseAmount,\r\n    quoteAmount,\r\n    startTime,\r\n    ownerInfo,\r\n    associatedOnly = false,\r\n    checkCreateATAOwner = false,\r\n    tokenProgram,\r\n    txVersion,\r\n    feeDestinationId,\r\n    computeBudgetConfig,\r\n  }: CreatePoolParam<T>): Promise<MakeTxData<T, { address: CreatePoolAddress }>> {\r\n    const payer = ownerInfo.feePayer || this.scope.owner?.publicKey;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && baseMintInfo.mint.equals(NATIVE_MINT);\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && quoteMintInfo.mint.equals(NATIVE_MINT);\r\n\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    const { account: ownerTokenAccountBase, instructionParams: ownerTokenAccountBaseInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: baseMintInfo.mint,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: mintAUseSOLBalance\r\n          ? {\r\n              payer: payer!,\r\n              amount: baseAmount,\r\n            }\r\n          : undefined,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    txBuilder.addInstruction(ownerTokenAccountBaseInstruction || {});\r\n\r\n    const { account: ownerTokenAccountQuote, instructionParams: ownerTokenAccountQuoteInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: quoteMintInfo.mint,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: mintBUseSOLBalance\r\n          ? {\r\n              payer: payer!,\r\n              amount: quoteAmount,\r\n            }\r\n          : undefined,\r\n\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    txBuilder.addInstruction(ownerTokenAccountQuoteInstruction || {});\r\n\r\n    if (ownerTokenAccountBase === undefined || ownerTokenAccountQuote === undefined)\r\n      throw Error(\"you don't has some token account\");\r\n\r\n    const poolInfo = getAssociatedPoolKeys({\r\n      version: 4,\r\n      marketVersion: 3,\r\n      marketId: marketInfo.marketId,\r\n      baseMint: baseMintInfo.mint,\r\n      quoteMint: quoteMintInfo.mint,\r\n      baseDecimals: baseMintInfo.decimals,\r\n      quoteDecimals: quoteMintInfo.decimals,\r\n      programId,\r\n      marketProgramId: marketInfo.programId,\r\n    });\r\n\r\n    const createPoolKeys = {\r\n      programId,\r\n      ammId: poolInfo.id,\r\n      ammAuthority: poolInfo.authority,\r\n      ammOpenOrders: poolInfo.openOrders,\r\n      lpMint: poolInfo.lpMint,\r\n      coinMint: poolInfo.baseMint,\r\n      pcMint: poolInfo.quoteMint,\r\n      coinVault: poolInfo.baseVault,\r\n      pcVault: poolInfo.quoteVault,\r\n      withdrawQueue: poolInfo.withdrawQueue,\r\n      ammTargetOrders: poolInfo.targetOrders,\r\n      poolTempLp: poolInfo.lpVault,\r\n      marketProgramId: poolInfo.marketProgramId,\r\n      marketId: poolInfo.marketId,\r\n      ammConfigId: poolInfo.configId,\r\n      feeDestinationId,\r\n    };\r\n\r\n    const { instruction, instructionType } = createPoolV4InstructionV2({\r\n      ...createPoolKeys,\r\n      userWallet: this.scope.ownerPubKey,\r\n      userCoinVault: ownerTokenAccountBase,\r\n      userPcVault: ownerTokenAccountQuote,\r\n      userLpVault: getATAAddress(this.scope.ownerPubKey, poolInfo.lpMint, tokenProgram).publicKey,\r\n\r\n      nonce: poolInfo.nonce,\r\n      openTime: startTime,\r\n      coinAmount: baseAmount,\r\n      pcAmount: quoteAmount,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [instruction],\r\n      instructionTypes: [instructionType],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: {\r\n        address: createPoolKeys,\r\n      },\r\n    }) as Promise<MakeTxData<T, { address: CreatePoolAddress }>>;\r\n  }\r\n\r\n  public async getCreatePoolFee({ programId }: { programId: PublicKey }): Promise<BN> {\r\n    const configId = getAssociatedConfigId({ programId });\r\n\r\n    const account = await this.scope.connection.getAccountInfo(configId, { dataSlice: { offset: 536, length: 8 } });\r\n    if (account === null) throw Error(\"get config account error\");\r\n\r\n    return createPoolFeeLayout.decode(account.data).fee;\r\n  }\r\n\r\n  public computeAmountOut({\r\n    poolInfo,\r\n    amountIn,\r\n    mintIn: propMintIn,\r\n    mintOut: propMintOut,\r\n    slippage,\r\n  }: ComputeAmountOutParam): {\r\n    amountOut: BN;\r\n    minAmountOut: BN;\r\n    currentPrice: Decimal;\r\n    executionPrice: Decimal;\r\n    priceImpact: Decimal;\r\n    fee: BN;\r\n  } {\r\n    const [mintIn, mintOut] = [propMintIn.toString(), propMintOut.toString()];\r\n    if (mintIn !== poolInfo.mintA.address && mintIn !== poolInfo.mintB.address) throw new Error(\"toke not match\");\r\n    if (mintOut !== poolInfo.mintA.address && mintOut !== poolInfo.mintB.address) throw new Error(\"toke not match\");\r\n\r\n    const { baseReserve, quoteReserve } = poolInfo;\r\n\r\n    const reserves = [baseReserve, quoteReserve];\r\n\r\n    // input is fixed\r\n    const input = mintIn == poolInfo.mintA.address ? \"base\" : \"quote\";\r\n    if (input === \"quote\") {\r\n      reserves.reverse();\r\n    }\r\n\r\n    const [reserveIn, reserveOut] = reserves;\r\n    const isVersion4 = poolInfo.version === 4;\r\n    let currentPrice: Decimal;\r\n    if (isVersion4) {\r\n      currentPrice = new Decimal(reserveOut.toString()).div(reserveIn.toString());\r\n    } else {\r\n      const p = getStablePrice(\r\n        this.stableLayout.stableModelData,\r\n        baseReserve.toNumber(),\r\n        quoteReserve.toNumber(),\r\n        false,\r\n      );\r\n      if (input === \"quote\") currentPrice = new Decimal(1e6).div(p * 1e6);\r\n      else currentPrice = new Decimal(p * 1e6).div(1e6);\r\n    }\r\n\r\n    const amountInRaw = amountIn;\r\n    let amountOutRaw = new BN(0);\r\n    let feeRaw = new BN(0);\r\n\r\n    if (!amountInRaw.isZero()) {\r\n      if (isVersion4) {\r\n        feeRaw = BNDivCeil(amountInRaw.mul(LIQUIDITY_FEES_NUMERATOR), LIQUIDITY_FEES_DENOMINATOR);\r\n        const amountInWithFee = amountInRaw.sub(feeRaw);\r\n\r\n        const denominator = reserveIn.add(amountInWithFee);\r\n        amountOutRaw = reserveOut.mul(amountInWithFee).div(denominator);\r\n      } else {\r\n        feeRaw = amountInRaw.mul(new BN(2)).div(new BN(10000));\r\n        const amountInWithFee = amountInRaw.sub(feeRaw);\r\n        if (input === \"quote\")\r\n          amountOutRaw = new BN(\r\n            getDyByDxBaseIn(\r\n              this.stableLayout.stableModelData,\r\n              quoteReserve.toNumber(),\r\n              baseReserve.toNumber(),\r\n              amountInWithFee.toNumber(),\r\n            ),\r\n          );\r\n        else {\r\n          amountOutRaw = new BN(\r\n            getDxByDyBaseIn(\r\n              this.stableLayout.stableModelData,\r\n              quoteReserve.toNumber(),\r\n              baseReserve.toNumber(),\r\n              amountInWithFee.toNumber(),\r\n            ),\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    const minAmountOutRaw = new BN(new Decimal(amountOutRaw.toString()).mul(1 - slippage).toFixed(0));\r\n\r\n    const amountOut = amountOutRaw;\r\n    const minAmountOut = minAmountOutRaw;\r\n\r\n    let executionPrice = new Decimal(amountOutRaw.toString()).div(\r\n      new Decimal(amountInRaw.sub(feeRaw).toString()).toFixed(0),\r\n    );\r\n    if (!amountInRaw.isZero() && !amountOutRaw.isZero()) {\r\n      // executionPrice = new Price(currencyIn, amountInRaw.sub(feeRaw), currencyOut, amountOutRaw);\r\n      executionPrice = new Decimal(amountOutRaw.toString()).div(amountInRaw.sub(feeRaw).toString());\r\n    }\r\n\r\n    const priceImpact = currentPrice.sub(executionPrice).div(currentPrice).mul(100);\r\n\r\n    // logger.debug(\"priceImpact:\", `${priceImpact.toSignificant()}%`);\r\n\r\n    const fee = feeRaw;\r\n\r\n    return {\r\n      amountOut,\r\n      minAmountOut,\r\n      currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee,\r\n    };\r\n  }\r\n\r\n  public async swap<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    amountIn,\r\n    amountOut,\r\n    inputMint,\r\n    fixedSide,\r\n    txVersion,\r\n    config,\r\n    computeBudgetConfig,\r\n  }: SwapParam<T>): Promise<MakeTxData<T>> {\r\n    const txBuilder = this.createTxBuilder();\r\n    const { associatedOnly = true, inputUseSolBalance = true, outputUseSolBalance = true } = config || {};\r\n\r\n    const [tokenIn, tokenOut] =\r\n      inputMint === poolInfo.mintA.address ? [poolInfo.mintA, poolInfo.mintB] : [poolInfo.mintB, poolInfo.mintA];\r\n\r\n    const inputTokenUseSolBalance = inputUseSolBalance && tokenIn.address === WSOLMint.toBase58();\r\n    const outputTokenUseSolBalance = outputUseSolBalance && tokenOut.address === WSOLMint.toBase58();\r\n\r\n    const { account: _tokenAccountIn, instructionParams: ownerTokenAccountBaseInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        mint: new PublicKey(tokenIn.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo: inputTokenUseSolBalance\r\n          ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: amountIn,\r\n            }\r\n          : undefined,\r\n        skipCloseAccount: !inputTokenUseSolBalance,\r\n        notUseTokenAccount: inputTokenUseSolBalance,\r\n        associatedOnly,\r\n      });\r\n    txBuilder.addInstruction(ownerTokenAccountBaseInstruction || {});\r\n\r\n    if (!_tokenAccountIn)\r\n      this.logAndCreateError(\"input token account not found\", {\r\n        token: tokenIn.symbol || tokenIn.address,\r\n        tokenAccountIn: _tokenAccountIn,\r\n        inputTokenUseSolBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const { account: _tokenAccountOut, instructionParams: ownerTokenAccountQuoteInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        mint: new PublicKey(tokenOut.address),\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey!,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !outputTokenUseSolBalance,\r\n        notUseTokenAccount: outputTokenUseSolBalance,\r\n        associatedOnly: outputTokenUseSolBalance ? false : associatedOnly,\r\n      });\r\n    txBuilder.addInstruction(ownerTokenAccountQuoteInstruction || {});\r\n    if (_tokenAccountOut === undefined)\r\n      this.logAndCreateError(\"output token account not found\", {\r\n        token: tokenOut.symbol || tokenOut.address,\r\n        tokenAccountOut: _tokenAccountOut,\r\n        outputTokenUseSolBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const poolKeys = propPoolKeys || (await this.getAmmPoolKeys(poolInfo.id));\r\n    let version = 4;\r\n    if (poolInfo.pooltype.includes(\"StablePool\")) version = 5;\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        makeAMMSwapInstruction({\r\n          version,\r\n          poolKeys,\r\n          userKeys: {\r\n            tokenAccountIn: _tokenAccountIn!,\r\n            tokenAccountOut: _tokenAccountOut!,\r\n            owner: this.scope.ownerPubKey,\r\n          },\r\n          amountIn,\r\n          amountOut,\r\n          fixedSide,\r\n        }),\r\n      ],\r\n      instructionTypes: [version === 4 ? InstructionType.AmmV4SwapBaseIn : InstructionType.AmmV5SwapBaseIn],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n    }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async getRpcPoolInfo(poolId: string): Promise<AmmRpcData> {\r\n    return (await this.getRpcPoolInfos([poolId]))[poolId];\r\n  }\r\n\r\n  public async getRpcPoolInfos(\r\n    poolIds: (string | PublicKey)[],\r\n    config?: { batchRequest?: boolean; chunkCount?: number },\r\n  ): Promise<{\r\n    [poolId: string]: AmmRpcData;\r\n  }> {\r\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      poolIds.map((i) => ({ pubkey: new PublicKey(i) })),\r\n      config,\r\n    );\r\n    const poolInfos: { [poolId: string]: ReturnType<typeof liquidityStateV4Layout.decode> & { programId: PublicKey } } =\r\n      {};\r\n\r\n    const needFetchVaults: PublicKey[] = [];\r\n\r\n    for (let i = 0; i < poolIds.length; i++) {\r\n      const item = accounts[i];\r\n      if (item === null || !item.accountInfo) throw Error(\"fetch pool info error: \" + String(poolIds[i]));\r\n      const rpc = liquidityStateV4Layout.decode(item.accountInfo.data);\r\n      poolInfos[String(poolIds[i])] = {\r\n        ...rpc,\r\n        programId: item.accountInfo.owner,\r\n      };\r\n\r\n      needFetchVaults.push(rpc.baseVault, rpc.quoteVault);\r\n    }\r\n\r\n    const vaultInfo: { [vaultId: string]: BN } = {};\r\n    const vaultAccountInfo = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      needFetchVaults.map((i) => ({ pubkey: new PublicKey(i) })),\r\n      config,\r\n    );\r\n\r\n    for (let i = 0; i < needFetchVaults.length; i++) {\r\n      const vaultItemInfo = vaultAccountInfo[i].accountInfo;\r\n      if (vaultItemInfo === null) throw Error(\"fetch vault info error: \" + needFetchVaults[i]);\r\n\r\n      vaultInfo[String(needFetchVaults[i])] = new BN(AccountLayout.decode(vaultItemInfo.data).amount.toString());\r\n    }\r\n\r\n    const returnData: { [poolId: string]: AmmRpcData } = {};\r\n\r\n    for (const [id, info] of Object.entries(poolInfos)) {\r\n      const baseReserve = vaultInfo[info.baseVault.toString()].sub(info.baseNeedTakePnl);\r\n      const quoteReserve = vaultInfo[info.quoteVault.toString()].sub(info.quoteNeedTakePnl);\r\n      returnData[id] = {\r\n        ...info,\r\n        baseReserve,\r\n        mintAAmount: vaultInfo[info.baseVault.toString()],\r\n        mintBAmount: vaultInfo[info.quoteVault.toString()],\r\n        quoteReserve,\r\n        poolPrice: new Decimal(quoteReserve.toString())\r\n          .div(new Decimal(10).pow(info.quoteDecimal.toString()))\r\n          .div(new Decimal(baseReserve.toString()).div(new Decimal(10).pow(info.baseDecimal.toString()))),\r\n      };\r\n    }\r\n\r\n    return returnData;\r\n  }\r\n\r\n  public async getPoolInfoFromRpc({ poolId }: { poolId: string }): Promise<{\r\n    poolRpcData: AmmRpcData;\r\n    poolInfo: ComputeAmountOutParam[\"poolInfo\"];\r\n    poolKeys: AmmV4Keys | AmmV5Keys;\r\n  }> {\r\n    const rpcData = await this.getRpcPoolInfo(poolId);\r\n    const computeData = toAmmComputePoolInfo({ [poolId]: rpcData });\r\n    const poolInfo = computeData[poolId];\r\n    const allKeys = await this.scope.tradeV2.computePoolToPoolKeys({\r\n      pools: [computeData[poolId]],\r\n      ammRpcData: { [poolId]: rpcData },\r\n    });\r\n    return {\r\n      poolRpcData: rpcData,\r\n      poolInfo,\r\n      poolKeys: allKeys[0] as AmmV4Keys | AmmV5Keys,\r\n    };\r\n  }\r\n}\r\n","import { publicKey, struct, u32, u64, u8 } from \"@/marshmallow\";\r\n\r\nexport const SPL_MINT_LAYOUT = struct([\r\n  u32(\"mintAuthorityOption\"),\r\n  publicKey(\"mintAuthority\"),\r\n  u64(\"supply\"),\r\n  u8(\"decimals\"),\r\n  u8(\"isInitialized\"),\r\n  u32(\"freezeAuthorityOption\"),\r\n  publicKey(\"freezeAuthority\"),\r\n]);\r\n\r\nexport type SplMintLayout = typeof SPL_MINT_LAYOUT;\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { MintLayout, RawMint, TOKEN_PROGRAM_ID, TransferFeeConfig } from \"@solana/spl-token\";\r\nimport { Token, TokenAmount } from \"@/module\";\r\nimport { BigNumberish } from \"@/common/bignumber\";\r\nimport { TokenInfo } from \"./type\";\r\nimport { SOL_INFO, TOKEN_WSOL } from \"./constant\";\r\n\r\nimport { ApiV3Token } from \"@/api\";\r\nimport { solToWSol } from \"@/common\";\r\n\r\nexport const parseTokenInfo = async ({\r\n  connection,\r\n  mint,\r\n}: {\r\n  connection: Connection;\r\n  mint: PublicKey | string;\r\n}): Promise<RawMint | undefined> => {\r\n  const accountData = await connection.getAccountInfo(new PublicKey(mint));\r\n  if (!accountData || accountData.data.length !== MintLayout.span) return;\r\n  const tokenInfo = MintLayout.decode(accountData.data);\r\n  return tokenInfo;\r\n};\r\n\r\nexport const toTokenInfo = ({\r\n  mint,\r\n  decimals,\r\n  programId = TOKEN_PROGRAM_ID,\r\n  logoURI = \"\",\r\n  priority = 3,\r\n}: {\r\n  mint: PublicKey;\r\n  decimals: number;\r\n  programId?: PublicKey | string;\r\n  priority?: number;\r\n  logoURI?: string;\r\n}): TokenInfo => {\r\n  const pubStr = mint.toBase58().substring(0, 6);\r\n  return {\r\n    address: mint.toBase58(),\r\n    decimals,\r\n    symbol: pubStr,\r\n    logoURI,\r\n    extensions: {},\r\n    chainId: 101,\r\n    programId: programId.toString(),\r\n    name: pubStr,\r\n    tags: [],\r\n    priority,\r\n  };\r\n};\r\n\r\nexport const toToken = (props: Omit<TokenInfo, \"priority\">): Token =>\r\n  new Token({\r\n    mint: props.address,\r\n    decimals: props.decimals,\r\n    symbol: props.symbol,\r\n    name: props.name,\r\n  });\r\n\r\nexport const toTokenAmount = ({\r\n  amount,\r\n  isRaw,\r\n  name,\r\n  ...props\r\n}: Omit<TokenInfo, \"priority\"> & {\r\n  amount: BigNumberish;\r\n  isRaw?: boolean;\r\n  name?: string;\r\n}): TokenAmount =>\r\n  new TokenAmount(\r\n    new Token({\r\n      mint: solToWSol(props.address).toBase58(),\r\n      decimals: props.decimals,\r\n      symbol: props.symbol,\r\n      name,\r\n    }),\r\n    amount,\r\n    isRaw,\r\n    name,\r\n  );\r\n\r\nexport function solToWSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\r\n  if (token.address === SOL_INFO.address) return TOKEN_WSOL as T;\r\n  return token;\r\n}\r\n\r\nexport function wSolToSolToken<T extends ApiV3Token | TokenInfo>(token: T): T {\r\n  if (token.address === TOKEN_WSOL.address) return SOL_INFO as T;\r\n  return token;\r\n}\r\n\r\nexport const toApiV3Token = ({\r\n  address,\r\n  programId,\r\n  decimals,\r\n  ...props\r\n}: {\r\n  address: string;\r\n  programId: string;\r\n  decimals: number;\r\n} & Partial<ApiV3Token>): ApiV3Token => ({\r\n  chainId: 101,\r\n  address: solToWSol(address).toBase58(),\r\n  programId,\r\n  logoURI: \"\",\r\n  symbol: \"\",\r\n  name: \"\",\r\n  decimals,\r\n  tags: [],\r\n  extensions: props.extensions || {},\r\n  ...props,\r\n});\r\n\r\nexport const toFeeConfig = (config?: TransferFeeConfig): ApiV3Token[\"extensions\"][\"feeConfig\"] | undefined =>\r\n  config\r\n    ? {\r\n        ...config,\r\n        transferFeeConfigAuthority: config.transferFeeConfigAuthority.toBase58(),\r\n        withdrawWithheldAuthority: config.withdrawWithheldAuthority.toBase58(),\r\n        withheldAmount: config.withheldAmount.toString(),\r\n        olderTransferFee: {\r\n          ...config.olderTransferFee,\r\n          epoch: config.olderTransferFee.epoch.toString(),\r\n          maximumFee: config.olderTransferFee.maximumFee.toString(),\r\n        },\r\n        newerTransferFee: {\r\n          ...config.newerTransferFee,\r\n          epoch: config.newerTransferFee.epoch.toString(),\r\n          maximumFee: config.newerTransferFee.maximumFee.toString(),\r\n        },\r\n      }\r\n    : undefined;\r\n","import { TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { PublicKey, TransactionInstruction, SystemProgram, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\r\n\r\nimport { parseBigNumberish, BN_ZERO, BN_ONE } from \"@/common/bignumber\";\r\nimport { InstructionType } from \"@/common/txTool/txType\";\r\nimport { createLogger } from \"@/common/logger\";\r\nimport { accountMeta, RENT_PROGRAM_ID } from \"@/common/pubKey\";\r\nimport { AmmV4Keys, AmmV5Keys } from \"@/api/type\";\r\nimport { struct, u8, u64 } from \"@/marshmallow\";\r\n\r\nimport {\r\n  addLiquidityLayout,\r\n  removeLiquidityLayout,\r\n  fixedSwapInLayout,\r\n  fixedSwapOutLayout,\r\n  initPoolLayout,\r\n} from \"./layout\";\r\nimport { MODEL_DATA_PUBKEY } from \"./stable\";\r\nimport {\r\n  LiquidityAddInstructionParams,\r\n  RemoveLiquidityInstruction,\r\n  SwapFixedInInstructionParamsV4,\r\n  SwapFixedOutInstructionParamsV4,\r\n  SwapInstructionParams,\r\n  InitPoolInstructionParamsV4,\r\n} from \"./type\";\r\nimport { jsonInfo2PoolKeys } from \"@/common/utility\";\r\nimport { InstructionReturn } from \"../type\";\r\nimport BN from \"bn.js\";\r\n\r\nconst logger = createLogger(\"Raydium_liquidity_instruction\");\r\nexport function makeAddLiquidityInstruction(params: LiquidityAddInstructionParams): TransactionInstruction {\r\n  const { poolInfo, poolKeys, userKeys, baseAmountIn, quoteAmountIn, fixedSide } = params;\r\n\r\n  const data = Buffer.alloc(addLiquidityLayout.span);\r\n  addLiquidityLayout.encode(\r\n    {\r\n      instruction: 3,\r\n      baseAmountIn: parseBigNumberish(baseAmountIn),\r\n      quoteAmountIn: parseBigNumberish(quoteAmountIn),\r\n      fixedSide: fixedSide === \"base\" ? BN_ZERO : BN_ONE,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    // amm\r\n    accountMeta({ pubkey: new PublicKey(poolInfo.id) }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.targetOrders) }),\r\n    accountMeta({ pubkey: new PublicKey(poolInfo.lpMint.address) }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A) }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B) }),\r\n  ];\r\n\r\n  if (poolInfo.pooltype.includes(\"StablePool\")) {\r\n    keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\r\n  }\r\n\r\n  keys.push(\r\n    // serum\r\n    accountMeta({ pubkey: new PublicKey(poolInfo.marketId), isWritable: false }),\r\n    // user\r\n    accountMeta({ pubkey: userKeys.baseTokenAccount }),\r\n    accountMeta({ pubkey: userKeys.quoteTokenAccount }),\r\n    accountMeta({ pubkey: userKeys.lpTokenAccount }),\r\n    accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    programId: new PublicKey(poolInfo.programId),\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function removeLiquidityInstruction(params: RemoveLiquidityInstruction): TransactionInstruction {\r\n  const { poolInfo, poolKeys: poolKeyProps, userKeys, amountIn } = params;\r\n  const poolKeys = jsonInfo2PoolKeys(poolKeyProps);\r\n\r\n  let version = 4;\r\n  if (poolInfo.pooltype.includes(\"StablePool\")) version = 5;\r\n\r\n  if (version === 4 || version === 5) {\r\n    const data = Buffer.alloc(removeLiquidityLayout.span);\r\n    removeLiquidityLayout.encode(\r\n      {\r\n        instruction: 4,\r\n        amountIn: parseBigNumberish(amountIn),\r\n      },\r\n      data,\r\n    );\r\n\r\n    const keys = [\r\n      // system\r\n      accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n      // amm\r\n      accountMeta({ pubkey: poolKeys.id }),\r\n      accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\r\n      accountMeta({ pubkey: poolKeys.openOrders }),\r\n      accountMeta({ pubkey: poolKeys.targetOrders }),\r\n      accountMeta({ pubkey: poolKeys.mintLp.address }),\r\n      accountMeta({ pubkey: poolKeys.vault.A }),\r\n      accountMeta({ pubkey: poolKeys.vault.B }),\r\n    ];\r\n\r\n    if (version === 5) {\r\n      keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\r\n    } else {\r\n      keys.push(accountMeta({ pubkey: poolKeys.id }));\r\n      keys.push(accountMeta({ pubkey: poolKeys.id }));\r\n    }\r\n\r\n    keys.push(\r\n      // serum\r\n      accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\r\n      accountMeta({ pubkey: poolKeys.marketId }),\r\n      accountMeta({ pubkey: poolKeys.marketBaseVault }),\r\n      accountMeta({ pubkey: poolKeys.marketQuoteVault }),\r\n      accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\r\n      // user\r\n      accountMeta({ pubkey: userKeys.lpTokenAccount }),\r\n      accountMeta({ pubkey: userKeys.baseTokenAccount }),\r\n      accountMeta({ pubkey: userKeys.quoteTokenAccount }),\r\n      accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\r\n      // serum orderbook\r\n      accountMeta({ pubkey: poolKeys.marketEventQueue }),\r\n      accountMeta({ pubkey: poolKeys.marketBids }),\r\n      accountMeta({ pubkey: poolKeys.marketAsks }),\r\n    );\r\n\r\n    return new TransactionInstruction({\r\n      programId: poolKeys.programId,\r\n      keys,\r\n      data,\r\n    });\r\n  }\r\n\r\n  // logger.logWithError(\"invalid version\", \"poolKeys.version\", version);\r\n  return new TransactionInstruction({ programId: poolKeys.programId, keys: [] }); // won't reach\r\n}\r\n\r\nexport function createPoolV4InstructionV2({\r\n  programId,\r\n  ammId,\r\n  ammAuthority,\r\n  ammOpenOrders,\r\n  lpMint,\r\n  coinMint,\r\n  pcMint,\r\n  coinVault,\r\n  pcVault,\r\n  withdrawQueue,\r\n  ammTargetOrders,\r\n  poolTempLp,\r\n  marketProgramId,\r\n  marketId,\r\n  userWallet,\r\n  userCoinVault,\r\n  userPcVault,\r\n  userLpVault,\r\n  nonce,\r\n  openTime,\r\n  coinAmount,\r\n  pcAmount,\r\n  ammConfigId,\r\n  feeDestinationId,\r\n}: {\r\n  programId: PublicKey;\r\n  ammId: PublicKey;\r\n  ammAuthority: PublicKey;\r\n  ammOpenOrders: PublicKey;\r\n  lpMint: PublicKey;\r\n  coinMint: PublicKey;\r\n  pcMint: PublicKey;\r\n  coinVault: PublicKey;\r\n  pcVault: PublicKey;\r\n  withdrawQueue: PublicKey;\r\n  ammTargetOrders: PublicKey;\r\n  poolTempLp: PublicKey;\r\n  marketProgramId: PublicKey;\r\n  marketId: PublicKey;\r\n  userWallet: PublicKey;\r\n  userCoinVault: PublicKey;\r\n  userPcVault: PublicKey;\r\n  userLpVault: PublicKey;\r\n  ammConfigId: PublicKey;\r\n  feeDestinationId: PublicKey;\r\n\r\n  nonce: number;\r\n  openTime: BN;\r\n  coinAmount: BN;\r\n  pcAmount: BN;\r\n}): InstructionReturn {\r\n  const dataLayout = struct([u8(\"instruction\"), u8(\"nonce\"), u64(\"openTime\"), u64(\"pcAmount\"), u64(\"coinAmount\")]);\r\n\r\n  const keys = [\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: ammId, isSigner: false, isWritable: true },\r\n    { pubkey: ammAuthority, isSigner: false, isWritable: false },\r\n    { pubkey: ammOpenOrders, isSigner: false, isWritable: true },\r\n    { pubkey: lpMint, isSigner: false, isWritable: true },\r\n    { pubkey: coinMint, isSigner: false, isWritable: false },\r\n    { pubkey: pcMint, isSigner: false, isWritable: false },\r\n    { pubkey: coinVault, isSigner: false, isWritable: true },\r\n    { pubkey: pcVault, isSigner: false, isWritable: true }, //12\r\n    { pubkey: ammTargetOrders, isSigner: false, isWritable: true }, //13\r\n    { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n    { pubkey: feeDestinationId, isSigner: false, isWritable: true },\r\n    { pubkey: marketProgramId, isSigner: false, isWritable: false },\r\n    { pubkey: marketId, isSigner: false, isWritable: false },\r\n    { pubkey: userWallet, isSigner: true, isWritable: true },\r\n    { pubkey: userCoinVault, isSigner: false, isWritable: true },\r\n    { pubkey: userPcVault, isSigner: false, isWritable: true },\r\n    { pubkey: userLpVault, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode({ instruction: 1, nonce, openTime, coinAmount, pcAmount }, data);\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data,\r\n    }),\r\n    instructionType: InstructionType.AmmV4CreatePool,\r\n  };\r\n}\r\n\r\nexport function simulatePoolInfoInstruction(poolKeys: AmmV4Keys | AmmV5Keys): TransactionInstruction {\r\n  const simulatePoolLayout = struct([u8(\"instruction\"), u8(\"simulateType\")]);\r\n  const data = Buffer.alloc(simulatePoolLayout.span);\r\n  simulatePoolLayout.encode(\r\n    {\r\n      instruction: 12,\r\n      simulateType: 0,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    // amm\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.id), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.mintLp.address), isWritable: false }),\r\n    // serum\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketId), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\r\n  ];\r\n\r\n  return new TransactionInstruction({\r\n    programId: new PublicKey(poolKeys.programId),\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function makeSwapFixedInInstruction(\r\n  { poolKeys: propPoolKeys, userKeys, amountIn, minAmountOut }: SwapFixedInInstructionParamsV4,\r\n  version: number,\r\n): TransactionInstruction {\r\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\r\n  const data = Buffer.alloc(fixedSwapInLayout.span);\r\n  fixedSwapInLayout.encode(\r\n    {\r\n      instruction: 9,\r\n      amountIn: parseBigNumberish(amountIn),\r\n      minAmountOut: parseBigNumberish(minAmountOut),\r\n    },\r\n    data,\r\n  );\r\n  const keys = [\r\n    // amm\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.id }),\r\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.openOrders }),\r\n  ];\r\n\r\n  if (version === 4) keys.push(accountMeta({ pubkey: poolKeys.targetOrders }));\r\n  keys.push(accountMeta({ pubkey: poolKeys.vault.A }), accountMeta({ pubkey: poolKeys.vault.B }));\r\n  if (version === 5) keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\r\n  keys.push(\r\n    // serum\r\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.marketId }),\r\n    accountMeta({ pubkey: poolKeys.marketBids }),\r\n    accountMeta({ pubkey: poolKeys.marketAsks }),\r\n    accountMeta({ pubkey: poolKeys.marketEventQueue }),\r\n    accountMeta({ pubkey: poolKeys.marketBaseVault }),\r\n    accountMeta({ pubkey: poolKeys.marketQuoteVault }),\r\n    accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\r\n    // user\r\n    accountMeta({ pubkey: userKeys.tokenAccountIn }),\r\n    accountMeta({ pubkey: userKeys.tokenAccountOut }),\r\n    accountMeta({ pubkey: userKeys.owner, isWritable: false }),\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    programId: poolKeys.programId,\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function makeSwapFixedOutInstruction(\r\n  { poolKeys: propPoolKeys, userKeys, maxAmountIn, amountOut }: SwapFixedOutInstructionParamsV4,\r\n  version: number,\r\n): TransactionInstruction {\r\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\r\n  const data = Buffer.alloc(fixedSwapOutLayout.span);\r\n  fixedSwapOutLayout.encode(\r\n    {\r\n      instruction: 11,\r\n      maxAmountIn: parseBigNumberish(maxAmountIn),\r\n      amountOut: parseBigNumberish(amountOut),\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    // amm\r\n    accountMeta({ pubkey: poolKeys.id }),\r\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.openOrders }),\r\n    accountMeta({ pubkey: poolKeys.targetOrders }),\r\n    accountMeta({ pubkey: poolKeys.vault.A }),\r\n    accountMeta({ pubkey: poolKeys.vault.B }),\r\n  ];\r\n\r\n  if (version === 5) keys.push(accountMeta({ pubkey: MODEL_DATA_PUBKEY }));\r\n\r\n  keys.push(\r\n    // serum\r\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.marketId }),\r\n    accountMeta({ pubkey: poolKeys.marketBids }),\r\n    accountMeta({ pubkey: poolKeys.marketAsks }),\r\n    accountMeta({ pubkey: poolKeys.marketEventQueue }),\r\n    accountMeta({ pubkey: poolKeys.marketBaseVault }),\r\n    accountMeta({ pubkey: poolKeys.marketQuoteVault }),\r\n    accountMeta({ pubkey: poolKeys.marketAuthority, isWritable: false }),\r\n    accountMeta({ pubkey: userKeys.tokenAccountIn }),\r\n    accountMeta({ pubkey: userKeys.tokenAccountOut }),\r\n    accountMeta({ pubkey: userKeys.owner, isWritable: false, isSigner: true }),\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    programId: poolKeys.programId,\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function makeAMMSwapInstruction(params: SwapInstructionParams): TransactionInstruction {\r\n  const { poolKeys, version, userKeys, amountIn, amountOut, fixedSide } = params;\r\n  if (version === 4 || version === 5) {\r\n    const props = { poolKeys, userKeys };\r\n    if (fixedSide === \"in\") {\r\n      return makeSwapFixedInInstruction(\r\n        {\r\n          ...props,\r\n          amountIn,\r\n          minAmountOut: amountOut,\r\n        },\r\n        version,\r\n      );\r\n    } else if (fixedSide === \"out\") {\r\n      return makeSwapFixedOutInstruction(\r\n        {\r\n          ...props,\r\n          maxAmountIn: amountIn,\r\n          amountOut,\r\n        },\r\n        version,\r\n      );\r\n    }\r\n    logger.logWithError(\"invalid params\", \"params\", params);\r\n  }\r\n\r\n  logger.logWithError(\"invalid version\", \"poolKeys.version\", version);\r\n  throw new Error(\"invalid version\");\r\n}\r\n\r\nexport function makeInitPoolInstructionV4({\r\n  poolKeys: propPoolKeys,\r\n  userKeys,\r\n  startTime,\r\n}: InitPoolInstructionParamsV4): TransactionInstruction {\r\n  const data = Buffer.alloc(initPoolLayout.span);\r\n  initPoolLayout.encode(\r\n    {\r\n      instruction: 0,\r\n      // nonce: poolKeys.nonce, // to do fix\r\n      nonce: 5,\r\n      startTime: parseBigNumberish(startTime),\r\n    },\r\n    data,\r\n  );\r\n  const poolKeys = jsonInfo2PoolKeys(propPoolKeys);\r\n\r\n  const keys = [\r\n    // system\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: SYSVAR_RENT_PUBKEY, isWritable: false }),\r\n    // amm\r\n    accountMeta({ pubkey: poolKeys.id }),\r\n    accountMeta({ pubkey: poolKeys.authority, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.openOrders }),\r\n    accountMeta({ pubkey: poolKeys.mintLp.address }),\r\n    accountMeta({ pubkey: poolKeys.mintA.address, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.mintB.address, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.vault.A, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.vault.B, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.id }),\r\n    accountMeta({ pubkey: poolKeys.targetOrders }),\r\n    accountMeta({ pubkey: userKeys.lpTokenAccount }),\r\n    accountMeta({ pubkey: poolKeys.id, isWritable: false }),\r\n    // serum\r\n    accountMeta({ pubkey: poolKeys.marketProgramId, isWritable: false }),\r\n    accountMeta({ pubkey: poolKeys.marketId, isWritable: false }),\r\n    // user\r\n    accountMeta({ pubkey: userKeys.payer, isSigner: true }),\r\n  ];\r\n\r\n  return new TransactionInstruction({\r\n    programId: poolKeys.programId,\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function makeSimulatePoolInfoInstruction({ poolKeys }: { poolKeys: AmmV4Keys | AmmV5Keys }): {\r\n  instruction: TransactionInstruction;\r\n} {\r\n  const LAYOUT = struct([u8(\"instruction\"), u8(\"simulateType\")]);\r\n  const data = Buffer.alloc(LAYOUT.span);\r\n  LAYOUT.encode(\r\n    {\r\n      instruction: 12,\r\n      simulateType: 0,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    // amm\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.id), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.authority), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.openOrders), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.A), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.vault.B), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.mintLp.address), isWritable: false }),\r\n    // serum\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketId), isWritable: false }),\r\n    accountMeta({ pubkey: new PublicKey(poolKeys.marketEventQueue), isWritable: false }),\r\n  ];\r\n\r\n  return {\r\n    instruction: new TransactionInstruction({\r\n      programId: new PublicKey(poolKeys.programId),\r\n      keys,\r\n      data,\r\n    }),\r\n  };\r\n}\r\n","import { GetStructureSchema, publicKey, seq, struct, u128, u64, u8, u16, blob, bool } from \"@/marshmallow\";\r\n\r\nexport const fixedSwapInLayout = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"minAmountOut\")]);\r\nexport const fixedSwapOutLayout = struct([u8(\"instruction\"), u64(\"maxAmountIn\"), u64(\"amountOut\")]);\r\n\r\nexport const createPoolV4Layout = struct([u8(\"instruction\"), u8(\"nonce\")]);\r\nexport const initPoolLayout = struct([u8(\"instruction\"), u8(\"nonce\"), u64(\"startTime\")]);\r\n/* ================= state layouts ================= */\r\nexport const liquidityStateV4Layout = struct([\r\n  u64(\"status\"),\r\n  u64(\"nonce\"),\r\n  u64(\"maxOrder\"),\r\n  u64(\"depth\"),\r\n  u64(\"baseDecimal\"),\r\n  u64(\"quoteDecimal\"),\r\n  u64(\"state\"),\r\n  u64(\"resetFlag\"),\r\n  u64(\"minSize\"),\r\n  u64(\"volMaxCutRatio\"),\r\n  u64(\"amountWaveRatio\"),\r\n  u64(\"baseLotSize\"),\r\n  u64(\"quoteLotSize\"),\r\n  u64(\"minPriceMultiplier\"),\r\n  u64(\"maxPriceMultiplier\"),\r\n  u64(\"systemDecimalValue\"),\r\n  u64(\"minSeparateNumerator\"),\r\n  u64(\"minSeparateDenominator\"),\r\n  u64(\"tradeFeeNumerator\"),\r\n  u64(\"tradeFeeDenominator\"),\r\n  u64(\"pnlNumerator\"),\r\n  u64(\"pnlDenominator\"),\r\n  u64(\"swapFeeNumerator\"),\r\n  u64(\"swapFeeDenominator\"),\r\n  u64(\"baseNeedTakePnl\"),\r\n  u64(\"quoteNeedTakePnl\"),\r\n  u64(\"quoteTotalPnl\"),\r\n  u64(\"baseTotalPnl\"),\r\n  u64(\"poolOpenTime\"),\r\n  u64(\"punishPcAmount\"),\r\n  u64(\"punishCoinAmount\"),\r\n  u64(\"orderbookToInitTime\"),\r\n  // u128('poolTotalDepositPc'),\r\n  // u128('poolTotalDepositCoin'),\r\n  u128(\"swapBaseInAmount\"),\r\n  u128(\"swapQuoteOutAmount\"),\r\n  u64(\"swapBase2QuoteFee\"),\r\n  u128(\"swapQuoteInAmount\"),\r\n  u128(\"swapBaseOutAmount\"),\r\n  u64(\"swapQuote2BaseFee\"),\r\n  // amm vault\r\n  publicKey(\"baseVault\"),\r\n  publicKey(\"quoteVault\"),\r\n  // mint\r\n  publicKey(\"baseMint\"),\r\n  publicKey(\"quoteMint\"),\r\n  publicKey(\"lpMint\"),\r\n  // market\r\n  publicKey(\"openOrders\"),\r\n  publicKey(\"marketId\"),\r\n  publicKey(\"marketProgramId\"),\r\n  publicKey(\"targetOrders\"),\r\n  publicKey(\"withdrawQueue\"),\r\n  publicKey(\"lpVault\"),\r\n  publicKey(\"owner\"),\r\n  // true circulating supply without lock up\r\n  u64(\"lpReserve\"),\r\n  seq(u64(), 3, \"padding\"),\r\n]);\r\n\r\nexport type LiquidityStateLayoutV4 = typeof liquidityStateV4Layout;\r\nexport type LiquidityStateV4 = GetStructureSchema<LiquidityStateLayoutV4>;\r\n\r\nexport const liquidityStateV5Layout = struct([\r\n  u64(\"accountType\"),\r\n  u64(\"status\"),\r\n  u64(\"nonce\"),\r\n  u64(\"maxOrder\"),\r\n  u64(\"depth\"),\r\n  u64(\"baseDecimal\"),\r\n  u64(\"quoteDecimal\"),\r\n  u64(\"state\"),\r\n  u64(\"resetFlag\"),\r\n  u64(\"minSize\"),\r\n  u64(\"volMaxCutRatio\"),\r\n  u64(\"amountWaveRatio\"),\r\n  u64(\"baseLotSize\"),\r\n  u64(\"quoteLotSize\"),\r\n  u64(\"minPriceMultiplier\"),\r\n  u64(\"maxPriceMultiplier\"),\r\n  u64(\"systemDecimalsValue\"),\r\n  u64(\"abortTradeFactor\"),\r\n  u64(\"priceTickMultiplier\"),\r\n  u64(\"priceTick\"),\r\n  // Fees\r\n  u64(\"minSeparateNumerator\"),\r\n  u64(\"minSeparateDenominator\"),\r\n  u64(\"tradeFeeNumerator\"),\r\n  u64(\"tradeFeeDenominator\"),\r\n  u64(\"pnlNumerator\"),\r\n  u64(\"pnlDenominator\"),\r\n  u64(\"swapFeeNumerator\"),\r\n  u64(\"swapFeeDenominator\"),\r\n  // OutPutData\r\n  u64(\"baseNeedTakePnl\"),\r\n  u64(\"quoteNeedTakePnl\"),\r\n  u64(\"quoteTotalPnl\"),\r\n  u64(\"baseTotalPnl\"),\r\n  u64(\"poolOpenTime\"),\r\n  u64(\"punishPcAmount\"),\r\n  u64(\"punishCoinAmount\"),\r\n  u64(\"orderbookToInitTime\"),\r\n  u128(\"swapBaseInAmount\"),\r\n  u128(\"swapQuoteOutAmount\"),\r\n  u128(\"swapQuoteInAmount\"),\r\n  u128(\"swapBaseOutAmount\"),\r\n  u64(\"swapQuote2BaseFee\"),\r\n  u64(\"swapBase2QuoteFee\"),\r\n\r\n  publicKey(\"baseVault\"),\r\n  publicKey(\"quoteVault\"),\r\n  publicKey(\"baseMint\"),\r\n  publicKey(\"quoteMint\"),\r\n  publicKey(\"lpMint\"),\r\n\r\n  publicKey(\"modelDataAccount\"),\r\n  publicKey(\"openOrders\"),\r\n  publicKey(\"marketId\"),\r\n  publicKey(\"marketProgramId\"),\r\n  publicKey(\"targetOrders\"),\r\n  publicKey(\"owner\"),\r\n  seq(u64(), 64, \"padding\"),\r\n]);\r\n\r\nexport const addLiquidityLayout = struct([\r\n  u8(\"instruction\"),\r\n  u64(\"baseAmountIn\"),\r\n  u64(\"quoteAmountIn\"),\r\n  u64(\"fixedSide\"),\r\n]);\r\n\r\nexport const removeLiquidityLayout = struct([u8(\"instruction\"), u64(\"amountIn\")]);\r\n\r\nexport type LiquidityStateLayoutV5 = typeof liquidityStateV5Layout;\r\nexport type LiquidityStateV5 = GetStructureSchema<LiquidityStateLayoutV5>;\r\n\r\nexport type LiquidityState = LiquidityStateV4 | LiquidityStateV5;\r\nexport type LiquidityStateLayout = LiquidityStateLayoutV4 | LiquidityStateLayoutV5;\r\n\r\n/* ================= index ================= */\r\n// version => liquidity state layout\r\nexport const LIQUIDITY_VERSION_TO_STATE_LAYOUT: {\r\n  [version: number]: LiquidityStateLayout;\r\n} = {\r\n  4: liquidityStateV4Layout,\r\n  5: liquidityStateV5Layout,\r\n};\r\nexport const createPoolFeeLayout = struct([u64(\"fee\")]);\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { seq, struct, u64 } from \"@/marshmallow\";\r\n\r\nexport const MODEL_DATA_PUBKEY = new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\");\r\nconst ELEMENT_SIZE = 50000;\r\n\r\nexport const DataElement = struct([u64(\"x\"), u64(\"y\"), u64(\"price\")]);\r\n\r\nexport const modelDataInfoLayout = struct([\r\n  u64(\"accountType\"),\r\n  u64(\"status\"),\r\n  u64(\"multiplier\"),\r\n  u64(\"validDataCount\"),\r\n  seq(DataElement, ELEMENT_SIZE, \"DataElement\"),\r\n]);\r\n\r\nexport interface StableModelLayout {\r\n  accountType: number;\r\n  status: number;\r\n  multiplier: number;\r\n  validDataCount: number;\r\n  DataElement: { x: number; y: number; price: number }[];\r\n}\r\n\r\nfunction estimateRangeByXyReal(_xReal: number, _yReal: number): number[] {\r\n  return [0, ELEMENT_SIZE - 2];\r\n}\r\n\r\nfunction estimateRangeByX(_x: number): number[] {\r\n  return [0, ELEMENT_SIZE - 2];\r\n}\r\n\r\nfunction estimateRangeByY(_y: number): number[] {\r\n  return [0, ELEMENT_SIZE - 2];\r\n}\r\n\r\nfunction getMininumRangeByXyReal(\r\n  layoutData: StableModelLayout,\r\n  xReal: number,\r\n  yReal: number,\r\n): [number, number, boolean] {\r\n  const [min, max] = estimateRangeByXyReal(xReal, yReal);\r\n  let minRangeIdx = min;\r\n  let maxRangeIdx = max;\r\n  let mid = 0;\r\n  const target = (xReal * layoutData.multiplier) / yReal;\r\n  while (minRangeIdx <= maxRangeIdx) {\r\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\r\n    if (mid === 0 || mid >= ELEMENT_SIZE - 2) {\r\n      return [mid, mid, false];\r\n    }\r\n    const cur = (layoutData.DataElement[mid].x * layoutData.multiplier) / layoutData.DataElement[mid].y;\r\n    const left = (layoutData.DataElement[mid - 1].x * layoutData.multiplier) / layoutData.DataElement[mid - 1].y;\r\n    const right = (layoutData.DataElement[mid + 1].x * layoutData.multiplier) / layoutData.DataElement[mid + 1].y;\r\n\r\n    if (target === cur) {\r\n      return [mid, mid, true];\r\n    } else if (target === left) {\r\n      return [mid - 1, mid - 1, true];\r\n    } else if (target === right) {\r\n      return [mid + 1, mid + 1, true];\r\n    } else if (target < left) {\r\n      maxRangeIdx = mid - 1;\r\n    } else if (target > left && target < cur) {\r\n      return [mid - 1, mid, true];\r\n    } else if (target > cur && target < right) {\r\n      return [mid, mid + 1, true];\r\n    } else {\r\n      minRangeIdx = mid + 1;\r\n    }\r\n  }\r\n  return [mid, mid, false];\r\n}\r\nfunction getRatio(layoutData: StableModelLayout, xReal: number, yReal: number): number {\r\n  const [minRangeIdx, maxRangeIdx, find] = getMininumRangeByXyReal(layoutData, xReal, yReal);\r\n\r\n  if (!find) {\r\n    return 0;\r\n  }\r\n\r\n  if (minRangeIdx === maxRangeIdx) {\r\n    const x = layoutData.DataElement[minRangeIdx].x;\r\n    const ratio = (xReal * layoutData.multiplier) / x;\r\n    return ratio;\r\n  } else {\r\n    const x1 = layoutData.DataElement[minRangeIdx].x;\r\n    const y1 = layoutData.DataElement[minRangeIdx].y;\r\n    const x2 = layoutData.DataElement[maxRangeIdx].x;\r\n    const y2 = layoutData.DataElement[maxRangeIdx].y;\r\n\r\n    const xDenominator = yReal * (x2 * y1 - x1 * y2);\r\n    const xNumerator1 = x1 * xDenominator;\r\n    const xNumerator2 = (x2 - x1) * (xReal * y1 - x1 * yReal) * y2;\r\n\r\n    const xNumerator = xNumerator1 + xNumerator2;\r\n    const ratio = (xReal * layoutData.multiplier * xDenominator) / xNumerator;\r\n    return ratio;\r\n  }\r\n}\r\n\r\nfunction realToTable(layoutData: StableModelLayout, realValue: number, ratio: number): number {\r\n  return (realValue * layoutData.multiplier) / ratio;\r\n}\r\n\r\nfunction tableToReal(layoutData: StableModelLayout, tableValue: number, ratio: number): number {\r\n  return (tableValue * ratio) / layoutData.multiplier;\r\n}\r\n\r\nfunction getMinimumRangeByX(layoutData: StableModelLayout, x: number): [number, number, boolean] {\r\n  const [min, max] = estimateRangeByX(x);\r\n  let minRangeIdx = min;\r\n  let maxRangeIdx = max;\r\n  let mid = 0;\r\n  const target = x;\r\n  while (minRangeIdx < maxRangeIdx) {\r\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\r\n\r\n    if (mid <= 0 || mid > ELEMENT_SIZE - 2) {\r\n      return [mid, mid, false];\r\n    }\r\n    const cur = layoutData.DataElement[mid].x;\r\n    const left = layoutData.DataElement[mid - 1].x;\r\n    const right = layoutData.DataElement[mid + 1].x;\r\n\r\n    if (target === cur) return [mid, mid, true];\r\n    else if (target === left) return [mid - 1, mid - 1, true];\r\n    else if (target === right) return [mid + 1, mid + 1, true];\r\n    else if (target < left) maxRangeIdx = mid - 1;\r\n    else if (target > left && target < cur) return [mid - 1, mid, true];\r\n    else if (target > cur && target < right) return [mid, mid + 1, true];\r\n    else minRangeIdx = mid + 1;\r\n  }\r\n  return [mid, mid, false];\r\n}\r\n\r\nfunction getMinimumRangeByY(layoutData: StableModelLayout, y: number): [number, number, boolean] {\r\n  const [min, max] = estimateRangeByY(y);\r\n  let minRangeIdx = min;\r\n  let maxRangeIdx = max;\r\n  let mid = 0;\r\n  const target = y;\r\n  while (minRangeIdx <= maxRangeIdx) {\r\n    mid = Math.floor((maxRangeIdx + minRangeIdx) / 2);\r\n    if (mid <= 0 || mid >= ELEMENT_SIZE - 2) {\r\n      return [mid, mid, false];\r\n    }\r\n\r\n    const cur = layoutData.DataElement[mid].y;\r\n    const left = layoutData.DataElement[mid - 1].y;\r\n    const right = layoutData.DataElement[mid + 1].y;\r\n    if (target === cur) return [mid, mid, true];\r\n    else if (target === left) return [mid - 1, mid - 1, true];\r\n    else if (target === right) return [mid + 1, mid + 1, true];\r\n    else if (target < right) {\r\n      minRangeIdx = mid + 1;\r\n    } else if (target < left && target > cur) return [mid - 1, mid, true];\r\n    else if (target < cur && target > right) return [mid, mid + 1, true];\r\n    else maxRangeIdx = mid - 1;\r\n  }\r\n  return [mid, mid, false];\r\n}\r\n\r\nfunction getDataByX(\r\n  layoutData: StableModelLayout,\r\n  x: number,\r\n  dx: number,\r\n  priceUp: boolean,\r\n): [number, number, boolean, boolean] {\r\n  const xWithDx = priceUp ? x + dx : x - dx;\r\n  const [minIdx, maxIdx, find] = getMinimumRangeByX(layoutData, xWithDx);\r\n  if (!find) return [0, 0, false, find];\r\n\r\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].y, false, find];\r\n  else {\r\n    const x1 = layoutData.DataElement[minIdx].x;\r\n    const x2 = layoutData.DataElement[maxIdx].x;\r\n    const p1 = layoutData.DataElement[minIdx].price;\r\n    const p2 = layoutData.DataElement[maxIdx].price;\r\n    const y1 = layoutData.DataElement[minIdx].y;\r\n    const y2 = layoutData.DataElement[maxIdx].y;\r\n\r\n    if (x >= x1 && x <= x2) {\r\n      if (priceUp) return [p2, y2, true, find];\r\n      else return [p1, y1, true, find];\r\n    } else {\r\n      let p, y;\r\n      if (priceUp) {\r\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\r\n        y = y1 - ((xWithDx - x1) * layoutData.multiplier) / p2;\r\n      } else {\r\n        p = p1 + ((p2 - p1) * (x - x1)) / (x2 - x1);\r\n        y = y2 + ((x2 - xWithDx) * layoutData.multiplier) / p1;\r\n      }\r\n      return [p, y, false, find];\r\n    }\r\n  }\r\n}\r\n\r\nfunction getDataByY(\r\n  layoutData: StableModelLayout,\r\n  y: number,\r\n  dy: number,\r\n  priceUp: boolean,\r\n): [number, number, boolean, boolean] {\r\n  const yWithDy = priceUp ? y - dy : y + dy;\r\n  const [minIdx, maxIdx, find] = getMinimumRangeByY(layoutData, yWithDy);\r\n  if (!find) return [0, 0, false, find];\r\n  if (minIdx === maxIdx) return [layoutData.DataElement[maxIdx].price, layoutData.DataElement[maxIdx].x, false, find];\r\n  else {\r\n    const x1 = layoutData.DataElement[minIdx].x;\r\n    const x2 = layoutData.DataElement[maxIdx].x;\r\n    const p1 = layoutData.DataElement[minIdx].price;\r\n    const p2 = layoutData.DataElement[maxIdx].price;\r\n    const y1 = layoutData.DataElement[minIdx].y;\r\n    const y2 = layoutData.DataElement[maxIdx].y;\r\n\r\n    if (y >= y2 && y <= y1) {\r\n      return priceUp ? [p2, x2, true, find] : [p1, x1, true, find];\r\n    } else {\r\n      let p, x;\r\n      if (priceUp) {\r\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\r\n        x = x1 + (p2 * (y1 - yWithDy)) / layoutData.multiplier;\r\n      } else {\r\n        p = p1 + ((p2 - p1) * (y1 - y)) / (y1 - y2);\r\n        x = x2 - (p1 * (yWithDy - y2)) / layoutData.multiplier;\r\n      }\r\n      return [p, x, false, find];\r\n    }\r\n  }\r\n}\r\n\r\nfunction getMidPrice(layoutData: StableModelLayout, x: number): number {\r\n  const ret = getDataByX(layoutData, x, 0, false);\r\n  if (ret[3]) return ret[0];\r\n  else return 0;\r\n}\r\n\r\nexport function getDyByDxBaseIn(layoutData: StableModelLayout, xReal: number, yReal: number, dxReal: number): number {\r\n  const ratio = getRatio(layoutData, xReal, yReal);\r\n  const x = realToTable(layoutData, xReal, ratio);\r\n  const y = realToTable(layoutData, yReal, ratio);\r\n  const dx = realToTable(layoutData, dxReal, ratio);\r\n  const priceUp = true;\r\n  const [p, y2, lessTrade, find] = getDataByX(layoutData, x, dx, priceUp);\r\n  if (!find) return 0;\r\n  if (lessTrade) {\r\n    const dyReal = (dxReal * layoutData.multiplier) / p;\r\n    return dyReal;\r\n  } else {\r\n    const dy = y - y2;\r\n    const dyReal = tableToReal(layoutData, dy, ratio);\r\n    return dyReal;\r\n  }\r\n}\r\n\r\nexport function getDxByDyBaseIn(layoutData: StableModelLayout, xReal: number, yReal: number, dyReal: number): number {\r\n  const ratio = getRatio(layoutData, xReal, yReal);\r\n  const x = realToTable(layoutData, xReal, ratio);\r\n  const y = realToTable(layoutData, yReal, ratio);\r\n  const dy = realToTable(layoutData, dyReal, ratio);\r\n  const priceUp = false;\r\n  const [p, x2, lessTrade, find] = getDataByY(layoutData, y, dy, priceUp);\r\n  if (!find) return 0;\r\n  if (lessTrade) {\r\n    const dxReal = (dyReal * p) / layoutData.multiplier;\r\n    return dxReal;\r\n  } else {\r\n    const dx = x - x2;\r\n    const dxReal = tableToReal(layoutData, dx, ratio);\r\n    return dxReal;\r\n  }\r\n}\r\n\r\nexport function formatLayout(buffer: Buffer): StableModelLayout {\r\n  const layoutInfo = modelDataInfoLayout.decode(buffer);\r\n  return {\r\n    accountType: layoutInfo.accountType.toNumber(),\r\n    status: layoutInfo.status.toNumber(),\r\n    multiplier: layoutInfo.multiplier.toNumber(),\r\n    validDataCount: layoutInfo.validDataCount.toNumber(),\r\n    DataElement: layoutInfo.DataElement.map((item: any) => ({\r\n      x: item.x.toNumber(),\r\n      y: item.y.toNumber(),\r\n      price: item.price.toNumber(),\r\n    })),\r\n  };\r\n}\r\n\r\nexport function getStablePrice(\r\n  layoutData: StableModelLayout,\r\n  coinReal: number,\r\n  pcReal: number,\r\n  baseCoin: boolean,\r\n): number {\r\n  const price =\r\n    getMidPrice(layoutData, realToTable(layoutData, coinReal, getRatio(layoutData, coinReal, pcReal))) /\r\n    layoutData.multiplier;\r\n  return baseCoin ? price : 1 / price;\r\n}\r\n\r\nexport class StableLayout {\r\n  private readonly connection: Connection;\r\n  private _layoutData: StableModelLayout = {\r\n    accountType: 0,\r\n    status: 0,\r\n    multiplier: 0,\r\n    validDataCount: 0,\r\n    DataElement: [],\r\n  };\r\n\r\n  constructor({ connection }: { connection: Connection }) {\r\n    this.connection = connection;\r\n  }\r\n\r\n  get stableModelData(): StableModelLayout {\r\n    return this._layoutData;\r\n  }\r\n\r\n  public async initStableModelLayout(): Promise<void> {\r\n    if (this._layoutData.validDataCount === 0) {\r\n      if (this.connection) {\r\n        const acc = await this.connection.getAccountInfo(MODEL_DATA_PUBKEY);\r\n        if (acc) this._layoutData = formatLayout(acc?.data);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { PublicKey, TransactionInstruction, SystemProgram, Connection, Keypair, Signer } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport {\r\n  createLogger,\r\n  parseBigNumberish,\r\n  RENT_PROGRAM_ID,\r\n  METADATA_PROGRAM_ID,\r\n  InstructionType,\r\n  getATAAddress,\r\n  MEMO_PROGRAM_ID,\r\n} from \"@/common\";\r\nimport { bool, s32, struct, u128, u64, u8 } from \"@/marshmallow\";\r\nimport {\r\n  ReturnTypeMakeInstructions,\r\n  ClmmPoolPersonalPosition,\r\n  OpenPositionFromLiquidityExtInfo,\r\n  ManipulateLiquidityExtInfo,\r\n  ClosePositionExtInfo,\r\n  InitRewardExtInfo,\r\n  OpenPositionFromBaseExtInfo,\r\n} from \"./type\";\r\nimport { ClmmPositionLayout, ObservationInfoLayout } from \"./layout\";\r\nimport {\r\n  getPdaPoolId,\r\n  getPdaPoolVaultId,\r\n  getPdaTickArrayAddress,\r\n  getPdaMetadataKey,\r\n  getPdaProtocolPositionAddress,\r\n  getPdaPersonalPositionAddress,\r\n  getPdaOperationAccount,\r\n  getPdaExBitmapAccount,\r\n  getPdaPoolRewardVaulId,\r\n} from \"./utils/pda\";\r\nimport { TickUtils } from \"./utils/tick\";\r\nimport { PoolUtils } from \"./utils/pool\";\r\nimport { generatePubKey } from \"../account/util\";\r\nimport { ApiV3Token, ApiV3PoolInfoConcentratedItem, ClmmKeys } from \"@/api/type\";\r\n\r\nconst logger = createLogger(\"Raydium_Clmm\");\r\n\r\nconst anchorDataBuf = {\r\n  createPool: [233, 146, 209, 142, 207, 104, 64, 188],\r\n  initReward: [95, 135, 192, 196, 242, 129, 230, 68],\r\n  setRewardEmissions: [112, 52, 167, 75, 32, 201, 211, 137],\r\n  openPosition: [77, 184, 74, 214, 112, 86, 241, 199],\r\n  closePosition: [123, 134, 81, 0, 49, 68, 98, 98],\r\n  increaseLiquidity: [133, 29, 89, 223, 69, 238, 176, 10],\r\n  decreaseLiquidity: [58, 127, 188, 62, 79, 82, 196, 96],\r\n  swap: [43, 4, 237, 11, 26, 201, 30, 98], // [248, 198, 158, 145, 225, 117, 135, 200],\r\n  collectReward: [18, 237, 166, 197, 34, 16, 213, 144],\r\n};\r\n\r\ninterface CreatePoolInstruction {\r\n  connection: Connection;\r\n  programId: PublicKey;\r\n  owner: PublicKey;\r\n  mintA: ApiV3Token;\r\n  mintB: ApiV3Token;\r\n  ammConfigId: PublicKey;\r\n  initialPriceX64: BN;\r\n  startTime: BN;\r\n  forerunCreate?: boolean;\r\n}\r\n\r\nexport class ClmmInstrument {\r\n  static createPoolInstruction(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    poolCreator: PublicKey,\r\n    ammConfigId: PublicKey,\r\n    observationId: PublicKey,\r\n    mintA: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintProgramIdA: PublicKey,\r\n    mintB: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintProgramIdB: PublicKey,\r\n    exTickArrayBitmap: PublicKey,\r\n    sqrtPriceX64: BN,\r\n    startTime: BN,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u128(\"sqrtPriceX64\"), u64(\"startTime\")]);\r\n\r\n    const keys = [\r\n      { pubkey: poolCreator, isSigner: true, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: mintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintB, isSigner: false, isWritable: false },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: observationId, isSigner: false, isWritable: false },\r\n      { pubkey: exTickArrayBitmap, isSigner: false, isWritable: true },\r\n      { pubkey: mintProgramIdA, isSigner: false, isWritable: false },\r\n      { pubkey: mintProgramIdB, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        sqrtPriceX64,\r\n        startTime,\r\n      },\r\n      data,\r\n    );\r\n    const aData = Buffer.from([...anchorDataBuf.createPool, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async createPoolInstructions(props: CreatePoolInstruction): Promise<\r\n    ReturnTypeMakeInstructions<{\r\n      poolId: PublicKey;\r\n      observationId: PublicKey;\r\n      mintAVault: PublicKey;\r\n      mintBVault: PublicKey;\r\n    }>\r\n  > {\r\n    const { connection, programId, owner, mintA, mintB, ammConfigId, initialPriceX64, startTime, forerunCreate } =\r\n      props;\r\n    const observationId = generatePubKey({ fromPublicKey: owner, programId });\r\n    const [mintAAddress, mintBAddress] = [new PublicKey(mintA.address), new PublicKey(mintB.address)];\r\n    const ins = [\r\n      SystemProgram.createAccountWithSeed({\r\n        fromPubkey: owner,\r\n        basePubkey: owner,\r\n        seed: observationId.seed,\r\n        newAccountPubkey: observationId.publicKey,\r\n        lamports: forerunCreate ? 0 : await connection.getMinimumBalanceForRentExemption(ObservationInfoLayout.span),\r\n        space: ObservationInfoLayout.span,\r\n        programId,\r\n      }),\r\n    ];\r\n\r\n    const { publicKey: poolId } = getPdaPoolId(programId, ammConfigId, mintAAddress, mintBAddress, owner);\r\n    const { publicKey: mintAVault } = getPdaPoolVaultId(programId, poolId, mintAAddress);\r\n    const { publicKey: mintBVault } = getPdaPoolVaultId(programId, poolId, mintBAddress);\r\n\r\n    ins.push(\r\n      this.createPoolInstruction(\r\n        programId,\r\n        poolId,\r\n        owner,\r\n        ammConfigId,\r\n        observationId.publicKey,\r\n        mintAAddress,\r\n        mintAVault,\r\n        new PublicKey(mintA.programId || TOKEN_PROGRAM_ID),\r\n        mintBAddress,\r\n        mintBVault,\r\n        new PublicKey(mintB.programId || TOKEN_PROGRAM_ID),\r\n        getPdaExBitmapAccount(programId, poolId).publicKey,\r\n        initialPriceX64,\r\n        startTime,\r\n      ),\r\n    );\r\n\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.CreateAccount, InstructionType.ClmmCreatePool],\r\n      address: { poolId, observationId: observationId.publicKey, mintAVault, mintBVault },\r\n      lookupTableAddress: [],\r\n    };\r\n  }\r\n\r\n  static openPositionFromLiquidityInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    metadataAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n    withMetadata: \"create\" | \"no-create\",\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: false,\r\n        optionBaseFlag: 0,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async openPositionInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      feePayer: PublicKey;\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n  }): Promise<ReturnTypeMakeInstructions> {\r\n    const signers: Signer[] = [];\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let nftMintAccount;\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = this.openPositionFromLiquidityInstruction(\r\n      programId,\r\n      ownerInfo.feePayer,\r\n      id,\r\n      ownerInfo.wallet,\r\n      nftMintAccount,\r\n      positionNftAccount,\r\n      metadataAccount,\r\n      protocolPosition,\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      personalPosition,\r\n      ownerInfo.tokenAccountA,\r\n      ownerInfo.tokenAccountB,\r\n      new PublicKey(poolKeys.vault.A),\r\n      new PublicKey(poolKeys.vault.B),\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n\r\n      tickLower,\r\n      tickUpper,\r\n      tickArrayLowerStartIndex,\r\n      tickArrayUpperStartIndex,\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      withMetadata,\r\n    );\r\n\r\n    return {\r\n      signers,\r\n      instructions: [ins],\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n    };\r\n  }\r\n\r\n  static async openPositionFromBaseInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      feePayer: PublicKey;\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n\r\n    base: \"MintA\" | \"MintB\";\r\n    baseAmount: BN;\r\n\r\n    otherAmountMax: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromBaseExtInfo>> {\r\n    const signers: Signer[] = [];\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let nftMintAccount: PublicKey;\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = this.openPositionFromBaseInstruction(\r\n      programId,\r\n      ownerInfo.feePayer,\r\n      id,\r\n      ownerInfo.wallet,\r\n      nftMintAccount,\r\n      positionNftAccount,\r\n      metadataAccount,\r\n      protocolPosition,\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      personalPosition,\r\n      ownerInfo.tokenAccountA,\r\n      ownerInfo.tokenAccountB,\r\n      new PublicKey(poolKeys.vault.A),\r\n      new PublicKey(poolKeys.vault.B),\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n\r\n      tickLower,\r\n      tickUpper,\r\n      tickArrayLowerStartIndex,\r\n      tickArrayUpperStartIndex,\r\n\r\n      withMetadata,\r\n\r\n      base,\r\n      baseAmount,\r\n\r\n      otherAmountMax,\r\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n      ])\r\n        ? getPdaExBitmapAccount(programId, id).publicKey\r\n        : undefined,\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static openPositionFromBaseInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    metadataAccount: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    personalPosition: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    tokenVaultA: PublicKey,\r\n    tokenVaultB: PublicKey,\r\n    tokenMintA: PublicKey,\r\n    tokenMintB: PublicKey,\r\n\r\n    tickLowerIndex: number,\r\n    tickUpperIndex: number,\r\n    tickArrayLowerStartIndex: number,\r\n    tickArrayUpperStartIndex: number,\r\n\r\n    withMetadata: \"create\" | \"no-create\",\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      s32(\"tickLowerIndex\"),\r\n      s32(\"tickUpperIndex\"),\r\n      s32(\"tickArrayLowerStartIndex\"),\r\n      s32(\"tickArrayUpperStartIndex\"),\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      bool(\"withMetadata\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftOwner, isSigner: false, isWritable: false },\r\n      { pubkey: positionNftMint, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: metadataAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: tokenVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: METADATA_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: tokenMintA, isSigner: false, isWritable: false },\r\n      { pubkey: tokenMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        tickLowerIndex,\r\n        tickUpperIndex,\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        withMetadata: withMetadata === \"create\",\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.openPosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static async openPositionFromLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    withMetadata,\r\n    getEphemeralSigners,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n    withMetadata: \"create\" | \"no-create\";\r\n    getEphemeralSigners?: (k: number) => any;\r\n  }): Promise<ReturnTypeMakeInstructions<OpenPositionFromLiquidityExtInfo[\"address\"]>> {\r\n    let nftMintAccount: PublicKey;\r\n    const signers: Keypair[] = [];\r\n    if (getEphemeralSigners) {\r\n      nftMintAccount = new PublicKey((await getEphemeralSigners(1))[0]);\r\n    } else {\r\n      const _k = Keypair.generate();\r\n      signers.push(_k);\r\n      nftMintAccount = _k.publicKey;\r\n    }\r\n\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(tickLower, poolInfo.config.tickSpacing);\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(tickUpper, poolInfo.config.tickSpacing);\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, nftMintAccount, TOKEN_PROGRAM_ID);\r\n    const { publicKey: metadataAccount } = getPdaMetadataKey(nftMintAccount);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, nftMintAccount);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(programId, id, tickLower, tickUpper);\r\n\r\n    const ins = this.openPositionFromLiquidityInstruction(\r\n      programId,\r\n      ownerInfo.wallet,\r\n      id,\r\n      ownerInfo.wallet,\r\n      nftMintAccount,\r\n      positionNftAccount,\r\n      metadataAccount,\r\n      protocolPosition,\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      personalPosition,\r\n      ownerInfo.tokenAccountA,\r\n      ownerInfo.tokenAccountB,\r\n      new PublicKey(poolKeys.vault.A),\r\n      new PublicKey(poolKeys.vault.B),\r\n      new PublicKey(poolKeys.mintA.address),\r\n      new PublicKey(poolKeys.mintB.address),\r\n\r\n      tickLower,\r\n      tickUpper,\r\n      tickArrayLowerStartIndex,\r\n      tickArrayUpperStartIndex,\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      withMetadata,\r\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n      ])\r\n        ? getPdaExBitmapAccount(programId, id).publicKey\r\n        : undefined,\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        nftMint: nftMintAccount,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        metadataAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [ins],\r\n      signers,\r\n      instructionTypes: [InstructionType.ClmmOpenPosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static closePositionInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftMint: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([]);\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: true },\r\n      { pubkey: positionNftMint, isSigner: false, isWritable: true },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({}, data);\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.closePosition, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static closePositionInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    ownerPosition,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n    };\r\n  }): ReturnTypeMakeInstructions<ClosePositionExtInfo[\"address\"]> {\r\n    const programId = new PublicKey(poolInfo.programId);\r\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n\r\n    const ins: TransactionInstruction[] = [];\r\n    ins.push(\r\n      this.closePositionInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        ownerPosition.nftMint,\r\n        positionNftAccount,\r\n        personalPosition,\r\n      ),\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        positionNftAccount,\r\n        personalPosition,\r\n      },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmClosePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromLiquidityInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n\r\n    liquidity: BN,\r\n    amountMaxA: BN,\r\n    amountMaxB: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity,\r\n        amountMaxA,\r\n        amountMaxB,\r\n        optionBaseFlag: 0,\r\n        baseFlag: false,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static increasePositionFromLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    liquidity,\r\n    amountMaxA,\r\n    amountMaxB,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    liquidity: BN;\r\n    amountMaxA: BN;\r\n    amountMaxB: BN;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      programId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    const ins = this.increasePositionFromLiquidityInstruction(\r\n      programId,\r\n      ownerInfo.wallet,\r\n      positionNftAccount,\r\n      personalPosition,\r\n      id,\r\n      protocolPosition,\r\n      tickArrayLower,\r\n      tickArrayUpper,\r\n      ownerInfo.tokenAccountA,\r\n      ownerInfo.tokenAccountB,\r\n      new PublicKey(poolKeys.vault.A),\r\n      new PublicKey(poolKeys.vault.B),\r\n      new PublicKey(poolInfo.mintA.address),\r\n      new PublicKey(poolInfo.mintB.address),\r\n\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n        tickArrayLowerStartIndex,\r\n        tickArrayUpperStartIndex,\r\n      ])\r\n        ? getPdaExBitmapAccount(programId, id).publicKey\r\n        : undefined,\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      signers: [],\r\n      instructions: [ins],\r\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromBaseInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPoolPersonalPosition;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    base: \"MintA\" | \"MintB\";\r\n    baseAmount: BN;\r\n\r\n    otherAmountMax: BN;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(programId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(programId, id, tickArrayUpperStartIndex);\r\n\r\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, TOKEN_PROGRAM_ID);\r\n\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(programId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      programId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      instructions: [\r\n        this.increasePositionFromBaseInstruction(\r\n          programId,\r\n          ownerInfo.wallet,\r\n          positionNftAccount,\r\n          personalPosition,\r\n          id,\r\n          protocolPosition,\r\n          tickArrayLower,\r\n          tickArrayUpper,\r\n          ownerInfo.tokenAccountA,\r\n          ownerInfo.tokenAccountB,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          new PublicKey(poolInfo.mintA.address),\r\n          new PublicKey(poolInfo.mintB.address),\r\n\r\n          base,\r\n          baseAmount,\r\n\r\n          otherAmountMax,\r\n          PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n            tickArrayLowerStartIndex,\r\n            tickArrayUpperStartIndex,\r\n          ])\r\n            ? getPdaExBitmapAccount(programId, id).publicKey\r\n            : undefined,\r\n        ),\r\n      ],\r\n      signers: [],\r\n      instructionTypes: [InstructionType.ClmmIncreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static increasePositionFromBaseInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n\r\n    base: \"MintA\" | \"MintB\",\r\n    baseAmount: BN,\r\n\r\n    otherAmountMax: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u128(\"liquidity\"),\r\n      u64(\"amountMaxA\"),\r\n      u64(\"amountMaxB\"),\r\n      u8(\"optionBaseFlag\"),\r\n      bool(\"baseFlag\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity: new BN(0),\r\n        amountMaxA: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n        amountMaxB: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n        baseFlag: base === \"MintA\",\r\n        optionBaseFlag: 1,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.increaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static decreaseLiquidityInstruction(\r\n    programId: PublicKey,\r\n    positionNftOwner: PublicKey,\r\n    positionNftAccount: PublicKey,\r\n    personalPosition: PublicKey,\r\n\r\n    poolId: PublicKey,\r\n    protocolPosition: PublicKey,\r\n    tickArrayLower: PublicKey,\r\n    tickArrayUpper: PublicKey,\r\n    ownerTokenAccountA: PublicKey,\r\n    ownerTokenAccountB: PublicKey,\r\n    mintVaultA: PublicKey,\r\n    mintVaultB: PublicKey,\r\n    mintMintA: PublicKey,\r\n    mintMintB: PublicKey,\r\n    rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[],\r\n\r\n    liquidity: BN,\r\n    amountMinA: BN,\r\n    amountMinB: BN,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u128(\"liquidity\"), u64(\"amountMinA\"), u64(\"amountMinB\")]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...rewardAccounts\r\n        .map((i) => [\r\n          { pubkey: i.poolRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.ownerRewardVault, isSigner: false, isWritable: true },\r\n          { pubkey: i.rewardMint, isSigner: false, isWritable: false },\r\n        ])\r\n        .flat(),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: positionNftOwner, isSigner: true, isWritable: false },\r\n      { pubkey: positionNftAccount, isSigner: false, isWritable: false },\r\n      { pubkey: personalPosition, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: protocolPosition, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultA, isSigner: false, isWritable: true },\r\n      { pubkey: mintVaultB, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayLower, isSigner: false, isWritable: true },\r\n      { pubkey: tickArrayUpper, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: ownerTokenAccountA, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccountB, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: mintMintA, isSigner: false, isWritable: false },\r\n      { pubkey: mintMintB, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        liquidity,\r\n        amountMinA,\r\n        amountMinB,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.decreaseLiquidity, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static decreaseLiquidityInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerPosition,\r\n    ownerInfo,\r\n    liquidity,\r\n    amountMinA,\r\n    amountMinB,\r\n    programId,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n      rewardAccounts: PublicKey[];\r\n    };\r\n\r\n    liquidity: BN;\r\n    amountMinA: BN;\r\n    amountMinB: BN;\r\n    programId?: PublicKey;\r\n  }): ReturnTypeMakeInstructions<ManipulateLiquidityExtInfo[\"address\"]> {\r\n    const [poolProgramId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const tickArrayLowerStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickLower,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n    const tickArrayUpperStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n      ownerPosition.tickUpper,\r\n      poolInfo.config.tickSpacing,\r\n    );\r\n\r\n    const { publicKey: tickArrayLower } = getPdaTickArrayAddress(poolProgramId, id, tickArrayLowerStartIndex);\r\n    const { publicKey: tickArrayUpper } = getPdaTickArrayAddress(poolProgramId, id, tickArrayUpperStartIndex);\r\n    const { publicKey: positionNftAccount } = getATAAddress(ownerInfo.wallet, ownerPosition.nftMint, programId);\r\n\r\n    const { publicKey: personalPosition } = getPdaPersonalPositionAddress(poolProgramId, ownerPosition.nftMint);\r\n    const { publicKey: protocolPosition } = getPdaProtocolPositionAddress(\r\n      poolProgramId,\r\n      id,\r\n      ownerPosition.tickLower,\r\n      ownerPosition.tickUpper,\r\n    );\r\n\r\n    const rewardAccounts: {\r\n      poolRewardVault: PublicKey;\r\n      ownerRewardVault: PublicKey;\r\n      rewardMint: PublicKey;\r\n    }[] = [];\r\n    for (let i = 0; i < poolInfo.rewardDefaultInfos.length; i++) {\r\n      rewardAccounts.push({\r\n        poolRewardVault: new PublicKey(poolKeys.rewardInfos[i].vault),\r\n        ownerRewardVault: ownerInfo.rewardAccounts[i],\r\n        rewardMint: new PublicKey(poolInfo.rewardDefaultInfos[i].mint.address),\r\n      });\r\n    }\r\n\r\n    const ins: TransactionInstruction[] = [];\r\n    ins.push(\r\n      this.decreaseLiquidityInstruction(\r\n        poolProgramId,\r\n        ownerInfo.wallet,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        id,\r\n        protocolPosition,\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        ownerInfo.tokenAccountA,\r\n        ownerInfo.tokenAccountB,\r\n        new PublicKey(poolKeys.vault.A),\r\n        new PublicKey(poolKeys.vault.B),\r\n        new PublicKey(poolInfo.mintA.address),\r\n        new PublicKey(poolInfo.mintB.address),\r\n        rewardAccounts,\r\n\r\n        liquidity,\r\n        amountMinA,\r\n        amountMinB,\r\n        PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.config.tickSpacing, [\r\n          tickArrayLowerStartIndex,\r\n          tickArrayUpperStartIndex,\r\n        ])\r\n          ? getPdaExBitmapAccount(poolProgramId, id).publicKey\r\n          : undefined,\r\n      ),\r\n    );\r\n\r\n    return {\r\n      address: {\r\n        tickArrayLower,\r\n        tickArrayUpper,\r\n        positionNftAccount,\r\n        personalPosition,\r\n        protocolPosition,\r\n      },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static swapInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n    inputTokenAccount: PublicKey,\r\n    outputTokenAccount: PublicKey,\r\n    inputVault: PublicKey,\r\n    outputVault: PublicKey,\r\n    inputMint: PublicKey,\r\n    outputMint: PublicKey,\r\n    tickArray: PublicKey[],\r\n    observationId: PublicKey,\r\n\r\n    amount: BN,\r\n    otherAmountThreshold: BN,\r\n    sqrtPriceLimitX64: BN,\r\n    isBaseInput: boolean,\r\n\r\n    exTickArrayBitmap?: PublicKey,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([\r\n      u64(\"amount\"),\r\n      u64(\"otherAmountThreshold\"),\r\n      u128(\"sqrtPriceLimitX64\"),\r\n      bool(\"isBaseInput\"),\r\n    ]);\r\n\r\n    const remainingAccounts = [\r\n      ...(exTickArrayBitmap ? [{ pubkey: exTickArrayBitmap, isSigner: false, isWritable: true }] : []),\r\n      ...tickArray.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n    ];\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: false },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: inputTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: outputTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: inputVault, isSigner: false, isWritable: true },\r\n      { pubkey: outputVault, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: observationId, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: inputMint, isSigner: false, isWritable: false },\r\n      { pubkey: outputMint, isSigner: false, isWritable: false },\r\n\r\n      ...remainingAccounts,\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        amount,\r\n        otherAmountThreshold,\r\n        sqrtPriceLimitX64,\r\n        isBaseInput,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.swap, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static makeSwapBaseInInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    observationId,\r\n    ownerInfo,\r\n    inputMint,\r\n    amountIn,\r\n    amountOutMin,\r\n    sqrtPriceLimitX64,\r\n    remainingAccounts,\r\n  }: {\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\">;\r\n    poolKeys: ClmmKeys;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    inputMint: PublicKey;\r\n\r\n    amountIn: BN;\r\n    amountOutMin: BN;\r\n    sqrtPriceLimitX64: BN;\r\n\r\n    remainingAccounts: PublicKey[];\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n\r\n    const isInputMintA = poolInfo.mintA.address === inputMint.toString();\r\n\r\n    const ins = [\r\n      this.swapInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n\r\n        id,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\r\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\r\n\r\n        isInputMintA ? mintAVault : mintBVault,\r\n        isInputMintA ? mintBVault : mintAVault,\r\n\r\n        isInputMintA ? mintA : mintB,\r\n        isInputMintA ? mintB : mintA,\r\n\r\n        remainingAccounts,\r\n        observationId, // to do get from api\r\n        amountIn,\r\n        amountOutMin,\r\n        sqrtPriceLimitX64,\r\n        true,\r\n        getPdaExBitmapAccount(programId, id).publicKey,\r\n      ),\r\n    ];\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSwapBaseIn],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {},\r\n    };\r\n  }\r\n\r\n  static initRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    operationId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardProgramId: PublicKey,\r\n    rewardMint: PublicKey,\r\n    rewardVault: PublicKey,\r\n\r\n    openTime: number,\r\n    endTime: number,\r\n    emissionsPerSecondX64: BN,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u64(\"openTime\"), u64(\"endTime\"), u128(\"emissionsPerSecondX64\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: operationId, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: rewardProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n      { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        openTime: parseBigNumberish(openTime),\r\n        endTime: parseBigNumberish(endTime),\r\n        emissionsPerSecondX64,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.initReward, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static initRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardInfo,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardInfo: {\r\n      programId: PublicKey;\r\n      mint: PublicKey;\r\n      openTime: number;\r\n      endTime: number;\r\n      emissionsPerSecondX64: BN;\r\n    };\r\n  }): ReturnTypeMakeInstructions<InitRewardExtInfo[\"address\"]> {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const poolRewardVault = getPdaPoolRewardVaulId(programId, id, rewardInfo.mint).publicKey;\r\n    const operationId = getPdaOperationAccount(programId).publicKey;\r\n    const ins = [\r\n      this.initRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n        operationId,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardInfo.programId,\r\n        rewardInfo.mint,\r\n        poolRewardVault,\r\n\r\n        rewardInfo.openTime,\r\n        rewardInfo.endTime,\r\n        rewardInfo.emissionsPerSecondX64,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { poolRewardVault, operationId },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmInitReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static setRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n    operationId: PublicKey,\r\n    ammConfigId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardVault: PublicKey,\r\n    rewardMint: PublicKey,\r\n\r\n    rewardIndex: number,\r\n    openTime: number,\r\n    endTime: number,\r\n    emissionsPerSecondX64: BN,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u8(\"rewardIndex\"), u128(\"emissionsPerSecondX64\"), u64(\"openTime\"), u64(\"endTime\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ammConfigId, isSigner: false, isWritable: false },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: operationId, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: true },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        rewardIndex,\r\n        emissionsPerSecondX64,\r\n        openTime: parseBigNumberish(openTime),\r\n        endTime: parseBigNumberish(endTime),\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.setRewardEmissions, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static setRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardInfo,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardInfo: {\r\n      mint: PublicKey;\r\n      openTime: number;\r\n      endTime: number;\r\n      emissionsPerSecondX64: BN;\r\n    };\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n\r\n    let rewardIndex: number | undefined;\r\n    let rewardVault: PublicKey | undefined;\r\n    let rewardMint: PublicKey | undefined;\r\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\r\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardInfo.mint.toString()) {\r\n        rewardIndex = index;\r\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\r\n        rewardMint = new PublicKey(poolKeys.rewardInfos[index].mint.address);\r\n      }\r\n\r\n    if (rewardIndex === undefined || rewardVault === undefined)\r\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\r\n\r\n    const operationId = getPdaOperationAccount(programId).publicKey;\r\n\r\n    const ins = [\r\n      this.setRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n        operationId,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardVault!,\r\n        rewardMint!,\r\n\r\n        rewardIndex!,\r\n        rewardInfo.openTime,\r\n        rewardInfo.endTime,\r\n        rewardInfo.emissionsPerSecondX64,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { rewardVault: rewardVault!, operationId },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSetReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static collectRewardInstruction(\r\n    programId: PublicKey,\r\n    payer: PublicKey,\r\n    poolId: PublicKey,\r\n\r\n    ownerTokenAccount: PublicKey,\r\n    rewardVault: PublicKey,\r\n    rewardMint: PublicKey,\r\n\r\n    rewardIndex: number,\r\n  ): TransactionInstruction {\r\n    const dataLayout = struct([u8(\"rewardIndex\")]);\r\n\r\n    const keys = [\r\n      { pubkey: payer, isSigner: true, isWritable: true },\r\n      { pubkey: ownerTokenAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolId, isSigner: false, isWritable: true },\r\n      { pubkey: rewardVault, isSigner: false, isWritable: true },\r\n      { pubkey: rewardMint, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode(\r\n      {\r\n        rewardIndex,\r\n      },\r\n      data,\r\n    );\r\n\r\n    const aData = Buffer.from([...anchorDataBuf.collectReward, ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n\r\n  static collectRewardInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    rewardMint,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccount: PublicKey;\r\n    };\r\n    rewardMint: PublicKey;\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    let rewardIndex: number | undefined;\r\n    let rewardVault: PublicKey | undefined;\r\n    for (let index = 0; index < poolInfo.rewardDefaultInfos.length; index++)\r\n      if (poolInfo.rewardDefaultInfos[index].mint.address === rewardMint.toString()) {\r\n        rewardIndex = index;\r\n        rewardVault = new PublicKey(poolKeys.rewardInfos[index].vault);\r\n      }\r\n\r\n    if (rewardIndex === undefined || rewardVault === undefined)\r\n      logger.logWithError(\"reward mint check error\", \"no reward mint\", poolInfo.rewardDefaultInfos);\r\n\r\n    const ins = [\r\n      this.collectRewardInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n        id,\r\n\r\n        ownerInfo.tokenAccount,\r\n        rewardVault!,\r\n        rewardMint,\r\n\r\n        rewardIndex!,\r\n      ),\r\n    ];\r\n    return {\r\n      address: { rewardVault: rewardVault! },\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmCollectReward],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    };\r\n  }\r\n\r\n  static swapBaseOutInstructions({\r\n    poolInfo,\r\n    poolKeys,\r\n    ownerInfo,\r\n    outputMint,\r\n    amountOut,\r\n    amountInMax,\r\n    sqrtPriceLimitX64,\r\n    remainingAccounts,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      tokenAccountA: PublicKey;\r\n      tokenAccountB: PublicKey;\r\n    };\r\n\r\n    outputMint: PublicKey;\r\n\r\n    amountOut: BN;\r\n    amountInMax: BN;\r\n    sqrtPriceLimitX64: BN;\r\n\r\n    remainingAccounts: PublicKey[];\r\n  }): ReturnTypeMakeInstructions {\r\n    const [programId, id] = [new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)];\r\n    const [mintAVault, mintBVault] = [new PublicKey(poolKeys.vault.A), new PublicKey(poolKeys.vault.B)];\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n    const isInputMintA = poolInfo.mintA.address === outputMint.toString();\r\n    const ins = [\r\n      this.swapInstruction(\r\n        programId,\r\n        ownerInfo.wallet,\r\n\r\n        id,\r\n        new PublicKey(poolInfo.config.id),\r\n\r\n        isInputMintA ? ownerInfo.tokenAccountB : ownerInfo.tokenAccountA,\r\n        isInputMintA ? ownerInfo.tokenAccountA : ownerInfo.tokenAccountB,\r\n\r\n        isInputMintA ? mintBVault : mintAVault,\r\n        isInputMintA ? mintAVault : mintBVault,\r\n\r\n        isInputMintA ? mintA : mintB,\r\n        isInputMintA ? mintB : mintA,\r\n\r\n        remainingAccounts,\r\n        // poolInfo.observationId, // to do\r\n        mintAVault,\r\n        amountOut,\r\n        amountInMax,\r\n        sqrtPriceLimitX64,\r\n        false,\r\n      ),\r\n    ];\r\n    return {\r\n      signers: [],\r\n      instructions: ins,\r\n      instructionTypes: [InstructionType.ClmmSwapBaseOut],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n      address: {},\r\n    };\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { TickArrayBitmapExtensionType } from \"../type\";\r\nimport { TickQuery } from \"./tickQuery\";\r\nimport { MIN_TICK, MAX_TICK } from \"./constants\";\r\nimport { SqrtPriceMath, TickMath } from \"./math\";\r\nimport { ClmmPoolInfo } from \"../type\";\r\nimport { ApiV3PoolInfoConcentratedItem } from \"@/api/type\";\r\n\r\nexport const TICK_ARRAY_SIZE = 60;\r\nexport const TICK_ARRAY_BITMAP_SIZE = 512;\r\n\r\nexport interface ReturnTypeGetTickPrice {\r\n  tick: number;\r\n  price: Decimal;\r\n  tickSqrtPriceX64: BN;\r\n}\r\n\r\nexport interface ReturnTypeGetPriceAndTick {\r\n  tick: number;\r\n  price: Decimal;\r\n}\r\n\r\nexport type Tick = {\r\n  tick: number;\r\n  liquidityNet: BN;\r\n  liquidityGross: BN;\r\n  feeGrowthOutsideX64A: BN;\r\n  feeGrowthOutsideX64B: BN;\r\n  rewardGrowthsOutsideX64: BN[];\r\n};\r\n\r\nexport type TickArray = {\r\n  address: PublicKey;\r\n  poolId: PublicKey;\r\n  startTickIndex: number;\r\n  ticks: Tick[];\r\n  initializedTickCount: number;\r\n};\r\n\r\nexport type TickState = {\r\n  tick: number;\r\n  liquidityNet: BN;\r\n  liquidityGross: BN;\r\n  feeGrowthOutsideX64A: BN;\r\n  feeGrowthOutsideX64B: BN;\r\n  tickCumulativeOutside: BN;\r\n  secondsPerLiquidityOutsideX64: BN;\r\n  secondsOutside: number;\r\n  rewardGrowthsOutside: BN[];\r\n};\r\n\r\nexport type TickArrayState = {\r\n  ammPool: PublicKey;\r\n  startTickIndex: number;\r\n  ticks: TickState[];\r\n  initializedTickCount: number;\r\n};\r\n\r\nexport class TickUtils {\r\n  public static getTickArrayAddressByTick(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n  ): PublicKey {\r\n    const startIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n    return tickArrayAddress;\r\n  }\r\n\r\n  public static getTickOffsetInArray(tickIndex: number, tickSpacing: number): number {\r\n    if (tickIndex % tickSpacing != 0) {\r\n      throw new Error(\"tickIndex % tickSpacing not equal 0\");\r\n    }\r\n    const startTickIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n    const offsetInArray = Math.floor((tickIndex - startTickIndex) / tickSpacing);\r\n    if (offsetInArray < 0 || offsetInArray >= TICK_ARRAY_SIZE) {\r\n      throw new Error(\"tick offset in array overflow\");\r\n    }\r\n    return offsetInArray;\r\n  }\r\n\r\n  public static getTickArrayBitIndex(tickIndex: number, tickSpacing: number): number {\r\n    const ticksInArray = TickQuery.tickCount(tickSpacing);\r\n\r\n    let startIndex: number = tickIndex / ticksInArray;\r\n    if (tickIndex < 0 && tickIndex % ticksInArray != 0) {\r\n      startIndex = Math.ceil(startIndex) - 1;\r\n    } else {\r\n      startIndex = Math.floor(startIndex);\r\n    }\r\n    return startIndex;\r\n  }\r\n\r\n  public static getTickArrayStartIndexByTick(tickIndex: number, tickSpacing: number): number {\r\n    return this.getTickArrayBitIndex(tickIndex, tickSpacing) * TickQuery.tickCount(tickSpacing);\r\n  }\r\n\r\n  public static getTickArrayOffsetInBitmapByTick(tick: number, tickSpacing: number): number {\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    const compressed = Math.floor(tick / multiplier) + 512;\r\n    return Math.abs(compressed);\r\n  }\r\n\r\n  public static checkTickArrayIsInitialized(\r\n    bitmap: BN,\r\n    tick: number,\r\n    tickSpacing: number,\r\n  ): {\r\n    isInitialized: boolean;\r\n    startIndex: number;\r\n  } {\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    const compressed = Math.floor(tick / multiplier) + 512;\r\n    const bitPos = Math.abs(compressed);\r\n    return {\r\n      isInitialized: bitmap.testn(bitPos),\r\n      startIndex: (bitPos - 512) * multiplier,\r\n    };\r\n  }\r\n\r\n  public static getNextTickArrayStartIndex(\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): number {\r\n    return zeroForOne\r\n      ? lastTickArrayStartIndex - tickSpacing * TICK_ARRAY_SIZE\r\n      : lastTickArrayStartIndex + tickSpacing * TICK_ARRAY_SIZE;\r\n  }\r\n\r\n  public static mergeTickArrayBitmap(bns: BN[]): BN {\r\n    let b = new BN(0);\r\n    for (let i = 0; i < bns.length; i++) {\r\n      b = b.add(bns[i].shln(64 * i));\r\n    }\r\n    return b;\r\n  }\r\n\r\n  public static getInitializedTickArrayInRange(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    tickSpacing: number,\r\n    tickArrayStartIndex: number,\r\n    expectedCount: number,\r\n  ): number[] {\r\n    const tickArrayOffset = Math.floor(tickArrayStartIndex / (tickSpacing * TICK_ARRAY_SIZE));\r\n    return [\r\n      // find right of currenct offset\r\n      ...TickUtils.searchLowBitFromStart(\r\n        tickArrayBitmap,\r\n        exTickArrayBitmap,\r\n        tickArrayOffset - 1,\r\n        expectedCount,\r\n        tickSpacing,\r\n      ),\r\n\r\n      // find left of current offset\r\n      ...TickUtils.searchHightBitFromStart(\r\n        tickArrayBitmap,\r\n        exTickArrayBitmap,\r\n        tickArrayOffset,\r\n        expectedCount,\r\n        tickSpacing,\r\n      ),\r\n    ];\r\n  }\r\n\r\n  public static getAllInitializedTickArrayStartIndex(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    // find from offset 0 to 1024\r\n    return TickUtils.searchHightBitFromStart(\r\n      tickArrayBitmap,\r\n      exTickArrayBitmap,\r\n      0,\r\n      TICK_ARRAY_BITMAP_SIZE,\r\n      tickSpacing,\r\n    );\r\n  }\r\n\r\n  public static getAllInitializedTickArrayInfo(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    tickSpacing: number,\r\n  ): {\r\n    tickArrayStartIndex: number;\r\n    tickArrayAddress: PublicKey;\r\n  }[] {\r\n    const result: {\r\n      tickArrayStartIndex: number;\r\n      tickArrayAddress: PublicKey;\r\n    }[] = [];\r\n    const allInitializedTickArrayIndex: number[] = TickUtils.getAllInitializedTickArrayStartIndex(\r\n      tickArrayBitmap,\r\n      exTickArrayBitmap,\r\n      tickSpacing,\r\n    );\r\n    for (const startIndex of allInitializedTickArrayIndex) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(programId, poolId, startIndex);\r\n      result.push({\r\n        tickArrayStartIndex: startIndex,\r\n        tickArrayAddress: address,\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static getAllInitializedTickInTickArray(tickArray: TickArrayState): TickState[] {\r\n    return tickArray.ticks.filter((i) => i.liquidityGross.gtn(0));\r\n  }\r\n\r\n  public static searchLowBitFromStart(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    currentTickArrayBitStartIndex: number,\r\n    expectedCount: number,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    const tickArrayBitmaps = [\r\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\r\n      tickArrayBitmap.slice(0, 8),\r\n      tickArrayBitmap.slice(8, 16),\r\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\r\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\r\n    const result: number[] = [];\r\n    while (currentTickArrayBitStartIndex >= -7680) {\r\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\r\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\r\n\r\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\r\n\r\n      currentTickArrayBitStartIndex--;\r\n      if (result.length === expectedCount) break;\r\n    }\r\n\r\n    const tickCount = TickQuery.tickCount(tickSpacing);\r\n    return result.map((i) => i * tickCount);\r\n  }\r\n\r\n  public static searchHightBitFromStart(\r\n    tickArrayBitmap: BN[],\r\n    exTickArrayBitmap: TickArrayBitmapExtensionType,\r\n    currentTickArrayBitStartIndex: number,\r\n    expectedCount: number,\r\n    tickSpacing: number,\r\n  ): number[] {\r\n    const tickArrayBitmaps = [\r\n      ...[...exTickArrayBitmap.negativeTickArrayBitmap].reverse(),\r\n      tickArrayBitmap.slice(0, 8),\r\n      tickArrayBitmap.slice(8, 16),\r\n      ...exTickArrayBitmap.positiveTickArrayBitmap,\r\n    ].map((i) => TickUtils.mergeTickArrayBitmap(i));\r\n    const result: number[] = [];\r\n    while (currentTickArrayBitStartIndex < 7680) {\r\n      const arrayIndex = Math.floor((currentTickArrayBitStartIndex + 7680) / 512);\r\n      const searchIndex = (currentTickArrayBitStartIndex + 7680) % 512;\r\n\r\n      if (tickArrayBitmaps[arrayIndex].testn(searchIndex)) result.push(currentTickArrayBitStartIndex);\r\n\r\n      currentTickArrayBitStartIndex++;\r\n      if (result.length === expectedCount) break;\r\n    }\r\n\r\n    const tickCount = TickQuery.tickCount(tickSpacing);\r\n    return result.map((i) => i * tickCount);\r\n  }\r\n\r\n  public static checkIsOutOfBoundary(tick: number): boolean {\r\n    return tick < MIN_TICK || tick > MAX_TICK;\r\n  }\r\n\r\n  public static nextInitTick(\r\n    tickArrayCurrent: TickArray,\r\n    currentTickIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    t: boolean,\r\n  ): Tick | null {\r\n    const currentTickArrayStartIndex = TickQuery.getArrayStartIndex(currentTickIndex, tickSpacing);\r\n    if (currentTickArrayStartIndex != tickArrayCurrent.startTickIndex) {\r\n      return null;\r\n    }\r\n    let offsetInArray = Math.floor((currentTickIndex - tickArrayCurrent.startTickIndex) / tickSpacing);\r\n\r\n    if (zeroForOne) {\r\n      while (offsetInArray >= 0) {\r\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[offsetInArray];\r\n        }\r\n        offsetInArray = offsetInArray - 1;\r\n      }\r\n    } else {\r\n      if (!t) offsetInArray = offsetInArray + 1;\r\n      while (offsetInArray < TICK_ARRAY_SIZE) {\r\n        if (tickArrayCurrent.ticks[offsetInArray].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[offsetInArray];\r\n        }\r\n        offsetInArray = offsetInArray + 1;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public static firstInitializedTick(tickArrayCurrent: TickArray, zeroForOne: boolean): Tick {\r\n    if (zeroForOne) {\r\n      let i = TICK_ARRAY_SIZE - 1;\r\n      while (i >= 0) {\r\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[i];\r\n        }\r\n        i = i - 1;\r\n      }\r\n    } else {\r\n      let i = 0;\r\n      while (i < TICK_ARRAY_SIZE) {\r\n        if (tickArrayCurrent.ticks[i].liquidityGross.gtn(0)) {\r\n          return tickArrayCurrent.ticks[i];\r\n        }\r\n        i = i + 1;\r\n      }\r\n    }\r\n\r\n    throw Error(`firstInitializedTick check error: ${tickArrayCurrent} - ${zeroForOne}`);\r\n  }\r\n\r\n  public static _getTickPriceLegacy({\r\n    poolInfo,\r\n    tick,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ClmmPoolInfo;\r\n    tick: number;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetTickPrice {\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn\r\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\r\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\r\n  }\r\n\r\n  public static _getPriceAndTickLegacy({\r\n    poolInfo,\r\n    price,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ClmmPoolInfo;\r\n    price: Decimal;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetPriceAndTick {\r\n    const _price = baseIn ? price : new Decimal(1).div(price);\r\n\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(\r\n      _price,\r\n      poolInfo.ammConfig.tickSpacing,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\r\n  }\r\n\r\n  public static getTickPrice({\r\n    poolInfo,\r\n    tick,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tick: number;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetTickPrice {\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn\r\n      ? { tick, price: tickPrice, tickSqrtPriceX64 }\r\n      : { tick, price: new Decimal(1).div(tickPrice), tickSqrtPriceX64 };\r\n  }\r\n\r\n  public static getPriceAndTick({\r\n    poolInfo,\r\n    price,\r\n    baseIn,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    price: Decimal;\r\n    baseIn: boolean;\r\n  }): ReturnTypeGetPriceAndTick {\r\n    const _price = baseIn ? price : new Decimal(1).div(price);\r\n\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(\r\n      _price,\r\n      poolInfo.config.tickSpacing,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const tickSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    const tickPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      tickSqrtPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    return baseIn ? { tick, price: tickPrice } : { tick, price: new Decimal(1).div(tickPrice) };\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { findProgramAddress, METADATA_PROGRAM_ID } from \"@/common\";\r\n\r\nimport { i32ToBytes, u16ToBytes } from \"./util\";\r\n\r\nexport const AMM_CONFIG_SEED = Buffer.from(\"amm_config\", \"utf8\");\r\nexport const POOL_SEED = Buffer.from(\"pool\", \"utf8\");\r\nexport const POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\r\nexport const POOL_REWARD_VAULT_SEED = Buffer.from(\"pool_reward_vault\", \"utf8\");\r\nexport const POSITION_SEED = Buffer.from(\"position\", \"utf8\");\r\nexport const TICK_ARRAY_SEED = Buffer.from(\"tick_array\", \"utf8\");\r\nexport const OPERATION_SEED = Buffer.from(\"operation\", \"utf8\");\r\nexport const POOL_TICK_ARRAY_BITMAP_SEED = Buffer.from(\"pool_tick_array_bitmap_extension\", \"utf8\");\r\n\r\nexport function getPdaAmmConfigId(\r\n  programId: PublicKey,\r\n  index: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([AMM_CONFIG_SEED, u16ToBytes(index)], programId);\r\n}\r\n\r\nexport function getPdaPoolId(\r\n  programId: PublicKey,\r\n  ammConfigId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  creator: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_SEED, ammConfigId.toBuffer(), mintA.toBuffer(), mintB.toBuffer(), creator.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPoolVaultId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  vaultMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_VAULT_SEED, poolId.toBuffer(), vaultMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaPoolRewardVaulId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  rewardMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_REWARD_VAULT_SEED, poolId.toBuffer(), rewardMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaTickArrayAddress(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  startIndex: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([TICK_ARRAY_SEED, poolId.toBuffer(), i32ToBytes(startIndex)], programId);\r\n}\r\n\r\nexport function getPdaProtocolPositionAddress(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  tickLower: number,\r\n  tickUpper: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [POSITION_SEED, poolId.toBuffer(), i32ToBytes(tickLower), i32ToBytes(tickUpper)],\r\n    programId,\r\n  );\r\n}\r\n\r\nexport function getPdaPersonalPositionAddress(\r\n  programId: PublicKey,\r\n  nftMint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POSITION_SEED, nftMint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaMetadataKey(mint: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress(\r\n    [Buffer.from(\"metadata\", \"utf8\"), METADATA_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    METADATA_PROGRAM_ID,\r\n  );\r\n}\r\n\r\nexport function getPdaOperationAccount(programId: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([OPERATION_SEED], programId);\r\n}\r\n\r\nexport function getPdaExBitmapAccount(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_TICK_ARRAY_BITMAP_SEED, poolId.toBuffer()], programId);\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nexport const ZERO = new BN(0);\r\nexport const ONE = new BN(1);\r\nexport const NEGATIVE_ONE = new BN(-1);\r\n\r\nexport const Q64 = new BN(1).shln(64);\r\nexport const Q128 = new BN(1).shln(128);\r\n\r\nexport const MaxU64 = Q64.sub(ONE);\r\n\r\nexport const U64Resolution = 64;\r\n\r\nexport const MaxUint128 = Q128.subn(1);\r\n\r\nexport const MIN_TICK = -443636;\r\nexport const MAX_TICK = -MIN_TICK;\r\n\r\nexport const MIN_SQRT_PRICE_X64: BN = new BN(\"4295048016\");\r\nexport const MAX_SQRT_PRICE_X64: BN = new BN(\"79226673521066979257578248091\");\r\n\r\nexport const MIN_SQRT_PRICE_X64_ADD_ONE: BN = new BN(\"4295048017\");\r\nexport const MAX_SQRT_PRICE_X64_SUB_ONE: BN = new BN(\"79226673521066979257578248090\");\r\n\r\n// export const MIN_TICK_ARRAY_START_INDEX = -307200;\r\n// export const MAX_TICK_ARRAY_START_INDEX = 306600;\r\n\r\nexport const BIT_PRECISION = 16;\r\nexport const LOG_B_2_X32 = \"59543866431248\";\r\nexport const LOG_B_P_ERR_MARGIN_LOWER_X64 = \"184467440737095516\";\r\nexport const LOG_B_P_ERR_MARGIN_UPPER_X64 = \"15793534762490258745\";\r\n\r\nexport const FEE_RATE_DENOMINATOR = new BN(10).pow(new BN(6));\r\n\r\nexport enum Fee {\r\n  rate_500 = 500, //  500 / 10e6 = 0.0005\r\n  rate_3000 = 3000, // 3000/ 10e6 = 0.003\r\n  rate_10000 = 10000, // 10000 /10e6 = 0.01\r\n}\r\nexport const TICK_SPACINGS: { [amount in Fee]: number } = {\r\n  [Fee.rate_500]: 10,\r\n  [Fee.rate_3000]: 60,\r\n  [Fee.rate_10000]: 200,\r\n};\r\n\r\nexport const mockCreatePoolInfo = {\r\n  version: 6,\r\n  liquidity: ZERO,\r\n  tickCurrent: 0,\r\n  observationIndex: 0,\r\n  observationUpdateDuration: 0,\r\n  feeGrowthGlobalX64A: ZERO,\r\n  feeGrowthGlobalX64B: ZERO,\r\n  protocolFeesTokenA: ZERO,\r\n  protocolFeesTokenB: ZERO,\r\n  swapInAmountTokenA: ZERO,\r\n  swapOutAmountTokenB: ZERO,\r\n  swapInAmountTokenB: ZERO,\r\n  swapOutAmountTokenA: ZERO,\r\n  tickArrayBitmap: [],\r\n\r\n  rewardInfos: [],\r\n\r\n  day: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  week: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  month: {\r\n    volume: 0,\r\n    volumeFee: 0,\r\n    feeA: 0,\r\n    feeB: 0,\r\n    feeApr: 0,\r\n    rewardApr: { A: 0, B: 0, C: 0 },\r\n    apr: 0,\r\n    priceMax: 0,\r\n    priceMin: 0,\r\n  },\r\n  tvl: 0,\r\n};\r\n\r\nexport const mockV3CreatePoolInfo = {\r\n  tvl: 0,\r\n  volumeQuote: 0,\r\n  mintAmountA: 0,\r\n  mintAmountB: 0,\r\n  rewardDefaultInfos: [],\r\n  farmUpcomingCount: 0,\r\n  farmOngoingCount: 0,\r\n  farmFinishedCount: 0,\r\n\r\n  day: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  week: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  month: {\r\n    volume: 0,\r\n    volumeQuote: 0,\r\n    volumeFee: 0,\r\n    apr: 0,\r\n    feeApr: 0,\r\n    priceMin: 0,\r\n    priceMax: 0,\r\n    rewardApr: [0],\r\n  },\r\n  pooltype: [],\r\n};\r\n\r\nexport const U64_IGNORE_RANGE = new BN(\"18446744073700000000\");\r\n","import { PublicKey, EpochInfo } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\nimport {\r\n  BIT_PRECISION,\r\n  Fee,\r\n  FEE_RATE_DENOMINATOR,\r\n  LOG_B_2_X32,\r\n  LOG_B_P_ERR_MARGIN_LOWER_X64,\r\n  LOG_B_P_ERR_MARGIN_UPPER_X64,\r\n  MAX_SQRT_PRICE_X64,\r\n  MAX_TICK,\r\n  MaxU64,\r\n  MaxUint128,\r\n  MIN_SQRT_PRICE_X64,\r\n  MIN_TICK,\r\n  NEGATIVE_ONE,\r\n  ONE,\r\n  Q64,\r\n  U64Resolution,\r\n  ZERO,\r\n  Q128,\r\n} from \"./constants\";\r\nimport { getPdaTickArrayAddress } from \"./pda\";\r\nimport { PoolUtils } from \"./pool\";\r\nimport { Tick, TickArray, TickUtils } from \"./tick\";\r\nimport { ReturnTypeGetLiquidityAmountOut, TickArrayBitmapExtensionType } from \"../type\";\r\nimport { ApiV3PoolInfoConcentratedItem } from \"@/api/type\";\r\nimport { getTransferAmountFeeV2, minExpirationTime } from \"@/common/transfer\";\r\nimport { TickQuery } from \"./tickQuery\";\r\n\r\nexport class MathUtil {\r\n  public static mulDivRoundingUp(a: BN, b: BN, denominator: BN): BN {\r\n    const numerator = a.mul(b);\r\n    let result = numerator.div(denominator);\r\n    if (!numerator.mod(denominator).eq(ZERO)) {\r\n      result = result.add(ONE);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static mulDivFloor(a: BN, b: BN, denominator: BN): BN {\r\n    if (denominator.eq(ZERO)) {\r\n      throw new Error(\"division by 0\");\r\n    }\r\n    return a.mul(b).div(denominator);\r\n  }\r\n\r\n  public static mulDivCeil(a: BN, b: BN, denominator: BN): BN {\r\n    if (denominator.eq(ZERO)) {\r\n      throw new Error(\"division by 0\");\r\n    }\r\n    const numerator = a.mul(b).add(denominator.sub(ONE));\r\n    return numerator.div(denominator);\r\n  }\r\n\r\n  public static x64ToDecimal(num: BN, decimalPlaces?: number): Decimal {\r\n    return new Decimal(num.toString()).div(Decimal.pow(2, 64)).toDecimalPlaces(decimalPlaces);\r\n  }\r\n\r\n  public static decimalToX64(num: Decimal): BN {\r\n    return new BN(num.mul(Decimal.pow(2, 64)).floor().toFixed());\r\n  }\r\n\r\n  public static wrappingSubU128(n0: BN, n1: BN): BN {\r\n    return n0.add(Q128).sub(n1).mod(Q128);\r\n  }\r\n}\r\n\r\n// sqrt price math\r\nfunction mulRightShift(val: BN, mulBy: BN): BN {\r\n  return signedRightShift(val.mul(mulBy), 64, 256);\r\n}\r\n\r\nfunction signedLeftShift(n0: BN, shiftBy: number, bitWidth: number): BN {\r\n  const twosN0 = n0.toTwos(bitWidth).shln(shiftBy);\r\n  twosN0.imaskn(bitWidth + 1);\r\n  return twosN0.fromTwos(bitWidth);\r\n}\r\n\r\nfunction signedRightShift(n0: BN, shiftBy: number, bitWidth: number): BN {\r\n  const twoN0 = n0.toTwos(bitWidth).shrn(shiftBy);\r\n  twoN0.imaskn(bitWidth - shiftBy + 1);\r\n  return twoN0.fromTwos(bitWidth - shiftBy);\r\n}\r\n\r\nexport class SqrtPriceMath {\r\n  public static sqrtPriceX64ToPrice(sqrtPriceX64: BN, decimalsA: number, decimalsB: number): Decimal {\r\n    return MathUtil.x64ToDecimal(sqrtPriceX64)\r\n      .pow(2)\r\n      .mul(Decimal.pow(10, decimalsA - decimalsB));\r\n  }\r\n\r\n  public static priceToSqrtPriceX64(price: Decimal, decimalsA: number, decimalsB: number): BN {\r\n    return MathUtil.decimalToX64(price.mul(Decimal.pow(10, decimalsB - decimalsA)).sqrt());\r\n  }\r\n\r\n  public static getNextSqrtPriceX64FromInput(sqrtPriceX64: BN, liquidity: BN, amountIn: BN, zeroForOne: boolean): BN {\r\n    if (!sqrtPriceX64.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\r\n    }\r\n    if (!liquidity.gt(ZERO)) {\r\n      throw new Error(\"liquidity must greater than 0\");\r\n    }\r\n\r\n    return zeroForOne\r\n      ? this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountIn, true)\r\n      : this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountIn, true);\r\n  }\r\n\r\n  public static getNextSqrtPriceX64FromOutput(sqrtPriceX64: BN, liquidity: BN, amountOut: BN, zeroForOne: boolean): BN {\r\n    if (!sqrtPriceX64.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64 must greater than 0\");\r\n    }\r\n    if (!liquidity.gt(ZERO)) {\r\n      throw new Error(\"liquidity must greater than 0\");\r\n    }\r\n\r\n    return zeroForOne\r\n      ? this.getNextSqrtPriceFromTokenAmountBRoundingDown(sqrtPriceX64, liquidity, amountOut, false)\r\n      : this.getNextSqrtPriceFromTokenAmountARoundingUp(sqrtPriceX64, liquidity, amountOut, false);\r\n  }\r\n\r\n  private static getNextSqrtPriceFromTokenAmountARoundingUp(\r\n    sqrtPriceX64: BN,\r\n    liquidity: BN,\r\n    amount: BN,\r\n    add: boolean,\r\n  ): BN {\r\n    if (amount.eq(ZERO)) return sqrtPriceX64;\r\n    const liquidityLeftShift = liquidity.shln(U64Resolution);\r\n\r\n    if (add) {\r\n      const numerator1 = liquidityLeftShift;\r\n      const denominator = liquidityLeftShift.add(amount.mul(sqrtPriceX64));\r\n      if (denominator.gte(numerator1)) {\r\n        return MathUtil.mulDivCeil(numerator1, sqrtPriceX64, denominator);\r\n      }\r\n      return MathUtil.mulDivRoundingUp(numerator1, ONE, numerator1.div(sqrtPriceX64).add(amount));\r\n    } else {\r\n      const amountMulSqrtPrice = amount.mul(sqrtPriceX64);\r\n      if (!liquidityLeftShift.gt(amountMulSqrtPrice)) {\r\n        throw new Error(\"getNextSqrtPriceFromTokenAmountARoundingUp,liquidityLeftShift must gt amountMulSqrtPrice\");\r\n      }\r\n      const denominator = liquidityLeftShift.sub(amountMulSqrtPrice);\r\n      return MathUtil.mulDivCeil(liquidityLeftShift, sqrtPriceX64, denominator);\r\n    }\r\n  }\r\n\r\n  private static getNextSqrtPriceFromTokenAmountBRoundingDown(\r\n    sqrtPriceX64: BN,\r\n    liquidity: BN,\r\n    amount: BN,\r\n    add: boolean,\r\n  ): BN {\r\n    const deltaY = amount.shln(U64Resolution);\r\n    if (add) {\r\n      return sqrtPriceX64.add(deltaY.div(liquidity));\r\n    } else {\r\n      const amountDivLiquidity = MathUtil.mulDivRoundingUp(deltaY, ONE, liquidity);\r\n      if (!sqrtPriceX64.gt(amountDivLiquidity)) {\r\n        throw new Error(\"getNextSqrtPriceFromTokenAmountBRoundingDown sqrtPriceX64 must gt amountDivLiquidity\");\r\n      }\r\n      return sqrtPriceX64.sub(amountDivLiquidity);\r\n    }\r\n  }\r\n\r\n  public static getSqrtPriceX64FromTick(tick: number): BN {\r\n    if (!Number.isInteger(tick)) {\r\n      throw new Error(\"tick must be integer\");\r\n    }\r\n    if (tick < MIN_TICK || tick > MAX_TICK) {\r\n      throw new Error(\"tick must be in MIN_TICK and MAX_TICK\");\r\n    }\r\n    const tickAbs: number = tick < 0 ? tick * -1 : tick;\r\n\r\n    let ratio: BN = (tickAbs & 0x1) != 0 ? new BN(\"18445821805675395072\") : new BN(\"18446744073709551616\");\r\n    if ((tickAbs & 0x2) != 0) ratio = mulRightShift(ratio, new BN(\"18444899583751176192\"));\r\n    if ((tickAbs & 0x4) != 0) ratio = mulRightShift(ratio, new BN(\"18443055278223355904\"));\r\n    if ((tickAbs & 0x8) != 0) ratio = mulRightShift(ratio, new BN(\"18439367220385607680\"));\r\n    if ((tickAbs & 0x10) != 0) ratio = mulRightShift(ratio, new BN(\"18431993317065453568\"));\r\n    if ((tickAbs & 0x20) != 0) ratio = mulRightShift(ratio, new BN(\"18417254355718170624\"));\r\n    if ((tickAbs & 0x40) != 0) ratio = mulRightShift(ratio, new BN(\"18387811781193609216\"));\r\n    if ((tickAbs & 0x80) != 0) ratio = mulRightShift(ratio, new BN(\"18329067761203558400\"));\r\n    if ((tickAbs & 0x100) != 0) ratio = mulRightShift(ratio, new BN(\"18212142134806163456\"));\r\n    if ((tickAbs & 0x200) != 0) ratio = mulRightShift(ratio, new BN(\"17980523815641700352\"));\r\n    if ((tickAbs & 0x400) != 0) ratio = mulRightShift(ratio, new BN(\"17526086738831433728\"));\r\n    if ((tickAbs & 0x800) != 0) ratio = mulRightShift(ratio, new BN(\"16651378430235570176\"));\r\n    if ((tickAbs & 0x1000) != 0) ratio = mulRightShift(ratio, new BN(\"15030750278694412288\"));\r\n    if ((tickAbs & 0x2000) != 0) ratio = mulRightShift(ratio, new BN(\"12247334978884435968\"));\r\n    if ((tickAbs & 0x4000) != 0) ratio = mulRightShift(ratio, new BN(\"8131365268886854656\"));\r\n    if ((tickAbs & 0x8000) != 0) ratio = mulRightShift(ratio, new BN(\"3584323654725218816\"));\r\n    if ((tickAbs & 0x10000) != 0) ratio = mulRightShift(ratio, new BN(\"696457651848324352\"));\r\n    if ((tickAbs & 0x20000) != 0) ratio = mulRightShift(ratio, new BN(\"26294789957507116\"));\r\n    if ((tickAbs & 0x40000) != 0) ratio = mulRightShift(ratio, new BN(\"37481735321082\"));\r\n\r\n    if (tick > 0) ratio = MaxUint128.div(ratio);\r\n    return ratio;\r\n  }\r\n\r\n  public static getTickFromPrice(price: Decimal, decimalsA: number, decimalsB: number): number {\r\n    return SqrtPriceMath.getTickFromSqrtPriceX64(SqrtPriceMath.priceToSqrtPriceX64(price, decimalsA, decimalsB));\r\n  }\r\n\r\n  public static getTickFromSqrtPriceX64(sqrtPriceX64: BN): number {\r\n    if (sqrtPriceX64.gt(MAX_SQRT_PRICE_X64) || sqrtPriceX64.lt(MIN_SQRT_PRICE_X64)) {\r\n      throw new Error(\"Provided sqrtPrice is not within the supported sqrtPrice range.\");\r\n    }\r\n\r\n    const msb = sqrtPriceX64.bitLength() - 1;\r\n    const adjustedMsb = new BN(msb - 64);\r\n    const log2pIntegerX32 = signedLeftShift(adjustedMsb, 32, 128);\r\n\r\n    let bit = new BN(\"8000000000000000\", \"hex\");\r\n    let precision = 0;\r\n    let log2pFractionX64 = new BN(0);\r\n\r\n    let r = msb >= 64 ? sqrtPriceX64.shrn(msb - 63) : sqrtPriceX64.shln(63 - msb);\r\n\r\n    while (bit.gt(new BN(0)) && precision < BIT_PRECISION) {\r\n      r = r.mul(r);\r\n      const rMoreThanTwo = r.shrn(127);\r\n      r = r.shrn(63 + rMoreThanTwo.toNumber());\r\n      log2pFractionX64 = log2pFractionX64.add(bit.mul(rMoreThanTwo));\r\n      bit = bit.shrn(1);\r\n      precision += 1;\r\n    }\r\n\r\n    const log2pFractionX32 = log2pFractionX64.shrn(32);\r\n\r\n    const log2pX32 = log2pIntegerX32.add(log2pFractionX32);\r\n    const logbpX64 = log2pX32.mul(new BN(LOG_B_2_X32));\r\n\r\n    const tickLow = signedRightShift(logbpX64.sub(new BN(LOG_B_P_ERR_MARGIN_LOWER_X64)), 64, 128).toNumber();\r\n    const tickHigh = signedRightShift(logbpX64.add(new BN(LOG_B_P_ERR_MARGIN_UPPER_X64)), 64, 128).toNumber();\r\n\r\n    if (tickLow == tickHigh) {\r\n      return tickLow;\r\n    } else {\r\n      const derivedTickHighSqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tickHigh);\r\n      return derivedTickHighSqrtPriceX64.lte(sqrtPriceX64) ? tickHigh : tickLow;\r\n    }\r\n  }\r\n}\r\n\r\n// tick math\r\nexport class TickMath {\r\n  public static getTickWithPriceAndTickspacing(\r\n    price: Decimal,\r\n    tickSpacing: number,\r\n    mintDecimalsA: number,\r\n    mintDecimalsB: number,\r\n  ): number {\r\n    const tick = SqrtPriceMath.getTickFromSqrtPriceX64(\r\n      SqrtPriceMath.priceToSqrtPriceX64(price, mintDecimalsA, mintDecimalsB),\r\n    );\r\n    let result = tick / tickSpacing;\r\n    if (result < 0) {\r\n      result = Math.floor(result);\r\n    } else {\r\n      result = Math.ceil(result);\r\n    }\r\n    return result * tickSpacing;\r\n  }\r\n\r\n  public static roundPriceWithTickspacing(\r\n    price: Decimal,\r\n    tickSpacing: number,\r\n    mintDecimalsA: number,\r\n    mintDecimalsB: number,\r\n  ): Decimal {\r\n    const tick = TickMath.getTickWithPriceAndTickspacing(price, tickSpacing, mintDecimalsA, mintDecimalsB);\r\n    const sqrtPriceX64 = SqrtPriceMath.getSqrtPriceX64FromTick(tick);\r\n    return SqrtPriceMath.sqrtPriceX64ToPrice(sqrtPriceX64, mintDecimalsA, mintDecimalsB);\r\n  }\r\n}\r\n\r\nexport class LiquidityMath {\r\n  public static addDelta(x: BN, y: BN): BN {\r\n    return x.add(y);\r\n  }\r\n\r\n  public static getTokenAmountAFromLiquidity(\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (!sqrtPriceX64A.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\r\n    }\r\n\r\n    const numerator1 = liquidity.ushln(U64Resolution);\r\n    const numerator2 = sqrtPriceX64B.sub(sqrtPriceX64A);\r\n\r\n    return roundUp\r\n      ? MathUtil.mulDivRoundingUp(MathUtil.mulDivCeil(numerator1, numerator2, sqrtPriceX64B), ONE, sqrtPriceX64A)\r\n      : MathUtil.mulDivFloor(numerator1, numerator2, sqrtPriceX64B).div(sqrtPriceX64A);\r\n  }\r\n\r\n  public static getTokenAmountBFromLiquidity(\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n    if (!sqrtPriceX64A.gt(ZERO)) {\r\n      throw new Error(\"sqrtPriceX64A must greater than 0\");\r\n    }\r\n\r\n    return roundUp\r\n      ? MathUtil.mulDivCeil(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64)\r\n      : MathUtil.mulDivFloor(liquidity, sqrtPriceX64B.sub(sqrtPriceX64A), Q64);\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmountA(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountA: BN, roundUp: boolean): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    const numerator = amountA.mul(sqrtPriceX64A).mul(sqrtPriceX64B);\r\n    const denominator = sqrtPriceX64B.sub(sqrtPriceX64A);\r\n    const result = numerator.div(denominator);\r\n\r\n    if (roundUp) {\r\n      return MathUtil.mulDivRoundingUp(result, ONE, MaxU64);\r\n    } else {\r\n      return result.shrn(U64Resolution);\r\n    }\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmountB(sqrtPriceX64A: BN, sqrtPriceX64B: BN, amountB: BN): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n    return MathUtil.mulDivFloor(amountB, MaxU64, sqrtPriceX64B.sub(sqrtPriceX64A));\r\n  }\r\n\r\n  public static getLiquidityFromTokenAmounts(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    amountA: BN,\r\n    amountB: BN,\r\n  ): BN {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\r\n      return LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, amountA, false);\r\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\r\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceCurrentX64, sqrtPriceX64B, amountA, false);\r\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceCurrentX64, amountB);\r\n      return liquidity0.lt(liquidity1) ? liquidity0 : liquidity1;\r\n    } else {\r\n      return LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, amountB);\r\n    }\r\n  }\r\n\r\n  public static getAmountsFromLiquidity(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    roundUp: boolean,\r\n  ): { amountA: BN; amountB: BN } {\r\n    if (sqrtPriceX64A.gt(sqrtPriceX64B)) {\r\n      [sqrtPriceX64A, sqrtPriceX64B] = [sqrtPriceX64B, sqrtPriceX64A];\r\n    }\r\n\r\n    if (sqrtPriceCurrentX64.lte(sqrtPriceX64A)) {\r\n      return {\r\n        amountA: LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\r\n        amountB: new BN(0),\r\n      };\r\n    } else if (sqrtPriceCurrentX64.lt(sqrtPriceX64B)) {\r\n      const amountA = LiquidityMath.getTokenAmountAFromLiquidity(\r\n        sqrtPriceCurrentX64,\r\n        sqrtPriceX64B,\r\n        liquidity,\r\n        roundUp,\r\n      );\r\n      const amountB = LiquidityMath.getTokenAmountBFromLiquidity(\r\n        sqrtPriceX64A,\r\n        sqrtPriceCurrentX64,\r\n        liquidity,\r\n        roundUp,\r\n      );\r\n      return { amountA, amountB };\r\n    } else {\r\n      return {\r\n        amountA: new BN(0),\r\n        amountB: LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64A, sqrtPriceX64B, liquidity, roundUp),\r\n      };\r\n    }\r\n  }\r\n\r\n  public static getAmountsFromLiquidityWithSlippage(\r\n    sqrtPriceCurrentX64: BN,\r\n    sqrtPriceX64A: BN,\r\n    sqrtPriceX64B: BN,\r\n    liquidity: BN,\r\n    amountMax: boolean,\r\n    roundUp: boolean,\r\n    amountSlippage: number,\r\n  ): { amountSlippageA: BN; amountSlippageB: BN } {\r\n    const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\r\n      sqrtPriceCurrentX64,\r\n      sqrtPriceX64A,\r\n      sqrtPriceX64B,\r\n      liquidity,\r\n      roundUp,\r\n    );\r\n    const coefficient = amountMax ? 1 + amountSlippage : 1 - amountSlippage;\r\n\r\n    const amount0Slippage = new BN(new Decimal(amountA.toString()).mul(coefficient).toFixed(0));\r\n    const amount1Slippage = new BN(new Decimal(amountB.toString()).mul(coefficient).toFixed(0));\r\n    return {\r\n      amountSlippageA: amount0Slippage,\r\n      amountSlippageB: amount1Slippage,\r\n    };\r\n  }\r\n\r\n  public static getAmountsOutFromLiquidity({\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountAddFee,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n\r\n    epochInfo: EpochInfo;\r\n    amountAddFee: boolean;\r\n  }): ReturnTypeGetLiquidityAmountOut {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\r\n\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, amountAddFee),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, amountAddFee),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        amountAddFee,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        amountAddFee,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n}\r\n\r\n// swap math\r\n\r\ntype SwapStep = {\r\n  sqrtPriceX64Next: BN;\r\n  amountIn: BN;\r\n  amountOut: BN;\r\n  feeAmount: BN;\r\n};\r\n\r\nexport interface StepComputations {\r\n  sqrtPriceStartX64: BN;\r\n  tickNext: number;\r\n  initialized: boolean;\r\n  sqrtPriceNextX64: BN;\r\n  amountIn: BN;\r\n  amountOut: BN;\r\n  feeAmount: BN;\r\n}\r\n\r\nexport abstract class SwapMath {\r\n  public static swapCompute(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    tickArrayBitmap: BN[],\r\n    tickarrayBitmapExtension: TickArrayBitmapExtensionType,\r\n    zeroForOne: boolean,\r\n    fee: number,\r\n    liquidity: BN,\r\n    currentTick: number,\r\n    tickSpacing: number,\r\n    currentSqrtPriceX64: BN,\r\n    amountSpecified: BN,\r\n    lastSavedTickArrayStartIndex: number,\r\n    sqrtPriceLimitX64?: BN,\r\n    catchLiquidityInsufficient = false,\r\n  ): {\r\n    allTrade: boolean;\r\n    amountSpecifiedRemaining: BN;\r\n    amountCalculated: BN;\r\n    feeAmount: BN;\r\n    sqrtPriceX64: BN;\r\n    liquidity: BN;\r\n    tickCurrent: number;\r\n    accounts: PublicKey[];\r\n  } {\r\n    if (amountSpecified.eq(ZERO)) {\r\n      throw new Error(\"amountSpecified must not be 0\");\r\n    }\r\n    if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n    if (zeroForOne) {\r\n      if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\r\n        throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\r\n      }\r\n\r\n      if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\r\n        throw new Error(\"sqrtPriceX64 must smaller than current\");\r\n      }\r\n    } else {\r\n      if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\r\n        throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\r\n      }\r\n\r\n      if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\r\n        throw new Error(\"sqrtPriceX64 must greater than current\");\r\n      }\r\n    }\r\n    const baseInput = amountSpecified.gt(ZERO);\r\n\r\n    const state = {\r\n      amountSpecifiedRemaining: amountSpecified,\r\n      amountCalculated: ZERO,\r\n      sqrtPriceX64: currentSqrtPriceX64,\r\n      tick:\r\n        currentTick > lastSavedTickArrayStartIndex\r\n          ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\r\n          : lastSavedTickArrayStartIndex,\r\n      accounts: [] as PublicKey[],\r\n      liquidity,\r\n      feeAmount: new BN(0),\r\n    };\r\n    let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\r\n    let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\r\n    let loopCount = 0;\r\n    let t = !zeroForOne && tickArrayCurrent.startTickIndex === state.tick;\r\n    while (\r\n      !state.amountSpecifiedRemaining.eq(ZERO) &&\r\n      !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\r\n      // state.tick < MAX_TICK &&\r\n      // state.tick > MIN_TICK\r\n    ) {\r\n      if (loopCount > 10) {\r\n        // throw Error('liquidity limit')\r\n      }\r\n      const step: Partial<StepComputations> = {};\r\n      step.sqrtPriceStartX64 = state.sqrtPriceX64;\r\n\r\n      const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne, t);\r\n\r\n      let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\r\n      let tickArrayAddress: null | PublicKey = null;\r\n\r\n      if (!nextInitTick?.liquidityGross.gtn(0)) {\r\n        const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\r\n          {\r\n            tickCurrent: state.tick,\r\n            tickSpacing,\r\n            tickArrayBitmap,\r\n            exBitmapInfo: tickarrayBitmapExtension,\r\n          },\r\n          tickAarrayStartIndex,\r\n          zeroForOne,\r\n        );\r\n        if (!nextInitTickArrayIndex.isExist) {\r\n          if (catchLiquidityInsufficient) {\r\n            return {\r\n              allTrade: false,\r\n              amountSpecifiedRemaining: state.amountSpecifiedRemaining,\r\n              amountCalculated: state.amountCalculated,\r\n              feeAmount: state.feeAmount,\r\n              sqrtPriceX64: state.sqrtPriceX64,\r\n              liquidity: state.liquidity,\r\n              tickCurrent: state.tick,\r\n              accounts: state.accounts,\r\n            };\r\n          }\r\n          throw Error(\"swapCompute LiquidityInsufficient\");\r\n        }\r\n        tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\r\n\r\n        const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\r\n          programId,\r\n          poolId,\r\n          tickAarrayStartIndex,\r\n        );\r\n        tickArrayAddress = expectedNextTickArrayAddress;\r\n        tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\r\n\r\n        try {\r\n          nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\r\n        } catch (e) {\r\n          throw Error(\"not found next tick info\");\r\n        }\r\n      }\r\n\r\n      step.tickNext = nextInitTick.tick;\r\n      step.initialized = nextInitTick.liquidityGross.gtn(0);\r\n      if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\r\n        state.accounts.push(tickArrayAddress);\r\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n      }\r\n      if (step.tickNext < MIN_TICK) {\r\n        step.tickNext = MIN_TICK;\r\n      } else if (step.tickNext > MAX_TICK) {\r\n        step.tickNext = MAX_TICK;\r\n      }\r\n\r\n      step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\r\n      let targetPrice: BN;\r\n      if (\r\n        (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\r\n        (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\r\n      ) {\r\n        targetPrice = sqrtPriceLimitX64;\r\n      } else {\r\n        targetPrice = step.sqrtPriceNextX64;\r\n      }\r\n      [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\r\n        state.sqrtPriceX64,\r\n        targetPrice,\r\n        state.liquidity,\r\n        state.amountSpecifiedRemaining,\r\n        fee,\r\n      );\r\n\r\n      state.feeAmount = state.feeAmount.add(step.feeAmount);\r\n\r\n      if (baseInput) {\r\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\r\n        state.amountCalculated = state.amountCalculated.sub(step.amountOut);\r\n      } else {\r\n        state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\r\n        state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\r\n      }\r\n      if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\r\n        if (step.initialized) {\r\n          let liquidityNet = nextInitTick.liquidityNet;\r\n          if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\r\n          state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\r\n        }\r\n\r\n        t = step.tickNext != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === step.tickNext;\r\n        state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext; //\r\n      } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\r\n        const _T = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\r\n        t = _T != state.tick && !zeroForOne && tickArrayCurrent.startTickIndex === _T;\r\n        state.tick = _T;\r\n      }\r\n      ++loopCount;\r\n    }\r\n\r\n    try {\r\n      const { nextStartIndex: tickAarrayStartIndex, isExist } = TickQuery.nextInitializedTickArray(\r\n        state.tick,\r\n        tickSpacing,\r\n        zeroForOne,\r\n        tickArrayBitmap,\r\n        tickarrayBitmapExtension,\r\n      );\r\n      if (isExist && lastSavedTickArrayStartIndex !== tickAarrayStartIndex) {\r\n        state.accounts.push(getPdaTickArrayAddress(programId, poolId, tickAarrayStartIndex).publicKey);\r\n        lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n      }\r\n    } catch (e) {\r\n      /* empty */\r\n    }\r\n\r\n    return {\r\n      allTrade: true,\r\n      amountSpecifiedRemaining: ZERO,\r\n      amountCalculated: state.amountCalculated,\r\n      feeAmount: state.feeAmount,\r\n      sqrtPriceX64: state.sqrtPriceX64,\r\n      liquidity: state.liquidity,\r\n      tickCurrent: state.tick,\r\n      accounts: state.accounts,\r\n    };\r\n  }\r\n  // public static swapCompute(\r\n  //   programId: PublicKey,\r\n  //   poolId: PublicKey,\r\n  //   tickArrayCache: { [key: string]: TickArray },\r\n  //   tickArrayBitmap: BN[],\r\n  //   tickarrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  //   zeroForOne: boolean,\r\n  //   fee: number,\r\n  //   liquidity: BN,\r\n  //   currentTick: number,\r\n  //   tickSpacing: number,\r\n  //   currentSqrtPriceX64: BN,\r\n  //   amountSpecified: BN,\r\n  //   lastSavedTickArrayStartIndex: number,\r\n  //   sqrtPriceLimitX64?: BN,\r\n  // ): {\r\n  //   amountCalculated: BN;\r\n  //   feeAmount: BN;\r\n  //   sqrtPriceX64: BN;\r\n  //   liquidity: BN;\r\n  //   tickCurrent: number;\r\n  //   accounts: PublicKey[];\r\n  // } {\r\n  //   if (amountSpecified.eq(ZERO)) {\r\n  //     throw new Error(\"amountSpecified must not be 0\");\r\n  //   }\r\n  //   if (!sqrtPriceLimitX64) sqrtPriceLimitX64 = zeroForOne ? MIN_SQRT_PRICE_X64.add(ONE) : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n  //   if (zeroForOne) {\r\n  //     if (sqrtPriceLimitX64.lt(MIN_SQRT_PRICE_X64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must greater than MIN_SQRT_PRICE_X64\");\r\n  //     }\r\n\r\n  //     if (sqrtPriceLimitX64.gte(currentSqrtPriceX64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must smaller than current\");\r\n  //     }\r\n  //   } else {\r\n  //     if (sqrtPriceLimitX64.gt(MAX_SQRT_PRICE_X64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must smaller than MAX_SQRT_PRICE_X64\");\r\n  //     }\r\n\r\n  //     if (sqrtPriceLimitX64.lte(currentSqrtPriceX64)) {\r\n  //       throw new Error(\"sqrtPriceX64 must greater than current\");\r\n  //     }\r\n  //   }\r\n  //   const baseInput = amountSpecified.gt(ZERO);\r\n\r\n  //   const state = {\r\n  //     amountSpecifiedRemaining: amountSpecified,\r\n  //     amountCalculated: ZERO,\r\n  //     sqrtPriceX64: currentSqrtPriceX64,\r\n  //     tick:\r\n  //       currentTick > lastSavedTickArrayStartIndex\r\n  //         ? Math.min(lastSavedTickArrayStartIndex + TickQuery.tickCount(tickSpacing) - 1, currentTick)\r\n  //         : lastSavedTickArrayStartIndex,\r\n  //     accounts: [] as PublicKey[],\r\n  //     liquidity,\r\n  //     feeAmount: new BN(0),\r\n  //   };\r\n  //   let tickAarrayStartIndex = lastSavedTickArrayStartIndex;\r\n  //   let tickArrayCurrent = tickArrayCache[lastSavedTickArrayStartIndex];\r\n  //   let loopCount = 0;\r\n  //   while (\r\n  //     !state.amountSpecifiedRemaining.eq(ZERO) &&\r\n  //     !state.sqrtPriceX64.eq(sqrtPriceLimitX64)\r\n  //     // state.tick < MAX_TICK &&\r\n  //     // state.tick > MIN_TICK\r\n  //   ) {\r\n  //     if (loopCount > 10) {\r\n  //       throw Error(\"liquidity limit\");\r\n  //     }\r\n  //     const step: Partial<StepComputations> = {};\r\n  //     step.sqrtPriceStartX64 = state.sqrtPriceX64;\r\n\r\n  //     const tickState: Tick | null = TickUtils.nextInitTick(tickArrayCurrent, state.tick, tickSpacing, zeroForOne);\r\n\r\n  //     let nextInitTick: Tick | null = tickState ? tickState : null; // TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne)\r\n  //     let tickArrayAddress: PublicKey | null = null;\r\n\r\n  //     if (!nextInitTick?.liquidityGross.gtn(0)) {\r\n  //       const nextInitTickArrayIndex = PoolUtils.nextInitializedTickArrayStartIndex(\r\n  //         {\r\n  //           tickCurrent: state.tick,\r\n  //           tickSpacing,\r\n  //           tickArrayBitmap,\r\n  //           exBitmapInfo: tickarrayBitmapExtension,\r\n  //         },\r\n  //         tickAarrayStartIndex,\r\n  //         zeroForOne,\r\n  //       );\r\n  //       if (!nextInitTickArrayIndex.isExist) {\r\n  //         throw Error(\"swapCompute LiquidityInsufficient\");\r\n  //       }\r\n  //       tickAarrayStartIndex = nextInitTickArrayIndex.nextStartIndex;\r\n\r\n  //       const { publicKey: expectedNextTickArrayAddress } = getPdaTickArrayAddress(\r\n  //         programId,\r\n  //         poolId,\r\n  //         tickAarrayStartIndex,\r\n  //       );\r\n  //       tickArrayAddress = expectedNextTickArrayAddress;\r\n  //       tickArrayCurrent = tickArrayCache[tickAarrayStartIndex];\r\n\r\n  //       nextInitTick = TickUtils.firstInitializedTick(tickArrayCurrent, zeroForOne);\r\n  //     }\r\n\r\n  //     step.tickNext = nextInitTick.tick;\r\n  //     step.initialized = nextInitTick.liquidityGross.gtn(0);\r\n  //     if (lastSavedTickArrayStartIndex !== tickAarrayStartIndex && tickArrayAddress) {\r\n  //       state.accounts.push(tickArrayAddress);\r\n  //       lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n  //     }\r\n  //     if (step.tickNext < MIN_TICK) {\r\n  //       step.tickNext = MIN_TICK;\r\n  //     } else if (step.tickNext > MAX_TICK) {\r\n  //       step.tickNext = MAX_TICK;\r\n  //     }\r\n\r\n  //     step.sqrtPriceNextX64 = SqrtPriceMath.getSqrtPriceX64FromTick(step.tickNext);\r\n  //     let targetPrice: BN;\r\n  //     if (\r\n  //       (zeroForOne && step.sqrtPriceNextX64.lt(sqrtPriceLimitX64)) ||\r\n  //       (!zeroForOne && step.sqrtPriceNextX64.gt(sqrtPriceLimitX64))\r\n  //     ) {\r\n  //       targetPrice = sqrtPriceLimitX64;\r\n  //     } else {\r\n  //       targetPrice = step.sqrtPriceNextX64;\r\n  //     }\r\n  //     [state.sqrtPriceX64, step.amountIn, step.amountOut, step.feeAmount] = SwapMath.swapStepCompute(\r\n  //       state.sqrtPriceX64,\r\n  //       targetPrice,\r\n  //       state.liquidity,\r\n  //       state.amountSpecifiedRemaining,\r\n  //       fee,\r\n  //     );\r\n\r\n  //     state.feeAmount = state.feeAmount.add(step.feeAmount);\r\n\r\n  //     if (baseInput) {\r\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.sub(step.amountIn.add(step.feeAmount));\r\n  //       state.amountCalculated = state.amountCalculated.sub(step.amountOut);\r\n  //     } else {\r\n  //       state.amountSpecifiedRemaining = state.amountSpecifiedRemaining.add(step.amountOut);\r\n  //       state.amountCalculated = state.amountCalculated.add(step.amountIn.add(step.feeAmount));\r\n  //     }\r\n  //     if (state.sqrtPriceX64.eq(step.sqrtPriceNextX64)) {\r\n  //       if (step.initialized) {\r\n  //         let liquidityNet = nextInitTick.liquidityNet;\r\n  //         if (zeroForOne) liquidityNet = liquidityNet.mul(NEGATIVE_ONE);\r\n  //         state.liquidity = LiquidityMath.addDelta(state.liquidity, liquidityNet);\r\n  //       }\r\n  //       state.tick = zeroForOne ? step.tickNext - 1 : step.tickNext;\r\n  //     } else if (state.sqrtPriceX64 != step.sqrtPriceStartX64) {\r\n  //       state.tick = SqrtPriceMath.getTickFromSqrtPriceX64(state.sqrtPriceX64);\r\n  //     }\r\n  //     ++loopCount;\r\n  //   }\r\n\r\n  //   // try {\r\n  //   //   console.log('state.tick', state.tick)\r\n  //   //   const { nextStartIndex: tickAarrayStartIndex } = TickQuery.nextInitializedTickArray(\r\n  //   //     state.tick,\r\n  //   //     tickSpacing,\r\n  //   //     zeroForOne,\r\n  //   //     tickArrayBitmap,\r\n  //   //     tickarrayBitmapExtension,\r\n  //   //   );\r\n  //   //   if (\r\n  //   //     lastSavedTickArrayStartIndex !== tickAarrayStartIndex\r\n  //   //   ) {\r\n  //   //     state.accounts.push(getPdaTickArrayAddress(\r\n  //   //       programId,\r\n  //   //       poolId,\r\n  //   //       tickAarrayStartIndex,\r\n  //   //     ).publicKey)\r\n  //   //     lastSavedTickArrayStartIndex = tickAarrayStartIndex;\r\n  //   //   }\r\n  //   // } catch (e) { /* empty */ }\r\n\r\n  //   return {\r\n  //     amountCalculated: state.amountCalculated,\r\n  //     feeAmount: state.feeAmount,\r\n  //     sqrtPriceX64: state.sqrtPriceX64,\r\n  //     liquidity: state.liquidity,\r\n  //     tickCurrent: state.tick,\r\n  //     accounts: state.accounts,\r\n  //   };\r\n  // }\r\n\r\n  private static swapStepCompute(\r\n    sqrtPriceX64Current: BN,\r\n    sqrtPriceX64Target: BN,\r\n    liquidity: BN,\r\n    amountRemaining: BN,\r\n    feeRate: Fee,\r\n  ): [BN, BN, BN, BN] {\r\n    const swapStep: SwapStep = {\r\n      sqrtPriceX64Next: new BN(0),\r\n      amountIn: new BN(0),\r\n      amountOut: new BN(0),\r\n      feeAmount: new BN(0),\r\n    };\r\n\r\n    const zeroForOne = sqrtPriceX64Current.gte(sqrtPriceX64Target);\r\n    const baseInput = amountRemaining.gte(ZERO);\r\n\r\n    if (baseInput) {\r\n      const amountRemainingSubtractFee = MathUtil.mulDivFloor(\r\n        amountRemaining,\r\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate.toString())),\r\n        FEE_RATE_DENOMINATOR,\r\n      );\r\n      swapStep.amountIn = zeroForOne\r\n        ? LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, true)\r\n        : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, true);\r\n      if (amountRemainingSubtractFee.gte(swapStep.amountIn)) {\r\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\r\n      } else {\r\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromInput(\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          amountRemainingSubtractFee,\r\n          zeroForOne,\r\n        );\r\n      }\r\n    } else {\r\n      swapStep.amountOut = zeroForOne\r\n        ? LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Target, sqrtPriceX64Current, liquidity, false)\r\n        : LiquidityMath.getTokenAmountAFromLiquidity(sqrtPriceX64Current, sqrtPriceX64Target, liquidity, false);\r\n      if (amountRemaining.mul(NEGATIVE_ONE).gte(swapStep.amountOut)) {\r\n        swapStep.sqrtPriceX64Next = sqrtPriceX64Target;\r\n      } else {\r\n        swapStep.sqrtPriceX64Next = SqrtPriceMath.getNextSqrtPriceX64FromOutput(\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          amountRemaining.mul(NEGATIVE_ONE),\r\n          zeroForOne,\r\n        );\r\n      }\r\n    }\r\n\r\n    const reachTargetPrice = sqrtPriceX64Target.eq(swapStep.sqrtPriceX64Next);\r\n\r\n    if (zeroForOne) {\r\n      if (!(reachTargetPrice && baseInput)) {\r\n        swapStep.amountIn = LiquidityMath.getTokenAmountAFromLiquidity(\r\n          swapStep.sqrtPriceX64Next,\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          true,\r\n        );\r\n      }\r\n\r\n      if (!(reachTargetPrice && !baseInput)) {\r\n        swapStep.amountOut = LiquidityMath.getTokenAmountBFromLiquidity(\r\n          swapStep.sqrtPriceX64Next,\r\n          sqrtPriceX64Current,\r\n          liquidity,\r\n          false,\r\n        );\r\n      }\r\n    } else {\r\n      swapStep.amountIn =\r\n        reachTargetPrice && baseInput\r\n          ? swapStep.amountIn\r\n          : LiquidityMath.getTokenAmountBFromLiquidity(sqrtPriceX64Current, swapStep.sqrtPriceX64Next, liquidity, true);\r\n      swapStep.amountOut =\r\n        reachTargetPrice && !baseInput\r\n          ? swapStep.amountOut\r\n          : LiquidityMath.getTokenAmountAFromLiquidity(\r\n              sqrtPriceX64Current,\r\n              swapStep.sqrtPriceX64Next,\r\n              liquidity,\r\n              false,\r\n            );\r\n    }\r\n\r\n    if (!baseInput && swapStep.amountOut.gt(amountRemaining.mul(NEGATIVE_ONE))) {\r\n      swapStep.amountOut = amountRemaining.mul(NEGATIVE_ONE);\r\n    }\r\n    if (baseInput && !swapStep.sqrtPriceX64Next.eq(sqrtPriceX64Target)) {\r\n      swapStep.feeAmount = amountRemaining.sub(swapStep.amountIn);\r\n    } else {\r\n      swapStep.feeAmount = MathUtil.mulDivCeil(\r\n        swapStep.amountIn,\r\n        new BN(feeRate),\r\n        FEE_RATE_DENOMINATOR.sub(new BN(feeRate)),\r\n      );\r\n    }\r\n    return [swapStep.sqrtPriceX64Next, swapStep.amountIn, swapStep.amountOut, swapStep.feeAmount];\r\n  }\r\n}\r\n","import { PublicKey, Connection, EpochInfo } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport {\r\n  ClmmPoolInfo,\r\n  ClmmPoolRewardInfo,\r\n  ClmmPoolRewardLayoutInfo,\r\n  ReturnTypeGetLiquidityAmountOut,\r\n  TickArrayBitmapExtensionType,\r\n  ReturnTypeFetchExBitmaps,\r\n  ReturnTypeFetchMultiplePoolTickArrays,\r\n  SDKParsedConcentratedInfo,\r\n  ReturnTypeComputeAmountOut,\r\n  ReturnTypeComputeAmountOutFormat,\r\n  ComputeClmmPoolInfo,\r\n} from \"../type\";\r\n\r\nimport { ApiV3PoolInfoConcentratedItem, ApiV3Token } from \"@/api/type\";\r\n\r\nimport { NEGATIVE_ONE, Q64, ZERO, MAX_TICK, MIN_TICK, MIN_SQRT_PRICE_X64, MAX_SQRT_PRICE_X64 } from \"./constants\";\r\nimport { MathUtil, SwapMath, SqrtPriceMath, LiquidityMath } from \"./math\";\r\nimport { getPdaTickArrayAddress, getPdaPersonalPositionAddress, getPdaExBitmapAccount } from \"./pda\";\r\nimport { TickArray, TickUtils, TICK_ARRAY_BITMAP_SIZE, Tick } from \"./tick\";\r\nimport { TickArrayBitmap, TickArrayBitmapExtensionUtils } from \"./tickarrayBitmap\";\r\nimport { TickQuery } from \"./tickQuery\";\r\nimport { TickArrayBitmapExtensionLayout, PositionInfoLayout, TickArrayLayout, PoolInfoLayout } from \"../layout\";\r\nimport {\r\n  getMultipleAccountsInfo,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n  getTransferAmountFeeV2,\r\n  minExpirationTime,\r\n  solToWSol,\r\n} from \"@/common\";\r\nimport { TokenAccountRaw } from \"../../account/types\";\r\nimport { Price, Percent, TokenAmount, Token } from \"../../../module\";\r\nimport { PositionUtils } from \"./position\";\r\nimport Decimal from \"decimal.js\";\r\nimport { TOKEN_2022_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nexport class PoolUtils {\r\n  public static getOutputAmountAndRemainAccounts(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    inputTokenMint: PublicKey,\r\n    inputAmount: BN,\r\n    sqrtPriceLimitX64?: BN,\r\n    catchLiquidityInsufficient = false,\r\n  ): {\r\n    allTrade: boolean;\r\n    expectedAmountOut: BN;\r\n    remainingAccounts: PublicKey[];\r\n    executionPrice: BN;\r\n    feeAmount: BN;\r\n  } {\r\n    const zeroForOne = inputTokenMint.toBase58() === poolInfo.mintA.address;\r\n\r\n    const allNeededAccounts: PublicKey[] = [];\r\n    const {\r\n      isExist,\r\n      startIndex: firstTickArrayStartIndex,\r\n      nextAccountMeta,\r\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\r\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\r\n\r\n    // try {\r\n    //   const preTick = this.preInitializedTickArrayStartIndex(poolInfo, !zeroForOne)\r\n    //   if (preTick.isExist) {\r\n    //     const { publicKey: address } = getPdaTickArrayAddress(\r\n    //       poolInfo.programId,\r\n    //       poolInfo.id,\r\n    //       preTick.nextStartIndex\r\n    //     );\r\n    //     allNeededAccounts.push(address)\r\n    //   }\r\n    // } catch (e) { /* empty */ }\r\n\r\n    allNeededAccounts.push(nextAccountMeta);\r\n    const {\r\n      allTrade,\r\n      amountCalculated: outputAmount,\r\n      accounts: reaminAccounts,\r\n      sqrtPriceX64: executionPrice,\r\n      feeAmount,\r\n    } = SwapMath.swapCompute(\r\n      poolInfo.programId,\r\n      poolInfo.id,\r\n      tickArrayCache,\r\n      poolInfo.tickArrayBitmap,\r\n      poolInfo.exBitmapInfo,\r\n      zeroForOne,\r\n      poolInfo.ammConfig.tradeFeeRate,\r\n      poolInfo.liquidity,\r\n      poolInfo.tickCurrent,\r\n      poolInfo.tickSpacing,\r\n      poolInfo.sqrtPriceX64,\r\n      inputAmount,\r\n      firstTickArrayStartIndex,\r\n      sqrtPriceLimitX64,\r\n      catchLiquidityInsufficient,\r\n    );\r\n    allNeededAccounts.push(...reaminAccounts);\r\n    return {\r\n      allTrade,\r\n      expectedAmountOut: outputAmount.mul(NEGATIVE_ONE),\r\n      remainingAccounts: allNeededAccounts,\r\n      executionPrice,\r\n      feeAmount,\r\n    };\r\n  }\r\n\r\n  public static getInputAmountAndRemainAccounts(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    tickArrayCache: { [key: string]: TickArray },\r\n    outputTokenMint: PublicKey,\r\n    outputAmount: BN,\r\n    sqrtPriceLimitX64?: BN,\r\n  ): { expectedAmountIn: BN; remainingAccounts: PublicKey[]; executionPrice: BN; feeAmount: BN } {\r\n    const zeroForOne = outputTokenMint.toBase58() === poolInfo.mintB.address;\r\n\r\n    const allNeededAccounts: PublicKey[] = [];\r\n    const {\r\n      isExist,\r\n      startIndex: firstTickArrayStartIndex,\r\n      nextAccountMeta,\r\n    } = this.getFirstInitializedTickArray(poolInfo, zeroForOne);\r\n    if (!isExist || firstTickArrayStartIndex === undefined || !nextAccountMeta) throw new Error(\"Invalid tick array\");\r\n\r\n    try {\r\n      const preTick = this.preInitializedTickArrayStartIndex(poolInfo, zeroForOne);\r\n      if (preTick.isExist) {\r\n        const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, preTick.nextStartIndex);\r\n        allNeededAccounts.push(address);\r\n      }\r\n    } catch (e) {\r\n      /* empty */\r\n    }\r\n\r\n    allNeededAccounts.push(nextAccountMeta);\r\n    const {\r\n      amountCalculated: inputAmount,\r\n      accounts: reaminAccounts,\r\n      sqrtPriceX64: executionPrice,\r\n      feeAmount,\r\n    } = SwapMath.swapCompute(\r\n      poolInfo.programId,\r\n      poolInfo.id,\r\n      tickArrayCache,\r\n      poolInfo.tickArrayBitmap,\r\n      poolInfo.exBitmapInfo,\r\n      zeroForOne,\r\n      poolInfo.ammConfig.tradeFeeRate,\r\n      poolInfo.liquidity,\r\n      poolInfo.tickCurrent,\r\n      poolInfo.tickSpacing,\r\n      poolInfo.sqrtPriceX64,\r\n      outputAmount.mul(NEGATIVE_ONE),\r\n      firstTickArrayStartIndex,\r\n      sqrtPriceLimitX64,\r\n    );\r\n    allNeededAccounts.push(...reaminAccounts);\r\n    return { expectedAmountIn: inputAmount, remainingAccounts: allNeededAccounts, executionPrice, feeAmount };\r\n  }\r\n\r\n  public static getFirstInitializedTickArray(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    zeroForOne: boolean,\r\n  ):\r\n    | { isExist: true; startIndex: number; nextAccountMeta: PublicKey }\r\n    | { isExist: false; startIndex: undefined; nextAccountMeta: undefined } {\r\n    const { isInitialized, startIndex } = PoolUtils.isOverflowDefaultTickarrayBitmap(poolInfo.tickSpacing, [\r\n      poolInfo.tickCurrent,\r\n    ])\r\n      ? TickArrayBitmapExtensionUtils.checkTickArrayIsInit(\r\n          TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\r\n          poolInfo.tickSpacing,\r\n          poolInfo.exBitmapInfo,\r\n        )\r\n      : TickUtils.checkTickArrayIsInitialized(\r\n          TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\r\n          poolInfo.tickCurrent,\r\n          poolInfo.tickSpacing,\r\n        );\r\n\r\n    if (isInitialized) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, startIndex);\r\n      return {\r\n        isExist: true,\r\n        startIndex,\r\n        nextAccountMeta: address,\r\n      };\r\n    }\r\n    const { isExist, nextStartIndex } = this.nextInitializedTickArrayStartIndex(\r\n      poolInfo,\r\n      TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing),\r\n      zeroForOne,\r\n    );\r\n    if (isExist) {\r\n      const { publicKey: address } = getPdaTickArrayAddress(poolInfo.programId, poolInfo.id, nextStartIndex);\r\n      return {\r\n        isExist: true,\r\n        startIndex: nextStartIndex,\r\n        nextAccountMeta: address,\r\n      };\r\n    }\r\n    return { isExist: false, nextAccountMeta: undefined, startIndex: undefined };\r\n  }\r\n\r\n  public static preInitializedTickArrayStartIndex(\r\n    poolInfo: ComputeClmmPoolInfo,\r\n    zeroForOne: boolean,\r\n  ): { isExist: boolean; nextStartIndex: number } {\r\n    const currentOffset = Math.floor(poolInfo.tickCurrent / TickQuery.tickCount(poolInfo.tickSpacing));\r\n\r\n    const result: number[] = !zeroForOne\r\n      ? TickUtils.searchLowBitFromStart(\r\n          poolInfo.tickArrayBitmap,\r\n          poolInfo.exBitmapInfo,\r\n          currentOffset - 1,\r\n          1,\r\n          poolInfo.tickSpacing,\r\n        )\r\n      : TickUtils.searchHightBitFromStart(\r\n          poolInfo.tickArrayBitmap,\r\n          poolInfo.exBitmapInfo,\r\n          currentOffset + 1,\r\n          1,\r\n          poolInfo.tickSpacing,\r\n        );\r\n\r\n    return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 };\r\n  }\r\n\r\n  public static nextInitializedTickArrayStartIndex(\r\n    poolInfo:\r\n      | {\r\n          tickCurrent: number;\r\n          tickSpacing: number;\r\n          tickArrayBitmap: BN[];\r\n          exBitmapInfo: TickArrayBitmapExtensionType;\r\n        }\r\n      | ClmmPoolInfo,\r\n    lastTickArrayStartIndex: number,\r\n    zeroForOne: boolean,\r\n  ): { isExist: boolean; nextStartIndex: number } {\r\n    lastTickArrayStartIndex = TickQuery.getArrayStartIndex(poolInfo.tickCurrent, poolInfo.tickSpacing);\r\n\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (true) {\r\n      const { isInit: startIsInit, tickIndex: startIndex } = TickArrayBitmap.nextInitializedTickArrayStartIndex(\r\n        TickUtils.mergeTickArrayBitmap(poolInfo.tickArrayBitmap),\r\n        lastTickArrayStartIndex,\r\n        poolInfo.tickSpacing,\r\n        zeroForOne,\r\n      );\r\n      if (startIsInit) {\r\n        return { isExist: true, nextStartIndex: startIndex };\r\n      }\r\n      lastTickArrayStartIndex = startIndex;\r\n\r\n      const { isInit, tickIndex } = TickArrayBitmapExtensionUtils.nextInitializedTickArrayFromOneBitmap(\r\n        lastTickArrayStartIndex,\r\n        poolInfo.tickSpacing,\r\n        zeroForOne,\r\n        poolInfo.exBitmapInfo,\r\n      );\r\n      if (isInit) return { isExist: true, nextStartIndex: tickIndex };\r\n\r\n      lastTickArrayStartIndex = tickIndex;\r\n\r\n      if (lastTickArrayStartIndex < MIN_TICK || lastTickArrayStartIndex > MAX_TICK)\r\n        return { isExist: false, nextStartIndex: 0 };\r\n    }\r\n\r\n    // const tickArrayBitmap = TickUtils.mergeTickArrayBitmap(\r\n    //   poolInfo.tickArrayBitmap\r\n    // );\r\n    // const currentOffset = TickUtils.getTickArrayOffsetInBitmapByTick(\r\n    //   poolInfo.tickCurrent,\r\n    //   poolInfo.tickSpacing\r\n    // );\r\n    // const result: number[] = zeroForOne ? TickUtils.searchLowBitFromStart(\r\n    //   tickArrayBitmap,\r\n    //   currentOffset - 1,\r\n    //   0,\r\n    //   1,\r\n    //   poolInfo.tickSpacing\r\n    // ) : TickUtils.searchHightBitFromStart(\r\n    //   tickArrayBitmap,\r\n    //   currentOffset,\r\n    //   1024,\r\n    //   1,\r\n    //   poolInfo.tickSpacing\r\n    // );\r\n\r\n    // return result.length > 0 ? { isExist: true, nextStartIndex: result[0] } : { isExist: false, nextStartIndex: 0 }\r\n  }\r\n\r\n  public static async updatePoolRewardInfos({\r\n    connection,\r\n    apiPoolInfo,\r\n    chainTime,\r\n    poolLiquidity,\r\n    rewardInfos,\r\n  }: {\r\n    connection: Connection;\r\n    apiPoolInfo: ApiV3PoolInfoConcentratedItem;\r\n    chainTime: number;\r\n    poolLiquidity: BN;\r\n    rewardInfos: ClmmPoolRewardLayoutInfo[];\r\n  }): Promise<ClmmPoolRewardInfo[]> {\r\n    const nRewardInfo: ClmmPoolRewardInfo[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      const _itemReward = rewardInfos[i];\r\n      const apiRewardProgram =\r\n        apiPoolInfo.rewardDefaultInfos[i]?.mint.programId ??\r\n        (await connection.getAccountInfo(_itemReward.tokenMint))?.owner;\r\n      if (apiRewardProgram === undefined) throw Error(\"get new reward mint info error\");\r\n\r\n      const itemReward: ClmmPoolRewardInfo = {\r\n        ..._itemReward,\r\n        perSecond: MathUtil.x64ToDecimal(_itemReward.emissionsPerSecondX64),\r\n        remainingRewards: undefined,\r\n        tokenProgramId: new PublicKey(apiRewardProgram),\r\n      };\r\n\r\n      if (itemReward.tokenMint.equals(PublicKey.default)) continue;\r\n      if (chainTime <= itemReward.openTime.toNumber() || poolLiquidity.eq(ZERO)) {\r\n        nRewardInfo.push(itemReward);\r\n        continue;\r\n      }\r\n\r\n      const latestUpdateTime = new BN(Math.min(itemReward.endTime.toNumber(), chainTime));\r\n      const timeDelta = latestUpdateTime.sub(itemReward.lastUpdateTime);\r\n      const rewardGrowthDeltaX64 = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, poolLiquidity);\r\n      const rewardGrowthGlobalX64 = itemReward.rewardGrowthGlobalX64.add(rewardGrowthDeltaX64);\r\n      const rewardEmissionedDelta = MathUtil.mulDivFloor(timeDelta, itemReward.emissionsPerSecondX64, Q64);\r\n      const rewardTotalEmissioned = itemReward.rewardTotalEmissioned.add(rewardEmissionedDelta);\r\n      nRewardInfo.push({\r\n        ...itemReward,\r\n        rewardGrowthGlobalX64,\r\n        rewardTotalEmissioned,\r\n        lastUpdateTime: latestUpdateTime,\r\n      });\r\n    }\r\n    return nRewardInfo;\r\n  }\r\n\r\n  public static isOverflowDefaultTickarrayBitmap(tickSpacing: number, tickarrayStartIndexs: number[]): boolean {\r\n    const { maxTickBoundary, minTickBoundary } = this.tickRange(tickSpacing);\r\n\r\n    for (const tickIndex of tickarrayStartIndexs) {\r\n      const tickarrayStartIndex = TickUtils.getTickArrayStartIndexByTick(tickIndex, tickSpacing);\r\n\r\n      if (tickarrayStartIndex >= maxTickBoundary || tickarrayStartIndex < minTickBoundary) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public static tickRange(tickSpacing: number): {\r\n    maxTickBoundary: number;\r\n    minTickBoundary: number;\r\n  } {\r\n    let maxTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let minTickBoundary = -maxTickBoundary;\r\n\r\n    if (maxTickBoundary > MAX_TICK) {\r\n      maxTickBoundary = TickQuery.getArrayStartIndex(MAX_TICK, tickSpacing) + TickQuery.tickCount(tickSpacing);\r\n    }\r\n    if (minTickBoundary < MIN_TICK) {\r\n      minTickBoundary = TickQuery.getArrayStartIndex(MIN_TICK, tickSpacing);\r\n    }\r\n    return { maxTickBoundary, minTickBoundary };\r\n  }\r\n\r\n  public static get_tick_array_offset(tickarrayStartIndex: number, tickSpacing: number): number {\r\n    if (!TickQuery.checkIsValidStartIndex(tickarrayStartIndex, tickSpacing)) {\r\n      throw new Error(\"No enough initialized tickArray\");\r\n    }\r\n\r\n    return (tickarrayStartIndex / TickQuery.tickCount(tickSpacing)) * TICK_ARRAY_BITMAP_SIZE;\r\n  }\r\n\r\n  static async fetchExBitmaps({\r\n    connection,\r\n    exBitmapAddress,\r\n    batchRequest,\r\n  }: {\r\n    connection: Connection;\r\n    exBitmapAddress: PublicKey[];\r\n    batchRequest: boolean;\r\n  }): Promise<ReturnTypeFetchExBitmaps> {\r\n    const fetchedBitmapAccount = await getMultipleAccountsInfoWithCustomFlags(\r\n      connection,\r\n      exBitmapAddress.map((i) => ({ pubkey: i })),\r\n      { batchRequest },\r\n    );\r\n\r\n    const returnTypeFetchExBitmaps: ReturnTypeFetchExBitmaps = {};\r\n    for (const item of fetchedBitmapAccount) {\r\n      if (item.accountInfo === null) continue;\r\n\r\n      returnTypeFetchExBitmaps[item.pubkey.toString()] = TickArrayBitmapExtensionLayout.decode(item.accountInfo.data);\r\n    }\r\n    return returnTypeFetchExBitmaps;\r\n  }\r\n\r\n  static async fetchMultiplePoolTickArrays({\r\n    connection,\r\n    poolKeys,\r\n    batchRequest,\r\n  }: {\r\n    connection: Connection;\r\n    poolKeys: Omit<ComputeClmmPoolInfo, \"ammConfig\">[];\r\n    batchRequest?: boolean;\r\n  }): Promise<ReturnTypeFetchMultiplePoolTickArrays> {\r\n    const tickArraysToPoolId: { [key: string]: PublicKey } = {};\r\n    const tickArrays: { pubkey: PublicKey }[] = [];\r\n    for (const itemPoolInfo of poolKeys) {\r\n      const currentTickArrayStartIndex = TickUtils.getTickArrayStartIndexByTick(\r\n        itemPoolInfo.tickCurrent,\r\n        itemPoolInfo.tickSpacing,\r\n      );\r\n      const startIndexArray = TickUtils.getInitializedTickArrayInRange(\r\n        itemPoolInfo.tickArrayBitmap,\r\n        itemPoolInfo.exBitmapInfo,\r\n        itemPoolInfo.tickSpacing,\r\n        currentTickArrayStartIndex,\r\n        7,\r\n      );\r\n      for (const itemIndex of startIndexArray) {\r\n        const { publicKey: tickArrayAddress } = getPdaTickArrayAddress(\r\n          itemPoolInfo.programId,\r\n          itemPoolInfo.id,\r\n          itemIndex,\r\n        );\r\n        tickArrays.push({ pubkey: tickArrayAddress });\r\n        tickArraysToPoolId[tickArrayAddress.toString()] = itemPoolInfo.id;\r\n      }\r\n    }\r\n\r\n    const fetchedTickArrays = await getMultipleAccountsInfoWithCustomFlags(connection, tickArrays, { batchRequest });\r\n\r\n    const tickArrayCache: ReturnTypeFetchMultiplePoolTickArrays = {};\r\n\r\n    for (const itemAccountInfo of fetchedTickArrays) {\r\n      if (!itemAccountInfo.accountInfo) continue;\r\n      const poolId = tickArraysToPoolId[itemAccountInfo.pubkey.toString()];\r\n      if (!poolId) continue;\r\n      if (tickArrayCache[poolId.toString()] === undefined) tickArrayCache[poolId.toString()] = {};\r\n\r\n      const accountLayoutData = TickArrayLayout.decode(itemAccountInfo.accountInfo.data);\r\n\r\n      tickArrayCache[poolId.toString()][accountLayoutData.startTickIndex] = {\r\n        ...accountLayoutData,\r\n        address: itemAccountInfo.pubkey,\r\n      };\r\n    }\r\n    return tickArrayCache;\r\n  }\r\n\r\n  // deprecated, new api doesn't need\r\n  static async fetchPoolsAccountPosition({\r\n    pools,\r\n    connection,\r\n    ownerInfo,\r\n    batchRequest = false,\r\n    updateOwnerRewardAndFee = true,\r\n  }: {\r\n    pools: SDKParsedConcentratedInfo[];\r\n    connection: Connection;\r\n    ownerInfo: { wallet: PublicKey; tokenAccounts: TokenAccountRaw[] };\r\n    batchRequest?: boolean;\r\n    updateOwnerRewardAndFee?: boolean;\r\n  }): Promise<SDKParsedConcentratedInfo[]> {\r\n    const programIds: PublicKey[] = [];\r\n\r\n    for (let index = 0; index < pools.length; index++) {\r\n      const accountInfo = pools[index];\r\n\r\n      if (accountInfo === null) continue;\r\n\r\n      if (!programIds.find((i) => i.equals(accountInfo.state.programId))) programIds.push(accountInfo.state.programId);\r\n    }\r\n\r\n    if (ownerInfo) {\r\n      const allMint = ownerInfo.tokenAccounts.map((i) => i.accountInfo.mint);\r\n      const allPositionKey: PublicKey[] = [];\r\n      for (const itemMint of allMint) {\r\n        for (const itemProgramId of programIds) {\r\n          allPositionKey.push(getPdaPersonalPositionAddress(itemProgramId, itemMint).publicKey);\r\n        }\r\n      }\r\n      const positionAccountInfos = await getMultipleAccountsInfo(connection, allPositionKey, { batchRequest });\r\n      const keyToTickArrayAddress: { [key: string]: PublicKey } = {};\r\n      for (const itemAccountInfo of positionAccountInfos) {\r\n        if (itemAccountInfo === null) continue;\r\n        // TODO: add check\r\n\r\n        const position = PositionInfoLayout.decode(itemAccountInfo.data);\r\n        const itemPoolId = position.poolId.toString();\r\n        const poolInfoA = pools.find((pool) => pool.state.id.toBase58() === itemPoolId);\r\n        if (poolInfoA === undefined) continue;\r\n\r\n        const poolInfo = poolInfoA.state;\r\n\r\n        const priceLower = TickUtils._getTickPriceLegacy({\r\n          poolInfo,\r\n          tick: position.tickLower,\r\n          baseIn: true,\r\n        });\r\n        const priceUpper = TickUtils._getTickPriceLegacy({\r\n          poolInfo,\r\n          tick: position.tickUpper,\r\n          baseIn: true,\r\n        });\r\n        const { amountA, amountB } = LiquidityMath.getAmountsFromLiquidity(\r\n          poolInfo.sqrtPriceX64,\r\n          priceLower.tickSqrtPriceX64,\r\n          priceUpper.tickSqrtPriceX64,\r\n          position.liquidity,\r\n          false,\r\n        );\r\n\r\n        const leverage = 1 / (1 - Math.sqrt(Math.sqrt(priceLower.price.div(priceUpper.price).toNumber())));\r\n\r\n        poolInfoA.positionAccount = [\r\n          ...(poolInfoA.positionAccount ?? []),\r\n          {\r\n            poolId: position.poolId,\r\n            nftMint: position.nftMint,\r\n\r\n            priceLower: priceLower.price,\r\n            priceUpper: priceUpper.price,\r\n            amountA,\r\n            amountB,\r\n            tickLower: position.tickLower,\r\n            tickUpper: position.tickUpper,\r\n            liquidity: position.liquidity,\r\n            feeGrowthInsideLastX64A: position.feeGrowthInsideLastX64A,\r\n            feeGrowthInsideLastX64B: position.feeGrowthInsideLastX64B,\r\n            tokenFeesOwedA: position.tokenFeesOwedA,\r\n            tokenFeesOwedB: position.tokenFeesOwedB,\r\n            rewardInfos: position.rewardInfos.map((i) => ({\r\n              ...i,\r\n              pendingReward: new BN(0),\r\n            })),\r\n\r\n            leverage,\r\n            tokenFeeAmountA: new BN(0),\r\n            tokenFeeAmountB: new BN(0),\r\n          },\r\n        ];\r\n\r\n        const tickArrayLowerAddress = await TickUtils.getTickArrayAddressByTick(\r\n          poolInfoA.state.programId,\r\n          position.poolId,\r\n          position.tickLower,\r\n          poolInfoA.state.tickSpacing,\r\n        );\r\n        const tickArrayUpperAddress = await TickUtils.getTickArrayAddressByTick(\r\n          poolInfoA.state.programId,\r\n          position.poolId,\r\n          position.tickUpper,\r\n          poolInfoA.state.tickSpacing,\r\n        );\r\n        keyToTickArrayAddress[\r\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickLower}`\r\n        ] = tickArrayLowerAddress;\r\n        keyToTickArrayAddress[\r\n          `${poolInfoA.state.programId.toString()}-${position.poolId.toString()}-${position.tickUpper}`\r\n        ] = tickArrayUpperAddress;\r\n      }\r\n\r\n      if (updateOwnerRewardAndFee) {\r\n        const tickArrayKeys = Object.values(keyToTickArrayAddress);\r\n        const tickArrayDatas = await getMultipleAccountsInfo(connection, tickArrayKeys, { batchRequest });\r\n        const tickArrayLayout = {};\r\n        for (let index = 0; index < tickArrayKeys.length; index++) {\r\n          const tickArrayData = tickArrayDatas[index];\r\n          if (tickArrayData === null) continue;\r\n          const key = tickArrayKeys[index].toString();\r\n          tickArrayLayout[key] = TickArrayLayout.decode(tickArrayData.data);\r\n        }\r\n\r\n        for (const { state, positionAccount } of pools) {\r\n          if (!positionAccount) continue;\r\n          for (const itemPA of positionAccount) {\r\n            const keyLower = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickLower}`;\r\n            const keyUpper = `${state.programId.toString()}-${state.id.toString()}-${itemPA.tickUpper}`;\r\n            const tickArrayLower = tickArrayLayout[keyToTickArrayAddress[keyLower].toString()];\r\n            const tickArrayUpper = tickArrayLayout[keyToTickArrayAddress[keyUpper].toString()];\r\n            const tickLowerState: Tick =\r\n              tickArrayLower.ticks[TickUtils.getTickOffsetInArray(itemPA.tickLower, state.tickSpacing)];\r\n            const tickUpperState: Tick =\r\n              tickArrayUpper.ticks[TickUtils.getTickOffsetInArray(itemPA.tickUpper, state.tickSpacing)];\r\n            const { tokenFeeAmountA, tokenFeeAmountB } = await PositionUtils.GetPositionFees(\r\n              state,\r\n              itemPA,\r\n              tickLowerState,\r\n              tickUpperState,\r\n            );\r\n            const rewardInfos = await PositionUtils.GetPositionRewards(state, itemPA, tickLowerState, tickUpperState);\r\n            itemPA.tokenFeeAmountA = tokenFeeAmountA.gte(new BN(0)) ? tokenFeeAmountA : new BN(0);\r\n            itemPA.tokenFeeAmountB = tokenFeeAmountB.gte(new BN(0)) ? tokenFeeAmountB : new BN(0);\r\n            for (let i = 0; i < rewardInfos.length; i++) {\r\n              itemPA.rewardInfos[i].pendingReward = rewardInfos[i].gte(new BN(0)) ? rewardInfos[i] : new BN(0);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return pools;\r\n  }\r\n\r\n  static computeAmountOut({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    baseMint,\r\n    epochInfo,\r\n    amountIn,\r\n    slippage,\r\n    priceLimit = new Decimal(0),\r\n    catchLiquidityInsufficient = false,\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    baseMint: PublicKey;\r\n\r\n    epochInfo: EpochInfo;\r\n\r\n    amountIn: BN;\r\n    slippage: number;\r\n    priceLimit?: Decimal;\r\n    catchLiquidityInsufficient: boolean;\r\n  }): ReturnTypeComputeAmountOut {\r\n    let sqrtPriceLimitX64: BN;\r\n    const isBaseIn = baseMint.toBase58() === poolInfo.mintA.address;\r\n    const [baseFeeConfig, outFeeConfig] = isBaseIn\r\n      ? [poolInfo.mintA.extensions.feeConfig, poolInfo.mintB.extensions.feeConfig]\r\n      : [poolInfo.mintB.extensions.feeConfig, poolInfo.mintA.extensions.feeConfig];\r\n\r\n    if (priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = isBaseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    const realAmountIn = getTransferAmountFeeV2(amountIn, baseFeeConfig, epochInfo, false);\r\n\r\n    const {\r\n      allTrade,\r\n      expectedAmountOut: _expectedAmountOut,\r\n      remainingAccounts,\r\n      executionPrice: _executionPriceX64,\r\n      feeAmount,\r\n    } = PoolUtils.getOutputAmountAndRemainAccounts(\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint,\r\n      realAmountIn.amount.sub(realAmountIn.fee ?? ZERO),\r\n      sqrtPriceLimitX64,\r\n      catchLiquidityInsufficient,\r\n    );\r\n\r\n    const amountOut = getTransferAmountFeeV2(_expectedAmountOut, outFeeConfig, epochInfo, false);\r\n\r\n    const _executionPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n      _executionPriceX64,\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const executionPrice = isBaseIn ? _executionPrice : new Decimal(1).div(_executionPrice);\r\n\r\n    const _minAmountOut = _expectedAmountOut\r\n      .mul(new BN(Math.floor((1 - slippage) * 10000000000)))\r\n      .div(new BN(10000000000));\r\n    const minAmountOut = getTransferAmountFeeV2(_minAmountOut, outFeeConfig, epochInfo, false);\r\n\r\n    const poolPrice = isBaseIn ? poolInfo.currentPrice : new Decimal(1).div(poolInfo.currentPrice);\r\n\r\n    const _numerator = new Decimal(executionPrice).sub(poolPrice).abs();\r\n    const _denominator = poolPrice;\r\n    const priceImpact = new Percent(\r\n      new Decimal(_numerator).mul(10 ** 15).toFixed(0),\r\n      new Decimal(_denominator).mul(10 ** 15).toFixed(0),\r\n    );\r\n\r\n    return {\r\n      allTrade,\r\n      realAmountIn,\r\n      amountOut,\r\n      minAmountOut,\r\n      expirationTime: minExpirationTime(realAmountIn.expirationTime, amountOut.expirationTime),\r\n      currentPrice: poolInfo.currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee: feeAmount,\r\n      remainingAccounts,\r\n      executionPriceX64: _executionPriceX64,\r\n    };\r\n  }\r\n\r\n  static computeAmountOutFormat({\r\n    poolInfo,\r\n    tickArrayCache,\r\n    amountIn,\r\n    tokenOut: _tokenOut,\r\n    slippage,\r\n    epochInfo,\r\n    catchLiquidityInsufficient = false,\r\n  }: {\r\n    poolInfo: ComputeClmmPoolInfo;\r\n    tickArrayCache: { [key: string]: TickArray };\r\n    amountIn: BN;\r\n    tokenOut: ApiV3Token;\r\n    slippage: number;\r\n    epochInfo: EpochInfo;\r\n    catchLiquidityInsufficient?: boolean;\r\n  }): ReturnTypeComputeAmountOutFormat {\r\n    const baseIn = _tokenOut.address === poolInfo.mintB.address;\r\n    const [inputMint, outMint] = baseIn ? [poolInfo.mintA, poolInfo.mintB] : [poolInfo.mintB, poolInfo.mintA];\r\n    const [baseToken, outToken] = [\r\n      new Token({\r\n        ...inputMint,\r\n        mint: inputMint.address,\r\n        isToken2022: inputMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\r\n      }),\r\n      new Token({\r\n        ...outMint,\r\n        mint: outMint.address,\r\n        isToken2022: outMint.programId === TOKEN_2022_PROGRAM_ID.toBase58(),\r\n      }),\r\n    ];\r\n\r\n    const {\r\n      allTrade,\r\n      realAmountIn: _realAmountIn,\r\n      amountOut: _amountOut,\r\n      minAmountOut: _minAmountOut,\r\n      expirationTime,\r\n      currentPrice,\r\n      executionPrice,\r\n      priceImpact,\r\n      fee,\r\n      remainingAccounts,\r\n      executionPriceX64,\r\n    } = PoolUtils.computeAmountOut({\r\n      poolInfo,\r\n      tickArrayCache,\r\n      baseMint: new PublicKey(inputMint.address),\r\n      amountIn,\r\n      slippage,\r\n      epochInfo,\r\n      catchLiquidityInsufficient,\r\n    });\r\n\r\n    const realAmountIn = {\r\n      ..._realAmountIn,\r\n      amount: new TokenAmount(baseToken, _realAmountIn.amount),\r\n      fee: _realAmountIn.fee === undefined ? undefined : new TokenAmount(baseToken, _realAmountIn.fee),\r\n    };\r\n\r\n    const amountOut = {\r\n      ..._amountOut,\r\n      amount: new TokenAmount(outToken, _amountOut.amount),\r\n      fee: _amountOut.fee === undefined ? undefined : new TokenAmount(outToken, _amountOut.fee),\r\n    };\r\n    const minAmountOut = {\r\n      ..._minAmountOut,\r\n      amount: new TokenAmount(outToken, _minAmountOut.amount),\r\n      fee: _minAmountOut.fee === undefined ? undefined : new TokenAmount(outToken, _minAmountOut.fee),\r\n    };\r\n\r\n    const _currentPrice = new Price({\r\n      baseToken,\r\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\r\n      quoteToken: outToken,\r\n      numerator: currentPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\r\n    });\r\n    const _executionPrice = new Price({\r\n      baseToken,\r\n      denominator: new BN(10).pow(new BN(20 + baseToken.decimals)),\r\n      quoteToken: outToken,\r\n      numerator: executionPrice.mul(new Decimal(10 ** (20 + outToken.decimals))).toFixed(0),\r\n    });\r\n    const _fee = new TokenAmount(baseToken, fee);\r\n\r\n    return {\r\n      allTrade,\r\n      realAmountIn,\r\n      amountOut,\r\n      minAmountOut,\r\n      expirationTime,\r\n      currentPrice: _currentPrice,\r\n      executionPrice: _executionPrice,\r\n      priceImpact,\r\n      fee: _fee,\r\n      remainingAccounts,\r\n      executionPriceX64,\r\n    };\r\n  }\r\n\r\n  static estimateAprsForPriceRangeMultiplier({\r\n    poolInfo,\r\n    aprType,\r\n    positionTickLowerIndex,\r\n    positionTickUpperIndex,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    aprType: \"day\" | \"week\" | \"month\";\r\n\r\n    positionTickLowerIndex: number;\r\n    positionTickUpperIndex: number;\r\n  }): {\r\n    feeApr: number;\r\n    rewardsApr: number[];\r\n    apr: number;\r\n  } {\r\n    const aprInfo = poolInfo[aprType];\r\n\r\n    const priceLower = TickUtils.getTickPrice({\r\n      poolInfo,\r\n      tick: positionTickLowerIndex,\r\n      baseIn: true,\r\n    }).price.toNumber();\r\n    const priceUpper = TickUtils.getTickPrice({\r\n      poolInfo,\r\n      tick: positionTickUpperIndex,\r\n      baseIn: true,\r\n    }).price.toNumber();\r\n\r\n    const _minPrice = Math.max(priceLower, aprInfo.priceMin);\r\n    const _maxPrice = Math.min(priceUpper, aprInfo.priceMax);\r\n\r\n    const sub = _maxPrice - _minPrice;\r\n\r\n    const userRange = priceUpper - priceLower;\r\n    const tradeRange = aprInfo.priceMax - aprInfo.priceMin;\r\n\r\n    let p: number;\r\n\r\n    if (sub <= 0) p = 0;\r\n    else if (userRange === sub) p = tradeRange / sub;\r\n    else if (tradeRange === sub) p = sub / userRange;\r\n    else p = (sub / tradeRange) * (sub / userRange);\r\n\r\n    return {\r\n      feeApr: aprInfo.feeApr * p,\r\n      rewardsApr: [(aprInfo.rewardApr[0] ?? 0) * p, (aprInfo.rewardApr[1] ?? 0) * p, (aprInfo.rewardApr[2] ?? 0) * p],\r\n      apr: aprInfo.apr * p,\r\n    };\r\n  }\r\n\r\n  static estimateAprsForPriceRangeDelta({\r\n    poolInfo,\r\n    poolLiquidity,\r\n    aprType,\r\n    mintPrice,\r\n    liquidity,\r\n    positionTickLowerIndex,\r\n    positionTickUpperIndex,\r\n    chainTime,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolLiquidity: BN;\r\n    aprType: \"day\" | \"week\" | \"month\";\r\n\r\n    mintPrice: { [mint: string]: { value: number } };\r\n\r\n    liquidity: BN;\r\n    positionTickLowerIndex: number;\r\n    positionTickUpperIndex: number;\r\n\r\n    chainTime: number;\r\n  }): {\r\n    feeApr: number;\r\n    rewardsApr: number[];\r\n    apr: number;\r\n  } {\r\n    const aprTypeDay = aprType === \"day\" ? 1 : aprType === \"week\" ? 7 : aprType === \"month\" ? 30 : 0;\r\n    const aprInfo = poolInfo[aprType];\r\n    const mintPriceA = mintPrice[solToWSol(poolInfo.mintA.address).toString()];\r\n    const mintPriceB = mintPrice[solToWSol(poolInfo.mintB.address).toString()];\r\n    const mintDecimalsA = poolInfo.mintA.decimals;\r\n    const mintDecimalsB = poolInfo.mintB.decimals;\r\n\r\n    if (!aprInfo || !mintPriceA || !mintPriceB) return { feeApr: 0, rewardsApr: [0, 0, 0], apr: 0 };\r\n\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickLowerIndex);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(positionTickUpperIndex);\r\n\r\n    const { amountSlippageA: poolLiquidityA, amountSlippageB: poolLiquidityB } =\r\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\r\n        sqrtPriceX64,\r\n        sqrtPriceX64A,\r\n        sqrtPriceX64B,\r\n        poolLiquidity,\r\n        false,\r\n        false,\r\n        0,\r\n      );\r\n\r\n    const { amountSlippageA: userLiquidityA, amountSlippageB: userLiquidityB } =\r\n      LiquidityMath.getAmountsFromLiquidityWithSlippage(\r\n        sqrtPriceX64,\r\n        sqrtPriceX64A,\r\n        sqrtPriceX64B,\r\n        liquidity,\r\n        false,\r\n        false,\r\n        0,\r\n      );\r\n\r\n    const poolTvl = new Decimal(poolLiquidityA.toString())\r\n      .div(new Decimal(10).pow(mintDecimalsA))\r\n      .mul(mintPriceA.value)\r\n      .add(new Decimal(poolLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\r\n    const userTvl = new Decimal(userLiquidityA.toString())\r\n      .div(new Decimal(10).pow(mintDecimalsA))\r\n      .mul(mintPriceA.value)\r\n      .add(new Decimal(userLiquidityB.toString()).div(new Decimal(10).pow(mintDecimalsB)).mul(mintPriceB.value));\r\n\r\n    const p = new Decimal(1).div(poolTvl.add(userTvl));\r\n\r\n    const feesPerYear = new Decimal(aprInfo.volumeFee).mul(365).div(aprTypeDay);\r\n    const feeApr = feesPerYear.mul(p).mul(100).toNumber();\r\n\r\n    const SECONDS_PER_YEAR = 3600 * 24 * 365;\r\n\r\n    const rewardsApr = poolInfo.rewardDefaultInfos.map((i) => {\r\n      const iDecimal = i.mint.decimals;\r\n      const iPrice = mintPrice[i.mint.address];\r\n\r\n      if (\r\n        chainTime < ((i as any).startTime ?? 0) ||\r\n        chainTime > ((i as any).endTime ?? 0) ||\r\n        !i.perSecond ||\r\n        !iPrice ||\r\n        iDecimal === undefined\r\n      )\r\n        return 0;\r\n\r\n      return new Decimal(iPrice.value)\r\n        .mul(new Decimal(i.perSecond).mul(SECONDS_PER_YEAR))\r\n        .div(new Decimal(10).pow(iDecimal))\r\n        .mul(p)\r\n        .mul(100)\r\n        .toNumber();\r\n    });\r\n\r\n    return {\r\n      feeApr,\r\n      rewardsApr,\r\n      apr: feeApr + rewardsApr.reduce((a, b) => a + b, 0),\r\n    };\r\n  }\r\n\r\n  static getLiquidityAmountOutFromAmountIn({\r\n    poolInfo,\r\n    inputA,\r\n    tickLower,\r\n    tickUpper,\r\n    amount,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountHasFee,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    inputA: boolean;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    amount: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n    epochInfo: EpochInfo;\r\n    amountHasFee: boolean;\r\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    const coefficient = add ? 1 - slippage : 1 + slippage;\r\n    const addFeeAmount = getTransferAmountFeeV2(\r\n      amount,\r\n      poolInfo[inputA ? \"mintA\" : \"mintB\"].extensions?.feeConfig,\r\n      epochInfo,\r\n      !amountHasFee,\r\n    );\r\n    const _amount = new BN(\r\n      new Decimal(addFeeAmount.amount.sub(addFeeAmount.fee ?? ZERO).toString()).mul(coefficient).toFixed(0),\r\n    );\r\n\r\n    let liquidity: BN;\r\n    if (sqrtPriceX64.lte(sqrtPriceX64A)) {\r\n      liquidity = inputA\r\n        ? LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64A, sqrtPriceX64B, _amount, !add)\r\n        : new BN(0);\r\n    } else if (sqrtPriceX64.lte(sqrtPriceX64B)) {\r\n      const liquidity0 = LiquidityMath.getLiquidityFromTokenAmountA(sqrtPriceX64, sqrtPriceX64B, _amount, !add);\r\n      const liquidity1 = LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64, _amount);\r\n      liquidity = inputA ? liquidity0 : liquidity1;\r\n    } else {\r\n      liquidity = inputA\r\n        ? new BN(0)\r\n        : LiquidityMath.getLiquidityFromTokenAmountB(sqrtPriceX64A, sqrtPriceX64B, _amount);\r\n    }\r\n\r\n    return PoolUtils.getAmountsFromLiquidity({\r\n      epochInfo,\r\n      poolInfo,\r\n      tickLower,\r\n      tickUpper,\r\n      liquidity,\r\n      slippage,\r\n      add,\r\n    });\r\n  }\r\n\r\n  static async getAmountsFromLiquidity({\r\n    epochInfo,\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n  }: {\r\n    epochInfo: EpochInfo;\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    tickLower: number;\r\n    tickUpper: number;\r\n    liquidity: BN;\r\n    slippage: number;\r\n    add: boolean;\r\n  }): Promise<ReturnTypeGetLiquidityAmountOut> {\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(\r\n      SqrtPriceMath.priceToSqrtPriceX64(new Decimal(poolInfo.price), poolInfo.mintA.decimals, poolInfo.mintB.decimals),\r\n      sqrtPriceX64A,\r\n      sqrtPriceX64B,\r\n      liquidity,\r\n      add,\r\n    );\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        amounts.amountA.muln(coefficientRe),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        amounts.amountB.muln(coefficientRe),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n\r\n  static async fetchComputeMultipleClmmInfo({\r\n    connection,\r\n    poolList,\r\n    rpcDataMap = {},\r\n  }: {\r\n    rpcDataMap?: Record<string, ReturnType<typeof PoolInfoLayout.decode>>;\r\n    connection: Connection;\r\n    poolList: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\" | \"price\">[];\r\n  }): Promise<Record<string, ComputeClmmPoolInfo>> {\r\n    const fetchRpcList = poolList.filter((p) => !rpcDataMap[p.id]).map((p) => new PublicKey(p.id));\r\n    const rpcRes = await getMultipleAccountsInfo(connection, fetchRpcList);\r\n    rpcRes.forEach((r, idx) => {\r\n      if (!r) return;\r\n      rpcDataMap[fetchRpcList[idx].toBase58()] = PoolInfoLayout.decode(r.data);\r\n    });\r\n\r\n    const pdaList = poolList.map(\r\n      (poolInfo) => getPdaExBitmapAccount(new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)).publicKey,\r\n    );\r\n\r\n    const exBitData = await PoolUtils.fetchExBitmaps({\r\n      connection,\r\n      exBitmapAddress: pdaList,\r\n      batchRequest: false,\r\n    });\r\n\r\n    return poolList.reduce(\r\n      (acc, cur) => ({\r\n        ...acc,\r\n        [cur.id]: {\r\n          ...rpcDataMap[cur.id],\r\n          id: new PublicKey(cur.id),\r\n          version: 6,\r\n          programId: new PublicKey(cur.programId),\r\n          mintA: cur.mintA,\r\n          mintB: cur.mintB,\r\n          ammConfig: {\r\n            ...cur.config,\r\n            id: new PublicKey(cur.config.id),\r\n            fundOwner: \"\",\r\n          },\r\n          currentPrice: new Decimal(cur.price),\r\n          exBitmapInfo:\r\n            exBitData[getPdaExBitmapAccount(new PublicKey(cur.programId), new PublicKey(cur.id)).publicKey.toBase58()],\r\n          startTime: rpcDataMap[cur.id].startTime.toNumber(),\r\n        },\r\n      }),\r\n      {} as Record<string, ComputeClmmPoolInfo>,\r\n    );\r\n  }\r\n\r\n  static async fetchComputeClmmInfo({\r\n    connection,\r\n    poolInfo,\r\n    rpcData,\r\n  }: {\r\n    connection: Connection;\r\n    poolInfo: Pick<ApiV3PoolInfoConcentratedItem, \"id\" | \"programId\" | \"mintA\" | \"mintB\" | \"config\" | \"price\">;\r\n    rpcData?: ReturnType<typeof PoolInfoLayout.decode>;\r\n  }): Promise<ComputeClmmPoolInfo> {\r\n    return (\r\n      await this.fetchComputeMultipleClmmInfo({\r\n        connection,\r\n        rpcDataMap: rpcData ? { [poolInfo.id]: rpcData } : undefined,\r\n        poolList: [poolInfo],\r\n      })\r\n    )[poolInfo.id];\r\n  }\r\n}\r\n\r\nexport function getLiquidityFromAmounts({\r\n  poolInfo,\r\n  tickLower,\r\n  tickUpper,\r\n  amountA,\r\n  amountB,\r\n  slippage,\r\n  add,\r\n  epochInfo,\r\n  amountHasFee,\r\n}: {\r\n  poolInfo: ApiV3PoolInfoConcentratedItem;\r\n  tickLower: number;\r\n  tickUpper: number;\r\n  amountA: BN;\r\n  amountB: BN;\r\n  slippage: number;\r\n  add: boolean;\r\n  epochInfo: EpochInfo;\r\n  amountHasFee: boolean;\r\n}): ReturnTypeGetLiquidityAmountOut {\r\n  const [_tickLower, _tickUpper, _amountA, _amountB] =\r\n    tickLower < tickUpper ? [tickLower, tickUpper, amountA, amountB] : [tickUpper, tickLower, amountB, amountA];\r\n  const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n    new Decimal(poolInfo.price),\r\n    poolInfo.mintA.decimals,\r\n    poolInfo.mintB.decimals,\r\n  );\r\n  const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(_tickLower);\r\n  const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(_tickUpper);\r\n\r\n  const [amountFeeA, amountFeeB] = [\r\n    getTransferAmountFeeV2(_amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, !amountHasFee),\r\n    getTransferAmountFeeV2(_amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, !amountHasFee),\r\n  ];\r\n\r\n  const liquidity = LiquidityMath.getLiquidityFromTokenAmounts(\r\n    sqrtPriceX64,\r\n    sqrtPriceX64A,\r\n    sqrtPriceX64B,\r\n    amountFeeA.amount.sub(amountFeeA.fee ?? ZERO),\r\n    amountFeeB.amount.sub(amountFeeB.fee ?? ZERO),\r\n  );\r\n\r\n  return LiquidityMath.getAmountsOutFromLiquidity({\r\n    poolInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n    amountAddFee: !amountHasFee,\r\n  });\r\n}\r\n\r\nconst mockRewardData = {\r\n  volume: 0,\r\n  volumeQuote: 0,\r\n  volumeFee: 0,\r\n  apr: 0,\r\n  feeApr: 0,\r\n  priceMin: 0,\r\n  priceMax: 0,\r\n  rewardApr: [],\r\n};\r\n\r\nexport function clmmComputeInfoToApiInfo(pool: ComputeClmmPoolInfo): ApiV3PoolInfoConcentratedItem {\r\n  return {\r\n    ...pool,\r\n    type: \"Concentrated\",\r\n    programId: pool.programId.toString(),\r\n    id: pool.id.toString(),\r\n    rewardDefaultInfos: [],\r\n    rewardDefaultPoolInfos: \"Clmm\",\r\n    price: pool.currentPrice.toNumber(),\r\n    mintAmountA: 0,\r\n    mintAmountB: 0,\r\n    feeRate: pool.ammConfig.tradeFeeRate,\r\n    tvl: 0,\r\n\r\n    day: mockRewardData,\r\n    week: mockRewardData,\r\n    month: mockRewardData,\r\n    pooltype: [],\r\n\r\n    farmUpcomingCount: 0,\r\n    farmOngoingCount: 0,\r\n    farmFinishedCount: 0,\r\n    config: {\r\n      ...pool.ammConfig,\r\n      id: pool.ammConfig.id.toString(),\r\n      defaultRange: 0,\r\n      defaultRangePoint: [],\r\n    },\r\n  };\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nimport { TickArrayBitmapExtensionType } from \"../type\";\r\n\r\nimport { MAX_TICK, MIN_TICK } from \"./constants\";\r\nimport { TICK_ARRAY_BITMAP_SIZE, TICK_ARRAY_SIZE, TickUtils } from \"./tick\";\r\nimport { TickQuery } from \"./tickQuery\";\r\nimport { isZero, leadingZeros, leastSignificantBit, mostSignificantBit, trailingZeros } from \"./util\";\r\n\r\nexport const EXTENSION_TICKARRAY_BITMAP_SIZE = 14;\r\n\r\nexport class TickArrayBitmap {\r\n  public static maxTickInTickarrayBitmap(tickSpacing: number): number {\r\n    return tickSpacing * TICK_ARRAY_SIZE * TICK_ARRAY_BITMAP_SIZE;\r\n  }\r\n\r\n  public static getBitmapTickBoundary(\r\n    tickarrayStartIndex: number,\r\n    tickSpacing: number,\r\n  ): {\r\n    minValue: number;\r\n    maxValue: number;\r\n  } {\r\n    const ticksInOneBitmap = this.maxTickInTickarrayBitmap(tickSpacing);\r\n    let m = Math.floor(Math.abs(tickarrayStartIndex) / ticksInOneBitmap);\r\n    if (tickarrayStartIndex < 0 && Math.abs(tickarrayStartIndex) % ticksInOneBitmap != 0) m += 1;\r\n\r\n    const minValue = ticksInOneBitmap * m;\r\n\r\n    return tickarrayStartIndex < 0\r\n      ? { minValue: -minValue, maxValue: -minValue + ticksInOneBitmap }\r\n      : { minValue, maxValue: minValue + ticksInOneBitmap };\r\n  }\r\n\r\n  public static nextInitializedTickArrayStartIndex(\r\n    bitMap: BN,\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): { isInit: boolean; tickIndex: number } {\r\n    if (!TickQuery.checkIsValidStartIndex(lastTickArrayStartIndex, tickSpacing))\r\n      throw Error(\"nextInitializedTickArrayStartIndex check error\");\r\n\r\n    const tickBoundary = this.maxTickInTickarrayBitmap(tickSpacing);\r\n    const nextTickArrayStartIndex = zeroForOne\r\n      ? lastTickArrayStartIndex - TickQuery.tickCount(tickSpacing)\r\n      : lastTickArrayStartIndex + TickQuery.tickCount(tickSpacing);\r\n\r\n    if (nextTickArrayStartIndex < -tickBoundary || nextTickArrayStartIndex >= tickBoundary) {\r\n      return { isInit: false, tickIndex: lastTickArrayStartIndex };\r\n    }\r\n\r\n    const multiplier = tickSpacing * TICK_ARRAY_SIZE;\r\n    let compressed = nextTickArrayStartIndex / multiplier + 512;\r\n\r\n    if (nextTickArrayStartIndex < 0 && nextTickArrayStartIndex % multiplier != 0) {\r\n      compressed--;\r\n    }\r\n\r\n    const bitPos = Math.abs(compressed);\r\n\r\n    if (zeroForOne) {\r\n      const offsetBitMap = bitMap.shln(1024 - bitPos - 1);\r\n      const nextBit = mostSignificantBit(1024, offsetBitMap);\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = (bitPos - nextBit - 512) * multiplier;\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        return { isInit: false, tickIndex: -tickBoundary };\r\n      }\r\n    } else {\r\n      const offsetBitMap = bitMap.shrn(bitPos);\r\n      const nextBit = leastSignificantBit(1024, offsetBitMap);\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = (bitPos + nextBit - 512) * multiplier;\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        return { isInit: false, tickIndex: tickBoundary - TickQuery.tickCount(tickSpacing) };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class TickArrayBitmapExtensionUtils {\r\n  public static getBitmapOffset(tickIndex: number, tickSpacing: number): number {\r\n    if (!TickQuery.checkIsValidStartIndex(tickIndex, tickSpacing)) {\r\n      throw new Error(\"No enough initialized tickArray\");\r\n    }\r\n    this.checkExtensionBoundary(tickIndex, tickSpacing);\r\n\r\n    const ticksInOneBitmap = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let offset = Math.floor(Math.abs(tickIndex) / ticksInOneBitmap) - 1;\r\n\r\n    if (tickIndex < 0 && Math.abs(tickIndex) % ticksInOneBitmap === 0) offset--;\r\n    return offset;\r\n  }\r\n\r\n  public static getBitmap(\r\n    tickIndex: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  ): { offset: number; tickarrayBitmap: BN[] } {\r\n    const offset = this.getBitmapOffset(tickIndex, tickSpacing);\r\n    if (tickIndex < 0) {\r\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.negativeTickArrayBitmap[offset] };\r\n    } else {\r\n      return { offset, tickarrayBitmap: tickArrayBitmapExtension.positiveTickArrayBitmap[offset] };\r\n    }\r\n  }\r\n\r\n  public static checkExtensionBoundary(tickIndex: number, tickSpacing: number) {\r\n    const { positiveTickBoundary, negativeTickBoundary } = this.extensionTickBoundary(tickSpacing);\r\n\r\n    if (tickIndex >= negativeTickBoundary && tickIndex < positiveTickBoundary) {\r\n      throw Error(\"checkExtensionBoundary -> InvalidTickArrayBoundary\");\r\n    }\r\n  }\r\n\r\n  public static extensionTickBoundary(tickSpacing: number): {\r\n    positiveTickBoundary: number;\r\n    negativeTickBoundary: number;\r\n  } {\r\n    const positiveTickBoundary = TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n\r\n    const negativeTickBoundary = -positiveTickBoundary;\r\n\r\n    if (MAX_TICK <= positiveTickBoundary)\r\n      throw Error(`extensionTickBoundary check error: ${MAX_TICK}, ${positiveTickBoundary}`);\r\n    if (negativeTickBoundary <= MIN_TICK)\r\n      throw Error(`extensionTickBoundary check error: ${negativeTickBoundary}, ${MIN_TICK}`);\r\n\r\n    return { positiveTickBoundary, negativeTickBoundary };\r\n  }\r\n\r\n  public static checkTickArrayIsInit(\r\n    tickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  ): { isInitialized: boolean; startIndex: number } {\r\n    const { tickarrayBitmap } = this.getBitmap(tickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\r\n\r\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(tickArrayStartIndex, tickSpacing);\r\n\r\n    return {\r\n      isInitialized: TickUtils.mergeTickArrayBitmap(tickarrayBitmap).testn(tickArrayOffsetInBitmap),\r\n      startIndex: tickArrayStartIndex,\r\n    };\r\n  }\r\n\r\n  public static nextInitializedTickArrayFromOneBitmap(\r\n    lastTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n    tickArrayBitmapExtension: TickArrayBitmapExtensionType,\r\n  ): {\r\n    isInit: boolean;\r\n    tickIndex: number;\r\n  } {\r\n    const multiplier = TickQuery.tickCount(tickSpacing);\r\n    const nextTickArrayStartIndex = zeroForOne\r\n      ? lastTickArrayStartIndex - multiplier\r\n      : lastTickArrayStartIndex + multiplier;\r\n    const { tickarrayBitmap } = this.getBitmap(nextTickArrayStartIndex, tickSpacing, tickArrayBitmapExtension);\r\n\r\n    return this.nextInitializedTickArrayInBitmap(tickarrayBitmap, nextTickArrayStartIndex, tickSpacing, zeroForOne);\r\n  }\r\n\r\n  public static nextInitializedTickArrayInBitmap(\r\n    tickarrayBitmap: BN[],\r\n    nextTickArrayStartIndex: number,\r\n    tickSpacing: number,\r\n    zeroForOne: boolean,\r\n  ): {\r\n    isInit: boolean;\r\n    tickIndex: number;\r\n  } {\r\n    const { minValue: bitmapMinTickBoundary, maxValue: bitmapMaxTickBoundary } = TickArrayBitmap.getBitmapTickBoundary(\r\n      nextTickArrayStartIndex,\r\n      tickSpacing,\r\n    );\r\n\r\n    const tickArrayOffsetInBitmap = this.tickArrayOffsetInBitmap(nextTickArrayStartIndex, tickSpacing);\r\n    if (zeroForOne) {\r\n      // tick from upper to lower\r\n      // find from highter bits to lower bits\r\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shln(\r\n        TICK_ARRAY_BITMAP_SIZE - 1 - tickArrayOffsetInBitmap,\r\n      );\r\n\r\n      const nextBit = isZero(512, offsetBitMap) ? null : leadingZeros(512, offsetBitMap);\r\n\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = nextTickArrayStartIndex - nextBit * TickQuery.tickCount(tickSpacing);\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        // not found til to the end\r\n        return { isInit: false, tickIndex: bitmapMinTickBoundary };\r\n      }\r\n    } else {\r\n      // tick from lower to upper\r\n      // find from lower bits to highter bits\r\n      const offsetBitMap = TickUtils.mergeTickArrayBitmap(tickarrayBitmap).shrn(tickArrayOffsetInBitmap);\r\n\r\n      const nextBit = isZero(512, offsetBitMap) ? null : trailingZeros(512, offsetBitMap);\r\n\r\n      if (nextBit !== null) {\r\n        const nextArrayStartIndex = nextTickArrayStartIndex + nextBit * TickQuery.tickCount(tickSpacing);\r\n        return { isInit: true, tickIndex: nextArrayStartIndex };\r\n      } else {\r\n        // not found til to the end\r\n        return { isInit: false, tickIndex: bitmapMaxTickBoundary - TickQuery.tickCount(tickSpacing) };\r\n      }\r\n    }\r\n  }\r\n\r\n  public static tickArrayOffsetInBitmap(tickArrayStartIndex: number, tickSpacing: number): number {\r\n    const m = Math.abs(tickArrayStartIndex) % TickArrayBitmap.maxTickInTickarrayBitmap(tickSpacing);\r\n    let tickArrayOffsetInBitmap = Math.floor(m / TickQuery.tickCount(tickSpacing));\r\n    if (tickArrayStartIndex < 0 && m != 0) {\r\n      tickArrayOffsetInBitmap = TICK_ARRAY_BITMAP_SIZE - tickArrayOffsetInBitmap;\r\n    }\r\n    return tickArrayOffsetInBitmap;\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nimport { ClmmPoolInfo, ClmmPoolPersonalPosition, ClmmPoolRewardInfo, SDKParsedConcentratedInfo } from \"../type\";\r\nimport { minExpirationTime, getTransferAmountFeeV2 } from \"@/common\";\r\nimport { Q64 } from \"./constants\";\r\nimport { MathUtil, SqrtPriceMath, LiquidityMath } from \"./math\";\r\nimport { Tick } from \"./tick\";\r\nimport { GetAmountParams, ReturnTypeGetLiquidityAmountOut } from \"../type\";\r\nimport Decimal from \"decimal.js\";\r\nimport { ClmmPositionLayout } from \"../layout\";\r\n\r\nexport class PositionUtils {\r\n  static getfeeGrowthInside(\r\n    poolState: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { feeGrowthInsideX64A: BN; feeGrowthInsideBX64: BN } {\r\n    let feeGrowthBelowX64A = new BN(0);\r\n    let feeGrowthBelowX64B = new BN(0);\r\n    if (poolState.tickCurrent >= tickLowerState.tick) {\r\n      feeGrowthBelowX64A = tickLowerState.feeGrowthOutsideX64A;\r\n      feeGrowthBelowX64B = tickLowerState.feeGrowthOutsideX64B;\r\n    } else {\r\n      feeGrowthBelowX64A = poolState.feeGrowthGlobalX64A.sub(tickLowerState.feeGrowthOutsideX64A);\r\n      feeGrowthBelowX64B = poolState.feeGrowthGlobalX64B.sub(tickLowerState.feeGrowthOutsideX64B);\r\n    }\r\n\r\n    let feeGrowthAboveX64A = new BN(0);\r\n    let feeGrowthAboveX64B = new BN(0);\r\n    if (poolState.tickCurrent < tickUpperState.tick) {\r\n      feeGrowthAboveX64A = tickUpperState.feeGrowthOutsideX64A;\r\n      feeGrowthAboveX64B = tickUpperState.feeGrowthOutsideX64B;\r\n    } else {\r\n      feeGrowthAboveX64A = poolState.feeGrowthGlobalX64A.sub(tickUpperState.feeGrowthOutsideX64A);\r\n      feeGrowthAboveX64B = poolState.feeGrowthGlobalX64B.sub(tickUpperState.feeGrowthOutsideX64B);\r\n    }\r\n\r\n    const feeGrowthInsideX64A = MathUtil.wrappingSubU128(\r\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64A, feeGrowthBelowX64A),\r\n      feeGrowthAboveX64A,\r\n    );\r\n    const feeGrowthInsideBX64 = MathUtil.wrappingSubU128(\r\n      MathUtil.wrappingSubU128(poolState.feeGrowthGlobalX64B, feeGrowthBelowX64B),\r\n      feeGrowthAboveX64B,\r\n    );\r\n    return { feeGrowthInsideX64A, feeGrowthInsideBX64 };\r\n  }\r\n\r\n  static GetPositionFees(\r\n    ammPool: ClmmPoolInfo,\r\n    positionState: ClmmPoolPersonalPosition,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\r\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\r\n      ammPool,\r\n      tickLowerState,\r\n      tickUpperState,\r\n    );\r\n\r\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\r\n\r\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\r\n\r\n    return { tokenFeeAmountA, tokenFeeAmountB };\r\n  }\r\n\r\n  static GetPositionFeesV2(\r\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64A\" | \"feeGrowthGlobalX64B\">,\r\n    positionState: ClmmPositionLayout,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): { tokenFeeAmountA: BN; tokenFeeAmountB: BN } {\r\n    const { feeGrowthInsideX64A, feeGrowthInsideBX64 } = this.getfeeGrowthInside(\r\n      ammPool,\r\n      tickLowerState,\r\n      tickUpperState,\r\n    );\r\n\r\n    const feeGrowthdeltaA = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideX64A, positionState.feeGrowthInsideLastX64A),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountA = positionState.tokenFeesOwedA.add(feeGrowthdeltaA);\r\n\r\n    const feeGrowthdelta1 = MathUtil.mulDivFloor(\r\n      MathUtil.wrappingSubU128(feeGrowthInsideBX64, positionState.feeGrowthInsideLastX64B),\r\n      positionState.liquidity,\r\n      Q64,\r\n    );\r\n    const tokenFeeAmountB = positionState.tokenFeesOwedB.add(feeGrowthdelta1);\r\n\r\n    return { tokenFeeAmountA, tokenFeeAmountB };\r\n  }\r\n\r\n  static GetPositionRewardsV2(\r\n    ammPool: Pick<ClmmPoolInfo, \"tickCurrent\" | \"feeGrowthGlobalX64B\"> & {\r\n      rewardInfos: { rewardGrowthGlobalX64: BN }[];\r\n    },\r\n    positionState: ClmmPositionLayout,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): BN[] {\r\n    const rewards: BN[] = [];\r\n\r\n    const rewardGrowthsInside = this.getRewardGrowthInsideV2(\r\n      ammPool.tickCurrent,\r\n      tickLowerState,\r\n      tickUpperState,\r\n      ammPool.rewardInfos,\r\n    );\r\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\r\n      const rewardGrowthInside = rewardGrowthsInside[i];\r\n      const currRewardInfo = positionState.rewardInfos[i];\r\n\r\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\r\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\r\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\r\n      rewards.push(rewardAmountOwed);\r\n    }\r\n    return rewards;\r\n  }\r\n\r\n  static GetPositionRewards(\r\n    ammPool: ClmmPoolInfo,\r\n    positionState: ClmmPoolPersonalPosition,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n  ): BN[] {\r\n    const rewards: BN[] = [];\r\n\r\n    const rewardGrowthsInside = this.getRewardGrowthInside(\r\n      ammPool.tickCurrent,\r\n      tickLowerState,\r\n      tickUpperState,\r\n      ammPool.rewardInfos,\r\n    );\r\n    for (let i = 0; i < rewardGrowthsInside.length; i++) {\r\n      const rewardGrowthInside = rewardGrowthsInside[i];\r\n      const currRewardInfo = positionState.rewardInfos[i];\r\n\r\n      const rewardGrowthDelta = MathUtil.wrappingSubU128(rewardGrowthInside, currRewardInfo.growthInsideLastX64);\r\n      const amountOwedDelta = MathUtil.mulDivFloor(rewardGrowthDelta, positionState.liquidity, Q64);\r\n      const rewardAmountOwed = currRewardInfo.rewardAmountOwed.add(amountOwedDelta);\r\n      rewards.push(rewardAmountOwed);\r\n    }\r\n    return rewards;\r\n  }\r\n\r\n  static getRewardGrowthInside(\r\n    tickCurrentIndex: number,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n    rewardInfos: ClmmPoolRewardInfo[],\r\n  ): BN[] {\r\n    const rewardGrowthsInside: BN[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      let rewardGrowthsBelow = new BN(0);\r\n      if (tickLowerState.liquidityGross.eqn(0)) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\r\n      } else if (tickCurrentIndex < tickLowerState.tick) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\r\n      } else {\r\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\r\n      }\r\n\r\n      let rewardGrowthsAbove = new BN(0);\r\n      if (tickUpperState.liquidityGross.eqn(0)) {\r\n        //\r\n      } else if (tickCurrentIndex < tickUpperState.tick) {\r\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\r\n      } else {\r\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\r\n      }\r\n\r\n      rewardGrowthsInside.push(\r\n        MathUtil.wrappingSubU128(\r\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\r\n          rewardGrowthsAbove,\r\n        ),\r\n      );\r\n    }\r\n\r\n    return rewardGrowthsInside;\r\n  }\r\n\r\n  static getRewardGrowthInsideV2(\r\n    tickCurrentIndex: number,\r\n    tickLowerState: Tick,\r\n    tickUpperState: Tick,\r\n    rewardInfos: Pick<ClmmPoolRewardInfo, \"rewardGrowthGlobalX64\">[],\r\n  ): BN[] {\r\n    const rewardGrowthsInside: BN[] = [];\r\n    for (let i = 0; i < rewardInfos.length; i++) {\r\n      let rewardGrowthsBelow = new BN(0);\r\n      if (tickLowerState.liquidityGross.eqn(0)) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64;\r\n      } else if (tickCurrentIndex < tickLowerState.tick) {\r\n        rewardGrowthsBelow = rewardInfos[i].rewardGrowthGlobalX64.sub(tickLowerState.rewardGrowthsOutsideX64[i]);\r\n      } else {\r\n        rewardGrowthsBelow = tickLowerState.rewardGrowthsOutsideX64[i];\r\n      }\r\n\r\n      let rewardGrowthsAbove = new BN(0);\r\n      if (tickUpperState.liquidityGross.eqn(0)) {\r\n        //\r\n      } else if (tickCurrentIndex < tickUpperState.tick) {\r\n        rewardGrowthsAbove = tickUpperState.rewardGrowthsOutsideX64[i];\r\n      } else {\r\n        rewardGrowthsAbove = rewardInfos[i].rewardGrowthGlobalX64.sub(tickUpperState.rewardGrowthsOutsideX64[i]);\r\n      }\r\n\r\n      rewardGrowthsInside.push(\r\n        MathUtil.wrappingSubU128(\r\n          MathUtil.wrappingSubU128(rewardInfos[i].rewardGrowthGlobalX64, rewardGrowthsBelow),\r\n          rewardGrowthsAbove,\r\n        ),\r\n      );\r\n    }\r\n\r\n    return rewardGrowthsInside;\r\n  }\r\n\r\n  static getAmountsFromLiquidity({\r\n    poolInfo,\r\n    ownerPosition,\r\n    liquidity,\r\n    slippage,\r\n    add,\r\n    epochInfo,\r\n  }: GetAmountParams): ReturnTypeGetLiquidityAmountOut {\r\n    const sqrtPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n      new Decimal(poolInfo.price),\r\n      poolInfo.mintA.decimals,\r\n      poolInfo.mintB.decimals,\r\n    );\r\n    const sqrtPriceX64A = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickLower);\r\n    const sqrtPriceX64B = SqrtPriceMath.getSqrtPriceX64FromTick(ownerPosition.tickUpper);\r\n\r\n    const coefficientRe = add ? 1 + slippage : 1 - slippage;\r\n\r\n    const amounts = LiquidityMath.getAmountsFromLiquidity(sqrtPriceX64, sqrtPriceX64A, sqrtPriceX64B, liquidity, add);\r\n\r\n    const [amountA, amountB] = [\r\n      getTransferAmountFeeV2(amounts.amountA, poolInfo.mintA.extensions?.feeConfig, epochInfo, true),\r\n      getTransferAmountFeeV2(amounts.amountB, poolInfo.mintB.extensions?.feeConfig, epochInfo, true),\r\n    ];\r\n    const [amountSlippageA, amountSlippageB] = [\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountA.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintA.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n      getTransferAmountFeeV2(\r\n        new BN(new Decimal(amounts.amountB.toString()).mul(coefficientRe).toFixed(0)),\r\n        poolInfo.mintB.extensions?.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      ),\r\n    ];\r\n\r\n    return {\r\n      liquidity,\r\n      amountA,\r\n      amountB,\r\n      amountSlippageA,\r\n      amountSlippageB,\r\n      expirationTime: minExpirationTime(amountA.expirationTime, amountB.expirationTime),\r\n    };\r\n  }\r\n}\r\n","import { blob, bool, i128, publicKey, s32, seq, struct, u128, u16, u32, u64, u8 } from \"@/marshmallow\";\r\n\r\nimport { TICK_ARRAY_SIZE } from \"./utils/tick\";\r\nimport { EXTENSION_TICKARRAY_BITMAP_SIZE } from \"./utils/tickarrayBitmap\";\r\n\r\nexport const ClmmConfigLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  u16(\"index\"),\r\n  publicKey(\"\"),\r\n  u32(\"protocolFeeRate\"),\r\n  u32(\"tradeFeeRate\"),\r\n  u16(\"tickSpacing\"),\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport const ObservationLayout = struct([\r\n  u32(\"blockTimestamp\"),\r\n  u128(\"sqrtPriceX64\"),\r\n  u128(\"cumulativeTimePriceX64\"),\r\n  seq(u128(), 1, \"\"),\r\n]);\r\nexport const ObservationInfoLayout = struct([\r\n  blob(8),\r\n  bool(\"initialized\"),\r\n  publicKey(\"poolId\"),\r\n  seq(ObservationLayout, 1000, \"observations\"),\r\n  seq(u128(), 5, \"\"),\r\n]);\r\n\r\nexport const RewardInfo = struct([\r\n  u8(\"rewardState\"),\r\n  u64(\"openTime\"),\r\n  u64(\"endTime\"),\r\n  u64(\"lastUpdateTime\"),\r\n  u128(\"emissionsPerSecondX64\"),\r\n  u64(\"rewardTotalEmissioned\"),\r\n  u64(\"rewardClaimed\"),\r\n  publicKey(\"tokenMint\"),\r\n  publicKey(\"tokenVault\"),\r\n  publicKey(\"creator\"),\r\n  u128(\"rewardGrowthGlobalX64\"),\r\n]);\r\nexport const PoolInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"ammConfig\"),\r\n  publicKey(\"creator\"),\r\n  publicKey(\"mintA\"),\r\n  publicKey(\"mintB\"),\r\n  publicKey(\"vaultA\"),\r\n  publicKey(\"vaultB\"),\r\n  publicKey(\"observationId\"),\r\n  u8(\"mintDecimalsA\"),\r\n  u8(\"mintDecimalsB\"),\r\n  u16(\"tickSpacing\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"sqrtPriceX64\"),\r\n  s32(\"tickCurrent\"),\r\n  u16(\"observationIndex\"),\r\n  u16(\"observationUpdateDuration\"),\r\n  u128(\"feeGrowthGlobalX64A\"),\r\n  u128(\"feeGrowthGlobalX64B\"),\r\n  u64(\"protocolFeesTokenA\"),\r\n  u64(\"protocolFeesTokenB\"),\r\n\r\n  u128(\"swapInAmountTokenA\"),\r\n  u128(\"swapOutAmountTokenB\"),\r\n  u128(\"swapInAmountTokenB\"),\r\n  u128(\"swapOutAmountTokenA\"),\r\n\r\n  u8(\"status\"),\r\n\r\n  seq(u8(), 7, \"\"),\r\n\r\n  seq(RewardInfo, 3, \"rewardInfos\"),\r\n  seq(u64(), 16, \"tickArrayBitmap\"),\r\n\r\n  u64(\"totalFeesTokenA\"),\r\n  u64(\"totalFeesClaimedTokenA\"),\r\n  u64(\"totalFeesTokenB\"),\r\n  u64(\"totalFeesClaimedTokenB\"),\r\n\r\n  u64(\"fundFeesTokenA\"),\r\n  u64(\"fundFeesTokenB\"),\r\n\r\n  u64(\"startTime\"),\r\n\r\n  seq(u64(), 15 * 4 - 3, \"padding\"),\r\n]);\r\n\r\nexport const PositionRewardInfoLayout = struct([u128(\"growthInsideLastX64\"), u64(\"rewardAmountOwed\")]);\r\nexport const PositionInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"nftMint\"),\r\n  publicKey(\"poolId\"),\r\n\r\n  s32(\"tickLower\"),\r\n  s32(\"tickUpper\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"feeGrowthInsideLastX64A\"),\r\n  u128(\"feeGrowthInsideLastX64B\"),\r\n  u64(\"tokenFeesOwedA\"),\r\n  u64(\"tokenFeesOwedB\"),\r\n\r\n  seq(PositionRewardInfoLayout, 3, \"rewardInfos\"),\r\n\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport type ClmmPositionLayout = ReturnType<typeof PositionInfoLayout.decode>;\r\n\r\nexport const ProtocolPositionLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  publicKey(\"poolId\"),\r\n  s32(\"tickLowerIndex\"),\r\n  s32(\"tickUpperIndex\"),\r\n  u128(\"liquidity\"),\r\n  u128(\"feeGrowthInsideLastX64A\"),\r\n  u128(\"feeGrowthInsideLastX64B\"),\r\n  u64(\"tokenFeesOwedA\"),\r\n  u64(\"tokenFeesOwedB\"),\r\n  seq(u128(), 3, \"rewardGrowthInside\"),\r\n\r\n  seq(u64(), 8, \"\"),\r\n]);\r\n\r\nexport const TickLayout = struct([\r\n  s32(\"tick\"),\r\n  i128(\"liquidityNet\"),\r\n  u128(\"liquidityGross\"),\r\n  u128(\"feeGrowthOutsideX64A\"),\r\n  u128(\"feeGrowthOutsideX64B\"),\r\n  seq(u128(), 3, \"rewardGrowthsOutsideX64\"),\r\n\r\n  seq(u32(), 13, \"\"),\r\n]);\r\n\r\nexport const TickArrayLayout = struct([\r\n  blob(8),\r\n  publicKey(\"poolId\"),\r\n  s32(\"startTickIndex\"),\r\n  seq(TickLayout, TICK_ARRAY_SIZE, \"ticks\"),\r\n  u8(\"initializedTickCount\"),\r\n\r\n  seq(u8(), 115, \"\"),\r\n]);\r\n\r\nexport const OperationLayout = struct([blob(329), seq(publicKey(), 100, \"whitelistMints\")]);\r\n\r\nexport const TickArrayBitmapExtensionLayout = struct([\r\n  blob(8),\r\n  publicKey(\"poolId\"),\r\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"positiveTickArrayBitmap\"),\r\n  seq(seq(u64(), 8), EXTENSION_TICKARRAY_BITMAP_SIZE, \"negativeTickArrayBitmap\"),\r\n]);\r\n","import { Connection, PublicKey } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { AmmV4Keys, AmmV5Keys } from \"@/api/type\";\r\nimport { toApiV3Token } from \"@/raydium/token/utils\";\r\nimport {\r\n  findProgramAddress,\r\n  simulateMultipleInstruction,\r\n  parseSimulateLogToJson,\r\n  parseSimulateValue,\r\n} from \"@/common/txTool/txUtils\";\r\nimport { getSerumAssociatedAuthority } from \"./serum\";\r\nimport { LiquidityPoolKeys, ComputeAmountOutParam, AmmRpcData } from \"./type\";\r\nimport { StableLayout } from \"./stable\";\r\nimport { makeSimulatePoolInfoInstruction } from \"./instruction\";\r\nimport { liquidityStateV4Layout } from \"./layout\";\r\nimport BN from \"bn.js\";\r\nimport Decimal from \"decimal.js\";\r\n\r\ntype AssociatedName =\r\n  | \"amm_associated_seed\"\r\n  | \"lp_mint_associated_seed\"\r\n  | \"coin_vault_associated_seed\"\r\n  | \"pc_vault_associated_seed\"\r\n  | \"lp_mint_associated_seed\"\r\n  | \"temp_lp_token_associated_seed\"\r\n  | \"open_order_associated_seed\"\r\n  | \"target_associated_seed\"\r\n  | \"withdraw_associated_seed\";\r\n\r\ninterface GetAssociatedParam {\r\n  name: AssociatedName;\r\n  programId: PublicKey;\r\n  marketId: PublicKey;\r\n}\r\n\r\nexport function getAssociatedConfigId({ programId }: { programId: PublicKey }): PublicKey {\r\n  const { publicKey } = findProgramAddress([Buffer.from(\"amm_config_account_seed\", \"utf-8\")], programId);\r\n  return publicKey;\r\n}\r\n\r\nexport function getLiquidityAssociatedId({ name, programId, marketId }: GetAssociatedParam): PublicKey {\r\n  const { publicKey } = findProgramAddress(\r\n    [programId.toBuffer(), marketId.toBuffer(), Buffer.from(name, \"utf-8\")],\r\n    programId,\r\n  );\r\n  return publicKey;\r\n}\r\n\r\nexport function getAssociatedOpenOrders({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\r\n  const { publicKey } = findProgramAddress(\r\n    [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"open_order_associated_seed\", \"utf-8\")],\r\n    programId,\r\n  );\r\n  return publicKey;\r\n}\r\n\r\nexport function getLiquidityAssociatedAuthority({ programId }: { programId: PublicKey }): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([Buffer.from([97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121])], programId);\r\n}\r\n\r\nexport function getAssociatedPoolKeys({\r\n  version,\r\n  marketVersion,\r\n  marketId,\r\n  baseMint,\r\n  quoteMint,\r\n  baseDecimals,\r\n  quoteDecimals,\r\n  programId,\r\n  marketProgramId,\r\n}: {\r\n  version: 4 | 5;\r\n  marketVersion: 3;\r\n  marketId: PublicKey;\r\n  baseMint: PublicKey;\r\n  quoteMint: PublicKey;\r\n  baseDecimals: number;\r\n  quoteDecimals: number;\r\n  programId: PublicKey;\r\n  marketProgramId: PublicKey;\r\n}): LiquidityPoolKeys {\r\n  const id = getLiquidityAssociatedId({ name: \"amm_associated_seed\", programId, marketId });\r\n  const lpMint = getLiquidityAssociatedId({ name: \"lp_mint_associated_seed\", programId, marketId });\r\n  const { publicKey: authority, nonce } = getLiquidityAssociatedAuthority({ programId });\r\n  const baseVault = getLiquidityAssociatedId({ name: \"coin_vault_associated_seed\", programId, marketId });\r\n  const quoteVault = getLiquidityAssociatedId({ name: \"pc_vault_associated_seed\", programId, marketId });\r\n  const lpVault = getLiquidityAssociatedId({ name: \"temp_lp_token_associated_seed\", programId, marketId });\r\n  const openOrders = getAssociatedOpenOrders({ programId, marketId });\r\n  const targetOrders = getLiquidityAssociatedId({ name: \"target_associated_seed\", programId, marketId });\r\n  const withdrawQueue = getLiquidityAssociatedId({ name: \"withdraw_associated_seed\", programId, marketId });\r\n\r\n  const { publicKey: marketAuthority } = getSerumAssociatedAuthority({\r\n    programId: marketProgramId,\r\n    marketId,\r\n  });\r\n\r\n  return {\r\n    // base\r\n    id,\r\n    baseMint,\r\n    quoteMint,\r\n    lpMint,\r\n    baseDecimals,\r\n    quoteDecimals,\r\n    lpDecimals: baseDecimals,\r\n    // version\r\n    version,\r\n    programId,\r\n    // keys\r\n    authority,\r\n    nonce,\r\n    baseVault,\r\n    quoteVault,\r\n    lpVault,\r\n    openOrders,\r\n    targetOrders,\r\n    withdrawQueue,\r\n    // market version\r\n    marketVersion,\r\n    marketProgramId,\r\n    // market keys\r\n    marketId,\r\n    marketAuthority,\r\n    lookupTableAccount: PublicKey.default,\r\n    configId: getAssociatedConfigId({ programId }),\r\n  };\r\n}\r\n\r\nlet stableLayout: StableLayout | undefined;\r\n\r\nexport async function fetchMultipleInfo({\r\n  connection,\r\n  poolKeysList,\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  config,\r\n}: {\r\n  connection: Connection;\r\n  poolKeysList: (AmmV4Keys | AmmV5Keys)[];\r\n  config: any;\r\n}): Promise<\r\n  {\r\n    status: BN;\r\n    baseDecimals: number;\r\n    quoteDecimals: number;\r\n    lpDecimals: number;\r\n    baseReserve: BN;\r\n    quoteReserve: BN;\r\n    lpSupply: BN;\r\n    startTime: BN;\r\n  }[]\r\n> {\r\n  if (!stableLayout) {\r\n    stableLayout = new StableLayout({ connection });\r\n    await stableLayout.initStableModelLayout();\r\n  }\r\n\r\n  const instructions = poolKeysList.map((pool) => makeSimulatePoolInfoInstruction({ poolKeys: pool }));\r\n  const logs = await simulateMultipleInstruction(\r\n    connection,\r\n    instructions.map((i) => i.instruction),\r\n    \"GetPoolData\",\r\n  );\r\n\r\n  const poolsInfo = logs.map((log) => {\r\n    const json = parseSimulateLogToJson(log, \"GetPoolData\");\r\n\r\n    const status = new BN(parseSimulateValue(json, \"status\"));\r\n    const baseDecimals = Number(parseSimulateValue(json, \"coin_decimals\"));\r\n    const quoteDecimals = Number(parseSimulateValue(json, \"pc_decimals\"));\r\n    const lpDecimals = Number(parseSimulateValue(json, \"lp_decimals\"));\r\n    const baseReserve = new BN(parseSimulateValue(json, \"pool_coin_amount\"));\r\n    const quoteReserve = new BN(parseSimulateValue(json, \"pool_pc_amount\"));\r\n    const lpSupply = new BN(parseSimulateValue(json, \"pool_lp_supply\"));\r\n    // TODO fix it when split stable\r\n    let startTime = \"0\";\r\n    try {\r\n      startTime = parseSimulateValue(json, \"pool_open_time\");\r\n    } catch (error) {\r\n      //\r\n    }\r\n\r\n    return {\r\n      status,\r\n      baseDecimals,\r\n      quoteDecimals,\r\n      lpDecimals,\r\n      baseReserve,\r\n      quoteReserve,\r\n      lpSupply,\r\n      startTime: new BN(startTime),\r\n    };\r\n  });\r\n\r\n  return poolsInfo;\r\n}\r\n\r\nconst mockRewardData = {\r\n  volume: 0,\r\n  volumeQuote: 0,\r\n  volumeFee: 0,\r\n  apr: 0,\r\n  feeApr: 0,\r\n  priceMin: 0,\r\n  priceMax: 0,\r\n  rewardApr: [],\r\n};\r\n\r\nexport const toAmmComputePoolInfo = (\r\n  poolData: Record<string, AmmRpcData>,\r\n): Record<string, ComputeAmountOutParam[\"poolInfo\"]> => {\r\n  const data: Record<string, ComputeAmountOutParam[\"poolInfo\"]> = {};\r\n  const tokenProgramStr = TOKEN_PROGRAM_ID.toBase58();\r\n\r\n  Object.keys(poolData).map((poolId) => {\r\n    const poolInfo = poolData[poolId];\r\n    const [mintA, mintB] = [poolInfo.baseMint.toBase58(), poolInfo.quoteMint.toBase58()];\r\n    data[poolId] = {\r\n      id: poolId,\r\n      version: 4,\r\n      status: poolInfo.status.toNumber(),\r\n      programId: poolInfo.programId.toBase58(), // needed\r\n      mintA: toApiV3Token({\r\n        address: mintA, // needed\r\n        programId: tokenProgramStr,\r\n        decimals: poolInfo.baseDecimal.toNumber(),\r\n      }),\r\n      mintB: toApiV3Token({\r\n        address: mintB, // needed\r\n        programId: tokenProgramStr,\r\n        decimals: poolInfo.quoteDecimal.toNumber(),\r\n      }),\r\n      rewardDefaultInfos: [],\r\n      rewardDefaultPoolInfos: \"Ecosystem\",\r\n      price: poolInfo.poolPrice.toNumber(),\r\n      mintAmountA: new Decimal(poolInfo.mintAAmount.toString()).div(10 ** poolInfo.baseDecimal.toNumber()).toNumber(),\r\n      mintAmountB: new Decimal(poolInfo.mintBAmount.toString()).div(10 ** poolInfo.quoteDecimal.toNumber()).toNumber(),\r\n      baseReserve: poolInfo.baseReserve, // needed\r\n      quoteReserve: poolInfo.quoteReserve, // needed\r\n      feeRate: new Decimal(poolInfo.tradeFeeNumerator.toString())\r\n        .div(poolInfo.tradeFeeDenominator.toString())\r\n        .toNumber(),\r\n      tvl: 0,\r\n      day: mockRewardData,\r\n      week: mockRewardData,\r\n      month: mockRewardData,\r\n      pooltype: [],\r\n      farmUpcomingCount: 0,\r\n      farmOngoingCount: 0,\r\n      farmFinishedCount: 0,\r\n      type: \"Standard\",\r\n      marketId: poolInfo.marketId.toBase58(),\r\n      configId: getAssociatedConfigId({ programId: poolInfo.programId }).toBase58(),\r\n      lpPrice: 0,\r\n      lpAmount: 0,\r\n      lpMint: toApiV3Token({\r\n        address: poolInfo.lpMint.toBase58(),\r\n        programId: tokenProgramStr,\r\n        decimals: Math.min(poolInfo.baseDecimal.toNumber(), poolInfo.quoteDecimal.toNumber()),\r\n      }),\r\n    };\r\n  });\r\n  return data;\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { LIQUIDITY_VERSION_TO_SERUM_VERSION } from \"./constant\";\r\nimport { SerumVersion } from \"../serum\";\r\nimport { createLogger } from \"@/common/logger\";\r\n\r\nconst logger = createLogger(\"Raydium_liquidity_serum\");\r\n\r\nexport function getSerumVersion(version: number): SerumVersion {\r\n  const serumVersion = LIQUIDITY_VERSION_TO_SERUM_VERSION[version];\r\n  if (!serumVersion) logger.logWithError(\"invalid version\", \"version\", version);\r\n\r\n  return serumVersion;\r\n}\r\n\r\nexport function getSerumAssociatedAuthority({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  const seeds = [marketId.toBuffer()];\r\n\r\n  let nonce = 0;\r\n  let publicKey: PublicKey;\r\n\r\n  while (nonce < 100) {\r\n    try {\r\n      const seedsWithNonce = seeds.concat(Buffer.from([nonce]), Buffer.alloc(7));\r\n      publicKey = PublicKey.createProgramAddressSync(seedsWithNonce, programId);\r\n    } catch (err) {\r\n      if (err instanceof TypeError) {\r\n        throw err;\r\n      }\r\n      nonce++;\r\n      continue;\r\n    }\r\n    return { publicKey, nonce };\r\n  }\r\n\r\n  logger.logWithError(\"unable to find a viable program address nonce\", \"params\", {\r\n    programId,\r\n    marketId,\r\n  });\r\n  throw new Error(\"unable to find a viable program address nonce\");\r\n}\r\n","import BN from \"bn.js\";\r\nimport { SerumVersion } from \"../serum\";\r\n\r\nexport const LIQUIDITY_FEES_NUMERATOR = new BN(25);\r\nexport const LIQUIDITY_FEES_DENOMINATOR = new BN(10000);\r\n\r\n// liquidity version => serum version\r\nexport const LIQUIDITY_VERSION_TO_SERUM_VERSION: {\r\n  [key in 4 | 5]?: SerumVersion;\r\n} = {\r\n  4: 3,\r\n  5: 3,\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport Decimal from \"decimal.js\";\r\nimport { InstructionType, WSOLMint, fetchMultipleMintInfos, getMultipleAccountsInfoWithCustomFlags } from \"@/common\";\r\nimport { ApiV3PoolInfoConcentratedItem, ClmmKeys } from \"@/api/type\";\r\nimport { MakeTxData, MakeMultiTxData } from \"@/common/txTool/txTool\";\r\nimport { TxVersion } from \"@/common/txTool/txType\";\r\nimport { getATAAddress } from \"@/common\";\r\nimport { toApiV3Token, toFeeConfig } from \"@/raydium/token/utils\";\r\nimport { ReturnTypeFetchMultipleMintInfos } from \"@/raydium/type\";\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport { mockV3CreatePoolInfo, MIN_SQRT_PRICE_X64, MAX_SQRT_PRICE_X64 } from \"./utils/constants\";\r\nimport { SqrtPriceMath } from \"./utils/math\";\r\nimport {\r\n  CreateConcentratedPool,\r\n  IncreasePositionFromLiquidity,\r\n  IncreasePositionFromBase,\r\n  DecreaseLiquidity,\r\n  OpenPositionFromBase,\r\n  OpenPositionFromLiquidity,\r\n  InitRewardParams,\r\n  InitRewardsParams,\r\n  SetRewardParams,\r\n  SetRewardsParams,\r\n  CollectRewardParams,\r\n  CollectRewardsParams,\r\n  ManipulateLiquidityExtInfo,\r\n  OpenPositionFromLiquidityExtInfo,\r\n  OpenPositionFromBaseExtInfo,\r\n  ClosePositionExtInfo,\r\n  InitRewardExtInfo,\r\n  HarvestAllRewardsParams,\r\n  ComputeClmmPoolInfo,\r\n  ReturnTypeFetchMultiplePoolTickArrays,\r\n  ClmmRpcData,\r\n} from \"./type\";\r\nimport { ClmmInstrument } from \"./instrument\";\r\nimport { MakeTransaction } from \"../type\";\r\nimport { MathUtil } from \"./utils/math\";\r\nimport { PoolUtils, clmmComputeInfoToApiInfo } from \"./utils/pool\";\r\nimport { getPdaOperationAccount, getPdaPersonalPositionAddress } from \"./utils/pda\";\r\nimport { ClmmPositionLayout, OperationLayout, PositionInfoLayout, PoolInfoLayout, ClmmConfigLayout } from \"./layout\";\r\nimport BN from \"bn.js\";\r\nimport { AccountLayout, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { fetchMultipleInfo } from \"../liquidity\";\r\n\r\nexport class Clmm extends ModuleBase {\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  public async getClmmPoolKeys(poolId: string): Promise<ClmmKeys> {\r\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as ClmmKeys[])[0];\r\n  }\r\n\r\n  public async createPool<T extends TxVersion>(\r\n    props: CreateConcentratedPool<T>,\r\n  ): Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>> {\r\n    const {\r\n      programId,\r\n      owner = this.scope.owner?.publicKey || PublicKey.default,\r\n      mint1,\r\n      mint2,\r\n      ammConfig,\r\n      initialPrice,\r\n      startTime,\r\n      computeBudgetConfig,\r\n      forerunCreate,\r\n      txVersion,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder();\r\n    const [mintA, mintB, initPrice] = new BN(new PublicKey(mint1.address).toBuffer()).gt(\r\n      new BN(new PublicKey(mint2.address).toBuffer()),\r\n    )\r\n      ? [mint2, mint1, new Decimal(1).div(initialPrice)]\r\n      : [mint1, mint2, initialPrice];\r\n\r\n    const initialPriceX64 = SqrtPriceMath.priceToSqrtPriceX64(initPrice, mintA.decimals, mintB.decimals);\r\n\r\n    const insInfo = await ClmmInstrument.createPoolInstructions({\r\n      connection: this.scope.connection,\r\n      programId,\r\n      owner,\r\n      mintA,\r\n      mintB,\r\n      ammConfigId: ammConfig.id,\r\n      initialPriceX64,\r\n      startTime,\r\n      forerunCreate,\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n\r\n    return txBuilder.versionBuild<{\r\n      mockPoolInfo: ApiV3PoolInfoConcentratedItem;\r\n      address: ClmmKeys;\r\n      forerunCreate?: boolean;\r\n    }>({\r\n      txVersion,\r\n      extInfo: {\r\n        address: {\r\n          ...insInfo.address,\r\n          programId: programId.toString(),\r\n          id: insInfo.address.poolId.toString(),\r\n          mintA,\r\n          mintB,\r\n          vault: { A: insInfo.address.mintAVault.toString(), B: insInfo.address.mintBVault.toString() },\r\n          rewardInfos: [],\r\n          config: {\r\n            id: ammConfig.id.toString(),\r\n            index: ammConfig.index,\r\n            protocolFeeRate: ammConfig.protocolFeeRate,\r\n            tradeFeeRate: ammConfig.tradeFeeRate,\r\n            tickSpacing: ammConfig.tickSpacing,\r\n            fundFeeRate: ammConfig.fundFeeRate,\r\n            description: ammConfig.description,\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n        },\r\n        mockPoolInfo: {\r\n          type: \"Concentrated\",\r\n          rewardDefaultPoolInfos: \"Clmm\",\r\n          id: insInfo.address.poolId.toString(),\r\n          mintA,\r\n          mintB,\r\n          feeRate: ammConfig.tradeFeeRate,\r\n          programId: programId.toString(),\r\n          price: initPrice.toNumber(),\r\n          config: {\r\n            id: ammConfig.id.toString(),\r\n            index: ammConfig.index,\r\n            protocolFeeRate: ammConfig.protocolFeeRate,\r\n            tradeFeeRate: ammConfig.tradeFeeRate,\r\n            tickSpacing: ammConfig.tickSpacing,\r\n            fundFeeRate: ammConfig.fundFeeRate,\r\n            description: ammConfig.description,\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n          ...mockV3CreatePoolInfo,\r\n        },\r\n        forerunCreate,\r\n      },\r\n    }) as Promise<MakeTxData<T, { mockPoolInfo: ApiV3PoolInfoConcentratedItem; address: ClmmKeys }>>;\r\n  }\r\n\r\n  public async openPositionFromBase<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    tickLower,\r\n    tickUpper,\r\n    base,\r\n    baseAmount,\r\n    otherAmountMax,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    withMetadata = \"create\",\r\n    getEphemeralSigners,\r\n    computeBudgetConfig,\r\n    txVersion,\r\n  }: OpenPositionFromBase<T>): Promise<MakeTxData<T, OpenPositionFromBaseExtInfo>> {\r\n    if (this.scope.availability.addConcentratedPosition === false)\r\n      this.logAndCreateError(\"add position feature disabled in your region\");\r\n\r\n    this.scope.checkOwner();\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    let ownerTokenAccountA: PublicKey | null = null;\r\n    let ownerTokenAccountB: PublicKey | null = null;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n    const [amountA, amountB] = base === \"MintA\" ? [baseAmount, otherAmountMax] : [otherAmountMax, baseAmount];\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountA.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: amountA,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountB.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey!,\r\n                amount: amountB,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", {\r\n        ownerTokenAccountA: ownerTokenAccountA?.toBase58(),\r\n        ownerTokenAccountB: ownerTokenAccountB?.toBase58(),\r\n      });\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\r\n    const insInfo = await ClmmInstrument.openPositionFromBaseInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        ...ownerInfo,\r\n        feePayer: this.scope.ownerPubKey,\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      tickLower,\r\n      tickUpper,\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      withMetadata,\r\n      getEphemeralSigners,\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    return txBuilder.versionBuild<OpenPositionFromBaseExtInfo>({ txVersion, extInfo: insInfo.address }) as Promise<\r\n      MakeTxData<T, OpenPositionFromBaseExtInfo>\r\n    >;\r\n  }\r\n\r\n  public async openPositionFromLiquidity<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    amountMaxA,\r\n    amountMaxB,\r\n    tickLower,\r\n    tickUpper,\r\n    liquidity,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    withMetadata = \"create\",\r\n    txVersion,\r\n    getEphemeralSigners,\r\n  }: OpenPositionFromLiquidity<T>): Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>> {\r\n    if (this.scope.availability.createConcentratedPosition === false)\r\n      this.logAndCreateError(\"open position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    let ownerTokenAccountA: PublicKey | null = null;\r\n    let ownerTokenAccountB: PublicKey | null = null;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountMaxA.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: amountMaxA,\r\n              }\r\n            : undefined,\r\n\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountMaxB.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey!,\r\n                amount: amountMaxB,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (ownerTokenAccountA === undefined || ownerTokenAccountB === undefined)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const poolKeys = propPoolKeys || (await this.getClmmPoolKeys(poolInfo.id));\r\n\r\n    const makeOpenPositionInstructions = await ClmmInstrument.openPositionFromLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      tickLower,\r\n      tickUpper,\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      withMetadata,\r\n      getEphemeralSigners,\r\n    });\r\n    txBuilder.addInstruction(makeOpenPositionInstructions);\r\n\r\n    return txBuilder.versionBuild<OpenPositionFromLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: makeOpenPositionInstructions.address },\r\n    }) as Promise<MakeTxData<T, OpenPositionFromLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async increasePositionFromLiquidity<T extends TxVersion>(\r\n    props: IncreasePositionFromLiquidity<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      ownerPosition,\r\n      amountMaxA,\r\n      amountMaxB,\r\n      liquidity,\r\n      ownerInfo,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txVersion,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || amountMaxA.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: amountMaxA,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || amountMaxB.isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey!,\r\n                amount: amountMaxB,\r\n              }\r\n            : undefined,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const ins = ClmmInstrument.increasePositionFromLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      liquidity,\r\n      amountMaxA,\r\n      amountMaxB,\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async increasePositionFromBase<T extends TxVersion>(\r\n    props: IncreasePositionFromBase<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo>> {\r\n    const {\r\n      poolInfo,\r\n      ownerPosition,\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n      ownerInfo,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txVersion,\r\n    } = props;\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n    const { account: _ownerTokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || (base === \"MintA\" ? baseAmount : otherAmountMax).isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: base === \"MintA\" ? baseAmount : otherAmountMax,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountA) ownerTokenAccountA = _ownerTokenAccountA;\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || (base === \"MintA\" ? otherAmountMax : baseAmount).isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey!,\r\n                amount: base === \"MintA\" ? otherAmountMax : baseAmount,\r\n              }\r\n            : undefined,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    if (_ownerTokenAccountB) ownerTokenAccountB = _ownerTokenAccountB;\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", this.scope.account.tokenAccounts);\r\n\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const ins = ClmmInstrument.increasePositionFromBaseInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n      },\r\n      base,\r\n      baseAmount,\r\n      otherAmountMax,\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async decreaseLiquidity<T extends TxVersion>(\r\n    props: DecreaseLiquidity<T>,\r\n  ): Promise<MakeTxData<T, ManipulateLiquidityExtInfo & Partial<ClosePositionExtInfo>>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      ownerPosition,\r\n      ownerInfo,\r\n      amountMinA,\r\n      amountMinB,\r\n      liquidity,\r\n      associatedOnly = true,\r\n      checkCreateATAOwner = false,\r\n      computeBudgetConfig,\r\n      txVersion,\r\n    } = props;\r\n    if (this.scope.availability.removeConcentratedPosition === false)\r\n      this.logAndCreateError(\"remove position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined = undefined;\r\n    let ownerTokenAccountB: PublicKey | undefined = undefined;\r\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountA = _ownerTokenAccountA;\r\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerTokenAccountB = _ownerTokenAccountB;\r\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\r\n\r\n    const rewardAccounts: PublicKey[] = [];\r\n    for (const itemReward of poolInfo.rewardDefaultInfos) {\r\n      const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n\r\n      let ownerRewardAccount: PublicKey | undefined;\r\n\r\n      if (itemReward.mint.address === poolInfo.mintA.address) ownerRewardAccount = ownerTokenAccountA;\r\n      else if (itemReward.mint.address === poolInfo.mintB.address) ownerRewardAccount = ownerTokenAccountB;\r\n      else {\r\n        const { account: _ownerRewardAccount, instructionParams: ownerRewardAccountInstructions } =\r\n          await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: new PublicKey(itemReward.mint.programId),\r\n            mint: new PublicKey(itemReward.mint.address),\r\n            notUseTokenAccount: rewardUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            createInfo: {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            skipCloseAccount: !rewardUseSOLBalance,\r\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n            checkCreateATAOwner,\r\n          });\r\n        ownerRewardAccount = _ownerRewardAccount;\r\n        ownerRewardAccountInstructions && txBuilder.addInstruction(ownerRewardAccountInstructions);\r\n      }\r\n\r\n      rewardAccounts.push(ownerRewardAccount!);\r\n    }\r\n\r\n    if (!ownerTokenAccountA && !ownerTokenAccountB)\r\n      this.logAndCreateError(\r\n        \"cannot found target token accounts\",\r\n        \"tokenAccounts\",\r\n        this.scope.account.tokenAccountRawInfos,\r\n      );\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n\r\n    const decreaseInsInfo = await ClmmInstrument.decreaseLiquidityInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerPosition,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccountA: ownerTokenAccountA!,\r\n        tokenAccountB: ownerTokenAccountB!,\r\n        rewardAccounts,\r\n      },\r\n      liquidity,\r\n      amountMinA,\r\n      amountMinB,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: decreaseInsInfo.instructions,\r\n      instructionTypes: [InstructionType.ClmmDecreasePosition],\r\n    });\r\n\r\n    let extInfo = { ...decreaseInsInfo.address };\r\n    if (ownerInfo.closePosition) {\r\n      const closeInsInfo = await ClmmInstrument.closePositionInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: { wallet: this.scope.ownerPubKey },\r\n        ownerPosition,\r\n      });\r\n      txBuilder.addInstruction({\r\n        endInstructions: closeInsInfo.instructions,\r\n        endInstructionTypes: closeInsInfo.instructionTypes,\r\n      });\r\n      extInfo = { ...extInfo, ...closeInsInfo.address };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n\r\n    return txBuilder.versionBuild<ManipulateLiquidityExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: extInfo },\r\n    }) as Promise<MakeTxData<T, ManipulateLiquidityExtInfo>>;\r\n  }\r\n\r\n  public async closePosition<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerPosition,\r\n    txVersion,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    ownerPosition: ClmmPositionLayout;\r\n    txVersion: T;\r\n  }): Promise<MakeTxData<T, ClosePositionExtInfo>> {\r\n    if (this.scope.availability.removeConcentratedPosition === false)\r\n      this.logAndCreateError(\"remove position feature disabled in your region\");\r\n    const txBuilder = this.createTxBuilder();\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    const ins = ClmmInstrument.closePositionInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: { wallet: this.scope.ownerPubKey },\r\n      ownerPosition,\r\n    });\r\n\r\n    return txBuilder.addInstruction(ins).versionBuild<ClosePositionExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: ins.address },\r\n    }) as Promise<MakeTxData<T, ClosePositionExtInfo>>;\r\n  }\r\n\r\n  public async initReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txVersion,\r\n  }: InitRewardParams<T>): Promise<MakeTxData<T, InitRewardExtInfo>> {\r\n    if (rewardInfo.endTime <= rewardInfo.openTime)\r\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    const rewardMintUseSOLBalance =\r\n      ownerInfo.useSOLBalance && rewardInfo.mint.address.toString() === WSOLMint.toString();\r\n    const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\r\n\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: new PublicKey(rewardInfo.mint.address),\r\n        mint: new PublicKey(rewardInfo.mint.address),\r\n        notUseTokenAccount: !!rewardMintUseSOLBalance,\r\n        skipCloseAccount: !rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: rewardMintUseSOLBalance\r\n          ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: new BN(\r\n                new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\r\n                  ? _baseRewardAmount.toFixed(0)\r\n                  : _baseRewardAmount.add(1).toFixed(0),\r\n              ),\r\n            }\r\n          : undefined,\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\r\n\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.initRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardInfo: {\r\n        programId: new PublicKey(rewardInfo.mint.programId),\r\n        mint: new PublicKey(rewardInfo.mint.address),\r\n        openTime: rewardInfo.openTime,\r\n        endTime: rewardInfo.endTime,\r\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n      },\r\n    });\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    return txBuilder.versionBuild<InitRewardExtInfo>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<T, InitRewardExtInfo>>;\r\n  }\r\n\r\n  public async initRewards<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    rewardInfos,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txVersion,\r\n  }: InitRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    for (const rewardInfo of rewardInfos) {\r\n      if (rewardInfo.endTime <= rewardInfo.openTime)\r\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n    }\r\n\r\n    const txBuilder = this.createTxBuilder();\r\n    let address: Record<string, PublicKey> = {};\r\n\r\n    for (const rewardInfo of rewardInfos) {\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\r\n      const _baseRewardAmount = rewardInfo.perSecond.mul(rewardInfo.endTime - rewardInfo.openTime);\r\n\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardAccountIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          notUseTokenAccount: !!rewardMintUseSOLBalance,\r\n          skipCloseAccount: !rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo: rewardMintUseSOLBalance\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: new BN(\r\n                  new Decimal(_baseRewardAmount.toFixed(0)).gte(_baseRewardAmount)\r\n                    ? _baseRewardAmount.toFixed(0)\r\n                    : _baseRewardAmount.add(1).toFixed(0),\r\n                ),\r\n              }\r\n            : undefined,\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      ownerRewardAccountIns && txBuilder.addInstruction(ownerRewardAccountIns);\r\n\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n\r\n      const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n      const insInfo = ClmmInstrument.initRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n        rewardInfo: {\r\n          programId: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          openTime: rewardInfo.openTime,\r\n          endTime: rewardInfo.endTime,\r\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n        },\r\n      });\r\n      address = {\r\n        ...address,\r\n        ...insInfo.address,\r\n      };\r\n      txBuilder.addInstruction(insInfo);\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: { address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async setReward<T extends TxVersion>({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txVersion,\r\n  }: SetRewardParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    if (rewardInfo.endTime <= rewardInfo.openTime)\r\n      this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n    const txBuilder = this.createTxBuilder();\r\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.equals(WSOLMint);\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: rewardInfo.programId,\r\n        mint: rewardInfo.mint,\r\n        notUseTokenAccount: rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: rewardMintUseSOLBalance\r\n          ? {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: new BN(\r\n                new Decimal(rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\r\n                  rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime),\r\n                )\r\n                  ? rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\r\n                  : rewardInfo.perSecond\r\n                      .sub(rewardInfo.endTime - rewardInfo.openTime)\r\n                      .add(1)\r\n                      .toFixed(0),\r\n              ),\r\n            }\r\n          : undefined,\r\n\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.setRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardInfo: {\r\n        mint: rewardInfo.mint,\r\n        openTime: rewardInfo.openTime,\r\n        endTime: rewardInfo.endTime,\r\n        emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n      },\r\n    });\r\n\r\n    txBuilder.addInstruction(insInfo);\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address: insInfo.address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async setRewards<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    ownerInfo,\r\n    rewardInfos,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    computeBudgetConfig,\r\n    txVersion,\r\n  }: SetRewardsParams<T>): Promise<MakeTxData<T, { address: Record<string, PublicKey> }>> {\r\n    const txBuilder = this.createTxBuilder();\r\n    let address: Record<string, PublicKey> = {};\r\n    for (const rewardInfo of rewardInfos) {\r\n      if (rewardInfo.endTime <= rewardInfo.openTime)\r\n        this.logAndCreateError(\"reward time error\", \"rewardInfo\", rewardInfo);\r\n\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardInfo.mint.address === WSOLMint.toString();\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          notUseTokenAccount: rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          createInfo: rewardMintUseSOLBalance\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: new BN(\r\n                  new Decimal(rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)).gte(\r\n                    rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime),\r\n                  )\r\n                    ? rewardInfo.perSecond.sub(rewardInfo.endTime - rewardInfo.openTime).toFixed(0)\r\n                    : rewardInfo.perSecond\r\n                        .sub(rewardInfo.endTime - rewardInfo.openTime)\r\n                        .add(1)\r\n                        .toFixed(0),\r\n                ),\r\n              }\r\n            : undefined,\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n      const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n      const insInfo = ClmmInstrument.setRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n        rewardInfo: {\r\n          mint: new PublicKey(rewardInfo.mint.address),\r\n          openTime: rewardInfo.openTime,\r\n          endTime: rewardInfo.endTime,\r\n          emissionsPerSecondX64: MathUtil.decimalToX64(rewardInfo.perSecond),\r\n        },\r\n      });\r\n      txBuilder.addInstruction(insInfo);\r\n      address = {\r\n        ...address,\r\n        ...insInfo.address,\r\n      };\r\n    }\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    return txBuilder.versionBuild<{ address: Record<string, PublicKey> }>({\r\n      txVersion,\r\n      extInfo: { address },\r\n    }) as Promise<MakeTxData<T, { address: Record<string, PublicKey> }>>;\r\n  }\r\n\r\n  public async collectReward({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardMint,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n  }: CollectRewardParams): Promise<MakeTransaction> {\r\n    const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\r\n    if (!rewardInfo) this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\r\n\r\n    const txBuilder = this.createTxBuilder();\r\n    const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\r\n    const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: new PublicKey(rewardInfo!.mint.programId),\r\n        mint: rewardMint,\r\n        notUseTokenAccount: rewardMintUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !rewardMintUseSOLBalance,\r\n        createInfo: {\r\n          payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n\r\n    if (!ownerRewardAccount)\r\n      this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n    const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n    const insInfo = ClmmInstrument.collectRewardInstructions({\r\n      poolInfo,\r\n      poolKeys,\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        tokenAccount: ownerRewardAccount!,\r\n      },\r\n      rewardMint,\r\n    });\r\n    txBuilder.addInstruction(insInfo);\r\n\r\n    return txBuilder.build<{ address: Record<string, PublicKey> }>({ address: insInfo.address });\r\n  }\r\n\r\n  public async collectRewards({\r\n    poolInfo,\r\n    ownerInfo,\r\n    rewardMints,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n  }: CollectRewardsParams): Promise<MakeTransaction> {\r\n    const txBuilder = this.createTxBuilder();\r\n    let address: Record<string, PublicKey> = {};\r\n\r\n    for (const rewardMint of rewardMints) {\r\n      const rewardInfo = poolInfo!.rewardDefaultInfos.find((i) => i.mint.address === rewardMint.toString());\r\n      if (!rewardInfo) {\r\n        this.logAndCreateError(\"reward mint error\", \"not found reward mint\", rewardMint);\r\n        continue;\r\n      }\r\n\r\n      const rewardMintUseSOLBalance = ownerInfo.useSOLBalance && rewardMint.equals(WSOLMint);\r\n      const { account: ownerRewardAccount, instructionParams: ownerRewardIns } =\r\n        await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: new PublicKey(rewardInfo.mint.programId),\r\n          mint: rewardMint,\r\n          notUseTokenAccount: rewardMintUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !rewardMintUseSOLBalance,\r\n          createInfo: {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: rewardMintUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n      if (!ownerRewardAccount)\r\n        this.logAndCreateError(\"no money\", \"ownerRewardAccount\", this.scope.account.tokenAccountRawInfos);\r\n      ownerRewardIns && txBuilder.addInstruction(ownerRewardIns);\r\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n      const insInfo = ClmmInstrument.collectRewardInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccount: ownerRewardAccount!,\r\n        },\r\n\r\n        rewardMint,\r\n      });\r\n      txBuilder.addInstruction(insInfo);\r\n      address = { ...address, ...insInfo.address };\r\n    }\r\n\r\n    return txBuilder.build<{ address: Record<string, PublicKey> }>({ address });\r\n  }\r\n\r\n  // currently only support\r\n  public async swap<T extends TxVersion>({\r\n    poolInfo,\r\n    poolKeys: propPoolKeys,\r\n    inputMint,\r\n    amountIn,\r\n    amountOutMin,\r\n    priceLimit,\r\n    observationId,\r\n    ownerInfo,\r\n    remainingAccounts,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n  }: {\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys?: ClmmKeys;\r\n    inputMint: string | PublicKey;\r\n    amountIn: BN;\r\n    amountOutMin: BN;\r\n    priceLimit?: Decimal;\r\n    observationId: PublicKey;\r\n    ownerInfo: {\r\n      useSOLBalance?: boolean;\r\n      feePayer?: PublicKey;\r\n    };\r\n    remainingAccounts: PublicKey[];\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n  }): Promise<MakeTxData<T>> {\r\n    const txBuilder = this.createTxBuilder();\r\n    const baseIn = inputMint.toString() === poolInfo.mintA.address;\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toBase58();\r\n\r\n    let sqrtPriceLimitX64: BN;\r\n    if (!priceLimit || priceLimit.equals(new Decimal(0))) {\r\n      sqrtPriceLimitX64 = baseIn ? MIN_SQRT_PRICE_X64.add(new BN(1)) : MAX_SQRT_PRICE_X64.sub(new BN(1));\r\n    } else {\r\n      sqrtPriceLimitX64 = SqrtPriceMath.priceToSqrtPriceX64(\r\n        priceLimit,\r\n        poolInfo.mintA.decimals,\r\n        poolInfo.mintB.decimals,\r\n      );\r\n    }\r\n\r\n    let ownerTokenAccountA: PublicKey | undefined;\r\n    if (!ownerTokenAccountA) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        createInfo:\r\n          mintAUseSOLBalance || !baseIn\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: baseIn ? amountIn : 0,\r\n              }\r\n            : undefined,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountA = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    let ownerTokenAccountB: PublicKey | undefined;\r\n    if (!ownerTokenAccountB) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        createInfo:\r\n          mintBUseSOLBalance || baseIn\r\n            ? {\r\n                payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n                amount: baseIn ? 0 : amountIn,\r\n              }\r\n            : undefined,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n      ownerTokenAccountB = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    if (!ownerTokenAccountA || !ownerTokenAccountB)\r\n      this.logAndCreateError(\"user do not have token account\", {\r\n        tokenA: poolInfo.mintA.symbol || poolInfo.mintA.address,\r\n        tokenB: poolInfo.mintB.symbol || poolInfo.mintB.address,\r\n        ownerTokenAccountA,\r\n        ownerTokenAccountB,\r\n        mintAUseSOLBalance,\r\n        mintBUseSOLBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getClmmPoolKeys(poolInfo.id));\r\n    txBuilder.addInstruction(\r\n      ClmmInstrument.makeSwapBaseInInstructions({\r\n        poolInfo,\r\n        poolKeys,\r\n        observationId,\r\n        ownerInfo: {\r\n          wallet: this.scope.ownerPubKey,\r\n          tokenAccountA: ownerTokenAccountA!,\r\n          tokenAccountB: ownerTokenAccountB!,\r\n        },\r\n        inputMint: new PublicKey(inputMint),\r\n        amountIn,\r\n        amountOutMin,\r\n        sqrtPriceLimitX64,\r\n        remainingAccounts,\r\n      }),\r\n    );\r\n\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async harvestAllRewards<T extends TxVersion = TxVersion.LEGACY>({\r\n    allPoolInfo,\r\n    allPositions,\r\n    ownerInfo,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    programId,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n  }: HarvestAllRewardsParams<T>): Promise<MakeMultiTxData<T>> {\r\n    const ownerMintToAccount: { [mint: string]: PublicKey } = {};\r\n    for (const item of this.scope.account.tokenAccountRawInfos) {\r\n      if (associatedOnly) {\r\n        const ata = getATAAddress(this.scope.ownerPubKey, item.accountInfo.mint, programId).publicKey;\r\n        if (ata.equals(item.pubkey)) ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\r\n      } else {\r\n        ownerMintToAccount[item.accountInfo.mint.toString()] = item.pubkey;\r\n      }\r\n    }\r\n    const txBuilder = this.createTxBuilder();\r\n    for (const itemInfo of Object.values(allPoolInfo)) {\r\n      if (allPositions[itemInfo.id] === undefined) continue;\r\n      if (\r\n        !allPositions[itemInfo.id].find(\r\n          (i) => !i.liquidity.isZero() || i.rewardInfos.find((ii) => !ii.rewardAmountOwed.isZero()),\r\n        )\r\n      )\r\n        continue;\r\n\r\n      const poolInfo = itemInfo;\r\n      const mintAUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintA.address === WSOLMint.toString();\r\n      const mintBUseSOLBalance = ownerInfo.useSOLBalance && poolInfo.mintB.address === WSOLMint.toString();\r\n\r\n      let ownerTokenAccountA = ownerMintToAccount[poolInfo.mintA.address];\r\n      if (!ownerTokenAccountA) {\r\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: poolInfo.mintA.programId,\r\n          mint: new PublicKey(poolInfo.mintA.address),\r\n          notUseTokenAccount: mintAUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !mintAUseSOLBalance,\r\n          createInfo: {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerTokenAccountA = account!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      let ownerTokenAccountB = ownerMintToAccount[poolInfo.mintB.address];\r\n      if (!ownerTokenAccountB) {\r\n        const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          tokenProgram: poolInfo.mintB.programId,\r\n          mint: new PublicKey(poolInfo.mintB.address),\r\n          notUseTokenAccount: mintBUseSOLBalance,\r\n          owner: this.scope.ownerPubKey,\r\n          skipCloseAccount: !mintBUseSOLBalance,\r\n          createInfo: {\r\n            payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n            amount: 0,\r\n          },\r\n          associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n          checkCreateATAOwner,\r\n        });\r\n        ownerTokenAccountB = account!;\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n      }\r\n\r\n      ownerMintToAccount[poolInfo.mintA.address] = ownerTokenAccountA;\r\n      ownerMintToAccount[poolInfo.mintB.address] = ownerTokenAccountB;\r\n\r\n      const rewardAccounts: PublicKey[] = [];\r\n      for (const itemReward of poolInfo.rewardDefaultInfos) {\r\n        const rewardUseSOLBalance = ownerInfo.useSOLBalance && itemReward.mint.address === WSOLMint.toString();\r\n        let ownerRewardAccount = ownerMintToAccount[itemReward.mint.address];\r\n        if (!ownerRewardAccount) {\r\n          const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n            tokenProgram: new PublicKey(itemReward.mint.programId),\r\n            mint: new PublicKey(itemReward.mint.address),\r\n            notUseTokenAccount: rewardUseSOLBalance,\r\n            owner: this.scope.ownerPubKey,\r\n            skipCloseAccount: !rewardUseSOLBalance,\r\n            createInfo: {\r\n              payer: ownerInfo.feePayer || this.scope.ownerPubKey,\r\n              amount: 0,\r\n            },\r\n            associatedOnly: rewardUseSOLBalance ? false : associatedOnly,\r\n          });\r\n          ownerRewardAccount = account!;\r\n          instructionParams && txBuilder.addInstruction(instructionParams);\r\n        }\r\n\r\n        ownerMintToAccount[itemReward.mint.address] = ownerRewardAccount;\r\n        rewardAccounts.push(ownerRewardAccount!);\r\n      }\r\n\r\n      const poolKeys = await this.getClmmPoolKeys(poolInfo.id);\r\n\r\n      for (const itemPosition of allPositions[itemInfo.id]) {\r\n        const insData = ClmmInstrument.decreaseLiquidityInstructions({\r\n          poolInfo,\r\n          poolKeys,\r\n          ownerPosition: itemPosition,\r\n          ownerInfo: {\r\n            wallet: this.scope.ownerPubKey,\r\n            tokenAccountA: ownerTokenAccountA,\r\n            tokenAccountB: ownerTokenAccountB,\r\n            rewardAccounts,\r\n          },\r\n          liquidity: new BN(0),\r\n          amountMinA: new BN(0),\r\n          amountMinB: new BN(0),\r\n        });\r\n        txBuilder.addInstruction(insData);\r\n      }\r\n    }\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  public async getWhiteListMint({ programId }: { programId: PublicKey }): Promise<PublicKey[]> {\r\n    const accountInfo = await this.scope.connection.getAccountInfo(getPdaOperationAccount(programId).publicKey);\r\n    if (!accountInfo) return [];\r\n    const whitelistMintsInfo = OperationLayout.decode(accountInfo.data);\r\n    return whitelistMintsInfo.whitelistMints.filter((i) => !i.equals(PublicKey.default));\r\n  }\r\n\r\n  public async getOwnerPositionInfo({\r\n    programId,\r\n  }: {\r\n    programId: string | PublicKey;\r\n  }): Promise<ReturnType<typeof PositionInfoLayout.decode>[]> {\r\n    await this.scope.account.fetchWalletTokenAccounts();\r\n    const balanceMints = this.scope.account.tokenAccountRawInfos.filter((acc) => acc.accountInfo.amount.eq(new BN(1)));\r\n    const allPositionKey = balanceMints.map(\r\n      (acc) => getPdaPersonalPositionAddress(new PublicKey(programId), acc.accountInfo.mint).publicKey,\r\n    );\r\n\r\n    const accountInfo = await this.scope.connection.getMultipleAccountsInfo(allPositionKey);\r\n    const allPosition: ReturnType<typeof PositionInfoLayout.decode>[] = [];\r\n    accountInfo.forEach((positionRes) => {\r\n      if (!positionRes) return;\r\n      const position = PositionInfoLayout.decode(positionRes.data);\r\n      allPosition.push(position);\r\n    });\r\n\r\n    return allPosition;\r\n  }\r\n\r\n  public async getRpcClmmPoolInfo({ poolId }: { poolId: string | PublicKey }): Promise<ClmmRpcData> {\r\n    return (await this.getRpcClmmPoolInfos({ poolIds: [poolId] }))[String(poolId)];\r\n  }\r\n\r\n  public async getRpcClmmPoolInfos({\r\n    poolIds,\r\n    config,\r\n  }: {\r\n    poolIds: (string | PublicKey)[];\r\n    config?: { batchRequest?: boolean; chunkCount?: number };\r\n  }): Promise<{\r\n    [poolId: string]: ClmmRpcData;\r\n  }> {\r\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      poolIds.map((i) => ({ pubkey: new PublicKey(i) })),\r\n      config,\r\n    );\r\n    const returnData: {\r\n      [poolId: string]: ClmmRpcData;\r\n    } = {};\r\n    for (let i = 0; i < poolIds.length; i++) {\r\n      const item = accounts[i];\r\n      if (item === null || !item.accountInfo) throw Error(\"fetch pool info error: \" + String(poolIds[i]));\r\n      const rpc = PoolInfoLayout.decode(item.accountInfo.data);\r\n      const currentPrice = SqrtPriceMath.sqrtPriceX64ToPrice(\r\n        rpc.sqrtPriceX64,\r\n        rpc.mintDecimalsA,\r\n        rpc.mintDecimalsB,\r\n      ).toNumber();\r\n\r\n      returnData[String(poolIds[i])] = {\r\n        ...rpc,\r\n        currentPrice,\r\n        programId: item.accountInfo.owner,\r\n      };\r\n    }\r\n    return returnData;\r\n  }\r\n\r\n  public async getComputeClmmPoolInfos({\r\n    clmmPoolsRpcInfo,\r\n    mintInfos,\r\n  }: {\r\n    clmmPoolsRpcInfo: Record<\r\n      string,\r\n      ReturnType<typeof PoolInfoLayout.decode> & { currentPrice: number; programId: PublicKey }\r\n    >;\r\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\r\n  }): Promise<{\r\n    computeClmmPoolInfo: Record<string, ComputeClmmPoolInfo>;\r\n    computePoolTickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n  }> {\r\n    const configSet = new Set(Object.keys(clmmPoolsRpcInfo).map((p) => clmmPoolsRpcInfo[p].ammConfig.toBase58()));\r\n    const res = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      Array.from(configSet).map((s) => ({ pubkey: new PublicKey(s) })),\r\n    );\r\n    const clmmConfigs: Record<string, ReturnType<typeof ClmmConfigLayout.decode>> = {};\r\n    res.forEach((acc) => {\r\n      if (!acc.accountInfo) return;\r\n      clmmConfigs[acc.pubkey.toBase58()] = ClmmConfigLayout.decode(acc.accountInfo.data);\r\n    });\r\n    const computeClmmPoolInfo = await PoolUtils.fetchComputeMultipleClmmInfo({\r\n      connection: this.scope.connection,\r\n      rpcDataMap: clmmPoolsRpcInfo,\r\n      poolList: Object.keys(clmmPoolsRpcInfo).map((poolId) => {\r\n        const [mintA, mintB] = [clmmPoolsRpcInfo[poolId].mintA.toBase58(), clmmPoolsRpcInfo[poolId].mintB.toBase58()];\r\n        return {\r\n          id: poolId,\r\n          programId: clmmPoolsRpcInfo[poolId].programId.toBase58(),\r\n          mintA: toApiV3Token({\r\n            address: mintA,\r\n            decimals: clmmPoolsRpcInfo[poolId].mintDecimalsA,\r\n            programId: mintInfos[mintA].programId.toBase58() || TOKEN_PROGRAM_ID.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintA]?.feeConfig ? toFeeConfig(mintInfos[mintA]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n          mintB: toApiV3Token({\r\n            address: mintB,\r\n            decimals: clmmPoolsRpcInfo[poolId].mintDecimalsB,\r\n            programId: mintInfos[mintB].programId.toBase58() || TOKEN_PROGRAM_ID.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintB]?.feeConfig ? toFeeConfig(mintInfos[mintB]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n          price: clmmPoolsRpcInfo[poolId].currentPrice,\r\n          config: {\r\n            ...clmmConfigs[clmmPoolsRpcInfo[poolId].ammConfig.toBase58()],\r\n            id: clmmPoolsRpcInfo[poolId].ammConfig.toBase58(),\r\n\r\n            fundFeeRate: 0,\r\n            description: \"\",\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n        };\r\n      }),\r\n    });\r\n\r\n    const computePoolTickData = await PoolUtils.fetchMultiplePoolTickArrays({\r\n      connection: this.scope.connection,\r\n      poolKeys: Object.values(computeClmmPoolInfo),\r\n    });\r\n\r\n    return {\r\n      computeClmmPoolInfo,\r\n      computePoolTickData,\r\n    };\r\n  }\r\n\r\n  public async getPoolInfoFromRpc(poolId: string): Promise<{\r\n    poolInfo: ApiV3PoolInfoConcentratedItem;\r\n    poolKeys: ClmmKeys;\r\n    computePoolInfo: ComputeClmmPoolInfo;\r\n    tickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n  }> {\r\n    const rpcData = await this.getRpcClmmPoolInfo({ poolId });\r\n\r\n    const mintSet = new Set([rpcData.mintA.toBase58(), rpcData.mintB.toBase58()]);\r\n\r\n    const mintInfos = await fetchMultipleMintInfos({\r\n      connection: this.scope.connection,\r\n      mints: Array.from(mintSet).map((m) => new PublicKey(m)),\r\n    });\r\n\r\n    const { computeClmmPoolInfo, computePoolTickData } = await this.scope.clmm.getComputeClmmPoolInfos({\r\n      clmmPoolsRpcInfo: { [poolId]: rpcData },\r\n      mintInfos,\r\n    });\r\n    const vaultData = await getMultipleAccountsInfoWithCustomFlags(this.scope.connection, [\r\n      { pubkey: rpcData.vaultA },\r\n      { pubkey: rpcData.vaultB },\r\n    ]);\r\n\r\n    const poolInfo = clmmComputeInfoToApiInfo(computeClmmPoolInfo[poolId]);\r\n\r\n    if (!vaultData[0].accountInfo || !vaultData[1].accountInfo) throw new Error(\"pool vault data not found\");\r\n    poolInfo.mintAmountA = Number(AccountLayout.decode(vaultData[0].accountInfo.data).amount.toString());\r\n    poolInfo.mintAmountB = Number(AccountLayout.decode(vaultData[1].accountInfo?.data).amount.toString());\r\n\r\n    const poolKeys: ClmmKeys = {\r\n      ...computeClmmPoolInfo[poolId],\r\n      id: poolId,\r\n      programId: \"8yQvrjQuritLntxz6pAaWcEX6CsRMeDmr7baCLnNwEuw\",\r\n      vault: {\r\n        A: rpcData.vaultA.toBase58(),\r\n        B: rpcData.vaultB.toBase58(),\r\n      },\r\n      rewardInfos: [],\r\n      config: poolInfo.config,\r\n    };\r\n    return { poolInfo, poolKeys, computePoolInfo: computeClmmPoolInfo[poolId], tickData: computePoolTickData };\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { NATIVE_MINT, TOKEN_PROGRAM_ID, AccountLayout } from \"@solana/spl-token\";\r\nimport { ApiV3PoolInfoConcentratedItem, ApiV3PoolInfoStandardItemCpmm, CpmmKeys } from \"@/api/type\";\r\nimport { Percent } from \"@/module\";\r\nimport { BN_ZERO } from \"@/common/bignumber\";\r\nimport { getATAAddress } from \"@/common/pda\";\r\nimport { WSOLMint } from \"@/common/pubKey\";\r\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\r\nimport { MakeTxData } from \"@/common/txTool/txTool\";\r\nimport { CurveCalculator } from \"./curve/calculator\";\r\n\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport {\r\n  CreateCpmmPoolParam,\r\n  CreateCpmmPoolAddress,\r\n  AddCpmmLiquidityParams,\r\n  WithdrawCpmmLiquidityParams,\r\n  CpmmSwapParams,\r\n  ComputePairAmountParams,\r\n  CpmmRpcData,\r\n  CpmmComputeData,\r\n} from \"./type\";\r\nimport { getCreatePoolKeys, getPdaObservationId } from \"./pda\";\r\nimport {\r\n  makeCreateCpmmPoolInInstruction,\r\n  makeDepositCpmmInInstruction,\r\n  makeWithdrawCpmmInInstruction,\r\n  makeSwapCpmmBaseInInInstruction,\r\n  makeSwapCpmmBaseOutInInstruction,\r\n} from \"./instruction\";\r\nimport BN from \"bn.js\";\r\nimport { CpmmPoolInfoLayout, CpmmConfigInfoLayout } from \"./layout\";\r\nimport Decimal from \"decimal.js\";\r\nimport { fetchMultipleMintInfos, getMultipleAccountsInfoWithCustomFlags, getTransferAmountFeeV2 } from \"@/common\";\r\nimport { GetTransferAmountFee, ReturnTypeFetchMultipleMintInfos } from \"@/raydium/type\";\r\nimport { toApiV3Token, toFeeConfig } from \"../token\";\r\nimport { getPdaPoolAuthority } from \"./pda\";\r\n\r\nexport default class CpmmModule extends ModuleBase {\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  public async load(): Promise<void> {\r\n    this.checkDisabled();\r\n  }\r\n\r\n  public async getCpmmPoolKeys(poolId: string): Promise<CpmmKeys> {\r\n    return ((await this.scope.api.fetchPoolKeysById({ idList: [poolId] })) as CpmmKeys[])[0];\r\n  }\r\n\r\n  public async getRpcPoolInfo(poolId: string, fetchConfigInfo?: boolean): Promise<CpmmRpcData> {\r\n    return (await this.getRpcPoolInfos([poolId], fetchConfigInfo))[poolId];\r\n  }\r\n\r\n  public async getRpcPoolInfos(\r\n    poolIds: string[],\r\n    fetchConfigInfo?: boolean,\r\n  ): Promise<{\r\n    [poolId: string]: CpmmRpcData;\r\n  }> {\r\n    const accounts = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      poolIds.map((i) => ({ pubkey: new PublicKey(i) })),\r\n    );\r\n    const poolInfos: { [poolId: string]: ReturnType<typeof CpmmPoolInfoLayout.decode> & { programId: PublicKey } } = {};\r\n\r\n    const needFetchConfigId = new Set<string>();\r\n    const needFetchVaults: PublicKey[] = [];\r\n\r\n    for (let i = 0; i < poolIds.length; i++) {\r\n      const item = accounts[i];\r\n      if (item.accountInfo === null) throw Error(\"fetch pool info error: \" + String(poolIds[i]));\r\n      const rpc = CpmmPoolInfoLayout.decode(item.accountInfo.data);\r\n      poolInfos[String(poolIds[i])] = {\r\n        ...rpc,\r\n        programId: item.accountInfo.owner,\r\n      };\r\n      needFetchConfigId.add(String(rpc.configId));\r\n\r\n      needFetchVaults.push(rpc.vaultA, rpc.vaultB);\r\n    }\r\n\r\n    const configInfo: { [configId: string]: ReturnType<typeof CpmmConfigInfoLayout.decode> } = {};\r\n\r\n    if (fetchConfigInfo) {\r\n      const configIds = [...needFetchConfigId];\r\n      const configState = await getMultipleAccountsInfoWithCustomFlags(\r\n        this.scope.connection,\r\n        configIds.map((i) => ({ pubkey: new PublicKey(i) })),\r\n      );\r\n\r\n      for (let i = 0; i < configIds.length; i++) {\r\n        const configItemInfo = configState[i].accountInfo;\r\n        if (configItemInfo === null) throw Error(\"fetch pool config error: \" + configIds[i]);\r\n        configInfo[configIds[i]] = CpmmConfigInfoLayout.decode(configItemInfo.data);\r\n      }\r\n    }\r\n\r\n    const vaultInfo: { [vaultId: string]: BN } = {};\r\n\r\n    const vaultAccountInfo = await getMultipleAccountsInfoWithCustomFlags(\r\n      this.scope.connection,\r\n      needFetchVaults.map((i) => ({ pubkey: new PublicKey(i) })),\r\n    );\r\n\r\n    for (let i = 0; i < needFetchVaults.length; i++) {\r\n      const vaultItemInfo = vaultAccountInfo[i].accountInfo;\r\n      if (vaultItemInfo === null) throw Error(\"fetch vault info error: \" + needFetchVaults[i]);\r\n\r\n      vaultInfo[String(needFetchVaults[i])] = new BN(AccountLayout.decode(vaultItemInfo.data).amount.toString());\r\n    }\r\n\r\n    const returnData: { [poolId: string]: CpmmRpcData } = {};\r\n\r\n    for (const [id, info] of Object.entries(poolInfos)) {\r\n      const baseReserve = vaultInfo[info.vaultA.toString()].sub(info.protocolFeesMintA).sub(info.fundFeesMintA);\r\n      const quoteReserve = vaultInfo[info.vaultB.toString()].sub(info.protocolFeesMintB).sub(info.fundFeesMintB);\r\n      returnData[id] = {\r\n        ...info,\r\n        baseReserve,\r\n        quoteReserve,\r\n        vaultAAmount: vaultInfo[info.vaultA.toString()],\r\n        vaultBAmount: vaultInfo[info.vaultB.toString()],\r\n        configInfo: configInfo[info.configId.toString()],\r\n        poolPrice: new Decimal(quoteReserve.toString())\r\n          .div(new Decimal(10).pow(info.mintDecimalB))\r\n          .div(new Decimal(baseReserve.toString()).div(new Decimal(10).pow(info.mintDecimalA))),\r\n      };\r\n    }\r\n\r\n    return returnData;\r\n  }\r\n\r\n  public toComputePoolInfos({\r\n    pools,\r\n    mintInfos,\r\n  }: {\r\n    pools: Record<string, CpmmRpcData>;\r\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\r\n  }): Record<string, CpmmComputeData> {\r\n    return Object.keys(pools).reduce((acc, cur) => {\r\n      const pool = pools[cur];\r\n      const [mintA, mintB] = [pool.mintA.toBase58(), pool.mintB.toBase58()];\r\n\r\n      return {\r\n        ...acc,\r\n        [cur]: {\r\n          ...pool,\r\n          id: new PublicKey(cur),\r\n          configInfo: pool.configInfo!,\r\n          version: 7 as const,\r\n          authority: getPdaPoolAuthority(pool.programId).publicKey,\r\n          mintA: toApiV3Token({\r\n            address: mintA,\r\n            decimals: pool.mintDecimalA,\r\n            programId: pool.mintProgramA.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintA]?.feeConfig ? toFeeConfig(mintInfos[mintA]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n          mintB: toApiV3Token({\r\n            address: mintB,\r\n            decimals: pool.mintDecimalB,\r\n            programId: pool.mintProgramB.toBase58(),\r\n            extensions: {\r\n              feeConfig: mintInfos[mintB]?.feeConfig ? toFeeConfig(mintInfos[mintB]?.feeConfig) : undefined,\r\n            },\r\n          }),\r\n        },\r\n      };\r\n    }, {} as Record<string, CpmmComputeData>);\r\n  }\r\n\r\n  public async getPoolInfoFromRpc(poolId: string): Promise<{\r\n    poolInfo: ApiV3PoolInfoStandardItemCpmm;\r\n    poolKeys: CpmmKeys;\r\n    rpcData: CpmmRpcData;\r\n  }> {\r\n    const rpcData = await this.getRpcPoolInfo(poolId, true);\r\n    const mintInfos = await fetchMultipleMintInfos({\r\n      connection: this.scope.connection,\r\n      mints: [rpcData.mintA, rpcData.mintB],\r\n    });\r\n\r\n    const mintA = toApiV3Token({\r\n      address: rpcData.mintA.toBase58(),\r\n      decimals: rpcData.mintDecimalA,\r\n      programId: rpcData.mintProgramA.toBase58(),\r\n      extensions: {\r\n        feeConfig: mintInfos[rpcData.mintA.toBase58()].feeConfig\r\n          ? toFeeConfig(mintInfos[rpcData.mintA.toBase58()].feeConfig)\r\n          : undefined,\r\n      },\r\n    });\r\n    const mintB = toApiV3Token({\r\n      address: rpcData.mintB.toBase58(),\r\n      decimals: rpcData.mintDecimalB,\r\n      programId: rpcData.mintProgramB.toBase58(),\r\n      extensions: {\r\n        feeConfig: mintInfos[rpcData.mintB.toBase58()].feeConfig\r\n          ? toFeeConfig(mintInfos[rpcData.mintB.toBase58()].feeConfig)\r\n          : undefined,\r\n      },\r\n    });\r\n\r\n    const lpMint = toApiV3Token({\r\n      address: rpcData.mintLp.toBase58(),\r\n      decimals: rpcData.lpDecimals,\r\n      programId: TOKEN_PROGRAM_ID.toBase58(),\r\n    });\r\n\r\n    const configInfo = {\r\n      id: rpcData.configId.toBase58(),\r\n      index: rpcData.configInfo!.index,\r\n      protocolFeeRate: rpcData.configInfo!.protocolFeeRate.toNumber(),\r\n      tradeFeeRate: rpcData.configInfo!.tradeFeeRate.toNumber(),\r\n      fundFeeRate: rpcData.configInfo!.fundFeeRate.toNumber(),\r\n      createPoolFee: rpcData.configInfo!.createPoolFee.toString(),\r\n    };\r\n\r\n    const mockRewardData = {\r\n      volume: 0,\r\n      volumeQuote: 0,\r\n      volumeFee: 0,\r\n      apr: 0,\r\n      feeApr: 0,\r\n      priceMin: 0,\r\n      priceMax: 0,\r\n      rewardApr: [],\r\n    };\r\n\r\n    return {\r\n      poolInfo: {\r\n        programId: \"8yQvrjQuritLntxz6pAaWcEX6CsRMeDmr7baCLnNwEuw\",\r\n        id: poolId,\r\n        type: \"Standard\",\r\n        lpMint,\r\n        lpPrice: 0,\r\n        lpAmount: rpcData.lpAmount.toNumber(),\r\n        config: configInfo,\r\n        mintA,\r\n        mintB,\r\n        rewardDefaultInfos: [],\r\n        rewardDefaultPoolInfos: \"Ecosystem\",\r\n        price: rpcData.poolPrice.toNumber(),\r\n        mintAmountA: new Decimal(rpcData.vaultAAmount.toString()).div(10 ** mintA.decimals).toNumber(),\r\n        mintAmountB: new Decimal(rpcData.vaultBAmount.toString()).div(10 ** mintB.decimals).toNumber(),\r\n        feeRate: rpcData.configInfo!.tradeFeeRate.toNumber(),\r\n        tvl: 0,\r\n\r\n        day: mockRewardData,\r\n        week: mockRewardData,\r\n        month: mockRewardData,\r\n        pooltype: [],\r\n\r\n        farmUpcomingCount: 0,\r\n        farmOngoingCount: 0,\r\n        farmFinishedCount: 0,\r\n      },\r\n      poolKeys: {\r\n        programId: \"8yQvrjQuritLntxz6pAaWcEX6CsRMeDmr7baCLnNwEuw\",\r\n        id: poolId,\r\n        mintA,\r\n        mintB,\r\n        vault: { A: rpcData.vaultA.toBase58(), B: rpcData.vaultB.toBase58() },\r\n        authority: getPdaPoolAuthority(rpcData.programId).publicKey.toBase58(),\r\n        mintLp: lpMint,\r\n        config: configInfo,\r\n      },\r\n      rpcData,\r\n    };\r\n  }\r\n\r\n  public async createPool<T extends TxVersion>({\r\n    programId,\r\n    poolFeeAccount,\r\n    startTime,\r\n    ownerInfo,\r\n    associatedOnly = false,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n    ...params\r\n  }: CreateCpmmPoolParam<T>): Promise<MakeTxData<T, { address: CreateCpmmPoolAddress }>> {\r\n    const payer = ownerInfo.feePayer || this.scope.owner?.publicKey;\r\n    const isFront = new BN(new PublicKey(params.mintA.address).toBuffer()).lte(\r\n      new BN(new PublicKey(params.mintB.address).toBuffer()),\r\n    );\r\n\r\n    const [mintA, mintB] = isFront ? [params.mintA, params.mintB] : [params.mintB, params.mintA];\r\n    const [mintAAmount, mintBAmount] = isFront\r\n      ? [params.mintAAmount, params.mintBAmount]\r\n      : [params.mintBAmount, params.mintAAmount];\r\n\r\n    const mintAUseSOLBalance = ownerInfo.useSOLBalance && mintA.address === NATIVE_MINT.toBase58();\r\n    const mintBUseSOLBalance = ownerInfo.useSOLBalance && mintB.address === NATIVE_MINT.toBase58();\r\n    const [mintAPubkey, mintBPubkey] = [new PublicKey(mintA.address), new PublicKey(mintB.address)];\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    const { account: userVaultA, instructionParams: userVaultAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: mintAPubkey,\r\n        tokenProgram: mintA.programId,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: mintAUseSOLBalance\r\n          ? {\r\n              payer: payer!,\r\n              amount: mintAAmount,\r\n            }\r\n          : undefined,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    txBuilder.addInstruction(userVaultAInstruction || {});\r\n    const { account: userVaultB, instructionParams: userVaultBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: new PublicKey(mintB.address),\r\n        tokenProgram: mintB.programId,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: mintBUseSOLBalance\r\n          ? {\r\n              payer: payer!,\r\n              amount: mintBAmount,\r\n            }\r\n          : undefined,\r\n\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    txBuilder.addInstruction(userVaultBInstruction || {});\r\n\r\n    if (userVaultA === undefined || userVaultB === undefined) throw Error(\"you don't has some token account\");\r\n\r\n    const poolKeys = getCreatePoolKeys({\r\n      creator: this.scope.ownerPubKey,\r\n      programId,\r\n      mintA: mintAPubkey,\r\n      mintB: mintBPubkey,\r\n    });\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        makeCreateCpmmPoolInInstruction(\r\n          programId,\r\n          this.scope.ownerPubKey,\r\n          poolKeys.configId,\r\n          poolKeys.authority,\r\n          poolKeys.poolId,\r\n          mintAPubkey,\r\n          mintBPubkey,\r\n          poolKeys.lpMint,\r\n          userVaultA,\r\n          userVaultB,\r\n          getATAAddress(this.scope.ownerPubKey, poolKeys.lpMint).publicKey,\r\n          poolKeys.vaultA,\r\n          poolKeys.vaultB,\r\n          new PublicKey(mintA.programId ?? TOKEN_PROGRAM_ID),\r\n          new PublicKey(mintB.programId ?? TOKEN_PROGRAM_ID),\r\n          poolKeys.observationId,\r\n          mintAAmount,\r\n          mintBAmount,\r\n          startTime,\r\n        ),\r\n      ],\r\n      instructionTypes: [InstructionType.CpmmCreatePool],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n\r\n    return txBuilder.versionBuild({\r\n      txVersion,\r\n      extInfo: {\r\n        address: { ...poolKeys, mintA, mintB, programId, poolFeeAccount },\r\n      },\r\n    }) as Promise<MakeTxData<T, { address: CreateCpmmPoolAddress }>>;\r\n  }\r\n\r\n  public async addLiquidity<T extends TxVersion>(params: AddCpmmLiquidityParams<T>): Promise<MakeTxData<T>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      inputAmount,\r\n      baseIn,\r\n      slippage,\r\n      computeResult,\r\n      computeBudgetConfig,\r\n      config,\r\n      txVersion,\r\n    } = params;\r\n\r\n    if (this.scope.availability.addStandardPosition === false)\r\n      this.logAndCreateError(\"add liquidity feature disabled in your region\");\r\n\r\n    if (inputAmount.isZero())\r\n      this.logAndCreateError(\"amounts must greater than zero\", \"amountInA\", {\r\n        amountInA: inputAmount.toString(),\r\n      });\r\n    const { account } = this.scope;\r\n    const { bypassAssociatedCheck, checkCreateATAOwner } = {\r\n      // default\r\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false },\r\n      // custom\r\n      ...config,\r\n    };\r\n    const rpcPoolData = computeResult ? undefined : await this.getRpcPoolInfo(poolInfo.id);\r\n\r\n    const {\r\n      liquidity,\r\n      inputAmountFee,\r\n      anotherAmount: _anotherAmount,\r\n    } = computeResult ||\r\n    this.computePairAmount({\r\n      poolInfo: {\r\n        ...poolInfo,\r\n        lpAmount: new Decimal(rpcPoolData!.lpAmount.toString()).div(10 ** poolInfo.lpMint.decimals).toNumber(),\r\n      },\r\n      baseReserve: rpcPoolData!.baseReserve,\r\n      quoteReserve: rpcPoolData!.quoteReserve,\r\n      slippage: new Percent(0),\r\n      baseIn,\r\n      epochInfo: await this.scope.fetchEpochInfo(),\r\n      amount: new Decimal(inputAmount.toString()).div(\r\n        10 ** (baseIn ? poolInfo.mintA.decimals : poolInfo.mintB.decimals),\r\n      ),\r\n    });\r\n\r\n    const anotherAmount = _anotherAmount.amount;\r\n    const mintAUseSOLBalance = poolInfo.mintA.address === NATIVE_MINT.toString();\r\n    const mintBUseSOLBalance = poolInfo.mintB.address === NATIVE_MINT.toString();\r\n\r\n    const txBuilder = this.createTxBuilder();\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n\r\n    const { account: tokenAccountA, instructionParams: _tokenAccountAInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintAUseSOLBalance || (baseIn ? inputAmount : anotherAmount).isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: baseIn ? inputAmount : anotherAmount,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        associatedOnly: false,\r\n        checkCreateATAOwner,\r\n      });\r\n\r\n    txBuilder.addInstruction(_tokenAccountAInstruction || {});\r\n\r\n    const { account: tokenAccountB, instructionParams: _tokenAccountBInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        owner: this.scope.ownerPubKey,\r\n\r\n        createInfo:\r\n          mintBUseSOLBalance || (baseIn ? anotherAmount : inputAmount).isZero()\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: baseIn ? anotherAmount : inputAmount,\r\n              }\r\n            : undefined,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        associatedOnly: false,\r\n        checkCreateATAOwner,\r\n      });\r\n\r\n    txBuilder.addInstruction(_tokenAccountBInstruction || {});\r\n\r\n    if (!tokenAccountA && !tokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", account.tokenAccounts);\r\n    const lpTokenAccount = await account.getCreatedTokenAccount({\r\n      mint: new PublicKey(poolInfo.lpMint.address),\r\n    });\r\n    const { tokenAccount: _lpTokenAccount, ...lpInstruction } = await account.handleTokenAccount({\r\n      side: \"out\",\r\n      amount: 0,\r\n      mint: new PublicKey(poolInfo.lpMint.address),\r\n      tokenAccount: lpTokenAccount,\r\n      bypassAssociatedCheck,\r\n      checkCreateATAOwner,\r\n    });\r\n    txBuilder.addInstruction(lpInstruction);\r\n    const poolKeys = propPoolKeys ?? (await this.getCpmmPoolKeys(poolInfo.id));\r\n    const _slippage = new Percent(new BN(1)).sub(slippage);\r\nconsole.log(\r\n  new PublicKey(poolInfo.programId),\r\n  this.scope.ownerPubKey,\r\n  new PublicKey(poolKeys.authority),\r\n  new PublicKey(poolInfo.id),\r\n  _lpTokenAccount!,\r\n  tokenAccountA!,\r\n  tokenAccountB!,\r\n  new PublicKey(poolKeys.vault.A),\r\n  new PublicKey(poolKeys.vault.B),\r\n  mintA,\r\n  mintB,\r\n  new PublicKey(poolInfo.lpMint.address),\r\n\r\n  computeResult ? computeResult?.liquidity : _slippage.mul(liquidity).quotient,\r\n  baseIn ? inputAmountFee.amount : anotherAmount,\r\n  baseIn ? anotherAmount : inputAmountFee.amount,\r\n)\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        makeDepositCpmmInInstruction(\r\n          new PublicKey(poolInfo.programId),\r\n          this.scope.ownerPubKey,\r\n          new PublicKey(poolKeys.authority),\r\n          new PublicKey(poolInfo.id),\r\n          _lpTokenAccount!,\r\n          tokenAccountA!,\r\n          tokenAccountB!,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          mintA,\r\n          mintB,\r\n          new PublicKey(poolInfo.lpMint.address),\r\n\r\n          computeResult ? computeResult?.liquidity : _slippage.mul(liquidity).quotient,\r\n          baseIn ? inputAmountFee.amount : anotherAmount,\r\n          baseIn ? anotherAmount : inputAmountFee.amount,\r\n        ),\r\n      ],\r\n      instructionTypes: [InstructionType.CpmmAddLiquidity],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async withdrawLiquidity<T extends TxVersion>(params: WithdrawCpmmLiquidityParams<T>): Promise<MakeTxData<T>> {\r\n    const { poolInfo, poolKeys: propPoolKeys, lpAmount, slippage, computeBudgetConfig, txVersion } = params;\r\n\r\n    if (this.scope.availability.addStandardPosition === false)\r\n      this.logAndCreateError(\"add liquidity feature disabled in your region\");\r\n\r\n    const _slippage = new Percent(new BN(1)).sub(slippage);\r\n\r\n    const rpcPoolData = await this.getRpcPoolInfo(poolInfo.id);\r\n    const [amountMintA, amountMintB] = [\r\n      _slippage.mul(lpAmount.mul(rpcPoolData.baseReserve).div(rpcPoolData.lpAmount)).quotient,\r\n      _slippage.mul(lpAmount.mul(rpcPoolData.quoteReserve).div(rpcPoolData.lpAmount)).quotient,\r\n    ];\r\n\r\n    const epochInfo = await this.scope.fetchEpochInfo();\r\n    const [mintAAmountFee, mintBAmountFee] = [\r\n      getTransferAmountFeeV2(amountMintA, poolInfo.mintA.extensions.feeConfig, epochInfo, false),\r\n      getTransferAmountFeeV2(amountMintB, poolInfo.mintB.extensions.feeConfig, epochInfo, false),\r\n    ];\r\n\r\n    const { account } = this.scope;\r\n    const txBuilder = this.createTxBuilder();\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n\r\n    const mintAUseSOLBalance = mintA.equals(WSOLMint);\r\n    const mintBUseSOLBalance = mintB.equals(WSOLMint);\r\n\r\n    let tokenAccountA: PublicKey | undefined = undefined;\r\n    let tokenAccountB: PublicKey | undefined = undefined;\r\n    const { account: _ownerTokenAccountA, instructionParams: accountAInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintA.programId,\r\n        mint: new PublicKey(poolInfo.mintA.address),\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : true,\r\n        checkCreateATAOwner: false,\r\n      });\r\n    tokenAccountA = _ownerTokenAccountA;\r\n    accountAInstructions && txBuilder.addInstruction(accountAInstructions);\r\n\r\n    const { account: _ownerTokenAccountB, instructionParams: accountBInstructions } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolInfo.mintB.programId,\r\n        mint: new PublicKey(poolInfo.mintB.address),\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : true,\r\n        checkCreateATAOwner: false,\r\n      });\r\n    tokenAccountB = _ownerTokenAccountB;\r\n    accountBInstructions && txBuilder.addInstruction(accountBInstructions);\r\n\r\n    if (!tokenAccountA || !tokenAccountB)\r\n      this.logAndCreateError(\"cannot found target token accounts\", \"tokenAccounts\", account.tokenAccounts);\r\n\r\n    const lpTokenAccount = await account.getCreatedTokenAccount({\r\n      mint: new PublicKey(poolInfo.lpMint.address),\r\n    });\r\n\r\n    if (!lpTokenAccount)\r\n      this.logAndCreateError(\"cannot found lp token account\", \"tokenAccounts\", account.tokenAccounts);\r\n    const poolKeys = propPoolKeys ?? (await this.getCpmmPoolKeys(poolInfo.id));\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        makeWithdrawCpmmInInstruction(\r\n          new PublicKey(poolInfo.programId),\r\n          this.scope.ownerPubKey,\r\n          new PublicKey(poolKeys.authority),\r\n          new PublicKey(poolInfo.id),\r\n          lpTokenAccount!,\r\n          tokenAccountA!,\r\n          tokenAccountB!,\r\n          new PublicKey(poolKeys.vault.A),\r\n          new PublicKey(poolKeys.vault.B),\r\n          mintA,\r\n          mintB,\r\n          new PublicKey(poolInfo.lpMint.address),\r\n\r\n          lpAmount,\r\n          amountMintA.sub(mintAAmountFee.fee ?? new BN(0)),\r\n          amountMintB.sub(mintBAmountFee.fee ?? new BN(0)),\r\n        ),\r\n      ],\r\n      instructionTypes: [InstructionType.CpmmWithdrawLiquidity],\r\n      lookupTableAddress: poolKeys.lookupTableAccount ? [poolKeys.lookupTableAccount] : [],\r\n    });\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async swap<T extends TxVersion>(params: CpmmSwapParams): Promise<MakeTxData<T>> {\r\n    const {\r\n      poolInfo,\r\n      poolKeys: propPoolKeys,\r\n      baseIn,\r\n      inputAmount,\r\n      swapResult,\r\n      slippage = 0,\r\n      config,\r\n      computeBudgetConfig,\r\n      txVersion,\r\n    } = params;\r\n\r\n    const { bypassAssociatedCheck, checkCreateATAOwner, associatedOnly } = {\r\n      // default\r\n      ...{ bypassAssociatedCheck: false, checkCreateATAOwner: false, associatedOnly: true },\r\n      // custom\r\n      ...config,\r\n    };\r\n\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    const [mintA, mintB] = [new PublicKey(poolInfo.mintA.address), new PublicKey(poolInfo.mintB.address)];\r\n    swapResult.destinationAmountSwapped = swapResult.destinationAmountSwapped\r\n      .mul(new BN((1 - slippage) * 10000))\r\n      .div(new BN(10000));\r\n\r\n    const mintAUseSOLBalance = poolInfo.mintA.address === WSOLMint.toBase58();\r\n    const mintBUseSOLBalance = poolInfo.mintB.address === WSOLMint.toBase58();\r\n    const { account: mintATokenAcc, instructionParams: mintATokenAccInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: mintA,\r\n        tokenProgram: new PublicKey(poolInfo.mintA.programId ?? TOKEN_PROGRAM_ID),\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo:\r\n          mintAUseSOLBalance || !baseIn\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: baseIn ? swapResult.sourceAmountSwapped : 0,\r\n              }\r\n            : undefined,\r\n        notUseTokenAccount: mintAUseSOLBalance,\r\n        skipCloseAccount: !mintAUseSOLBalance,\r\n        associatedOnly: mintAUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    mintATokenAccInstruction && txBuilder.addInstruction(mintATokenAccInstruction);\r\n\r\n    const { account: mintBTokenAcc, instructionParams: mintBTokenAccInstruction } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        mint: mintB,\r\n        tokenProgram: new PublicKey(poolInfo.mintB.programId ?? TOKEN_PROGRAM_ID),\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo:\r\n          mintBUseSOLBalance || baseIn\r\n            ? {\r\n                payer: this.scope.ownerPubKey,\r\n                amount: baseIn ? 0 : swapResult.sourceAmountSwapped,\r\n              }\r\n            : undefined,\r\n        notUseTokenAccount: mintBUseSOLBalance,\r\n        skipCloseAccount: !mintBUseSOLBalance,\r\n        associatedOnly: mintBUseSOLBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n    mintBTokenAccInstruction && txBuilder.addInstruction(mintBTokenAccInstruction);\r\n\r\n    if (!mintATokenAcc || !mintBTokenAcc)\r\n      this.logAndCreateError(\"user do not have token account\", {\r\n        mintA: poolInfo.mintA.symbol || poolInfo.mintA.address,\r\n        mintB: poolInfo.mintB.symbol || poolInfo.mintB.address,\r\n        mintATokenAcc,\r\n        mintBTokenAcc,\r\n        mintAUseSOLBalance,\r\n        mintBUseSOLBalance,\r\n        associatedOnly,\r\n      });\r\n\r\n    const poolKeys = propPoolKeys ?? (await this.getCpmmPoolKeys(poolInfo.id));\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        makeSwapCpmmBaseInInInstruction(\r\n          new PublicKey(poolInfo.programId),\r\n          this.scope.ownerPubKey,\r\n          new PublicKey(poolKeys.authority),\r\n          new PublicKey(poolKeys.config.id),\r\n          new PublicKey(poolInfo.id),\r\n          baseIn ? mintATokenAcc! : mintBTokenAcc!,\r\n          baseIn ? mintBTokenAcc! : mintATokenAcc!,\r\n          new PublicKey(poolKeys.vault[baseIn ? \"A\" : \"B\"]),\r\n          new PublicKey(poolKeys.vault[baseIn ? \"B\" : \"A\"]),\r\n          new PublicKey(poolInfo[baseIn ? \"mintA\" : \"mintB\"].programId ?? TOKEN_PROGRAM_ID),\r\n          new PublicKey(poolInfo[baseIn ? \"mintB\" : \"mintA\"].programId ?? TOKEN_PROGRAM_ID),\r\n          baseIn ? mintA : mintB,\r\n          baseIn ? mintB : mintA,\r\n          getPdaObservationId(new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)).publicKey,\r\n\r\n          inputAmount,\r\n          swapResult.destinationAmountSwapped,\r\n        ),\r\n        // baseIn\r\n        //   ? makeSwapCpmmBaseInInInstruction(\r\n        //       new PublicKey(poolInfo.programId),\r\n        //       this.scope.ownerPubKey,\r\n        //       new PublicKey(poolKeys.authority),\r\n        //       new PublicKey(poolKeys.config.id),\r\n        //       new PublicKey(poolInfo.id),\r\n        //       mintATokenAcc!,\r\n        //       mintBTokenAcc!,\r\n        //       new PublicKey(poolKeys.vault.A),\r\n        //       new PublicKey(poolKeys.vault.B),\r\n        //       new PublicKey(poolInfo.mintA.programId ?? TOKEN_PROGRAM_ID),\r\n        //       new PublicKey(poolInfo.mintB.programId ?? TOKEN_PROGRAM_ID),\r\n        //       mintA,\r\n        //       mintB,\r\n        //       getPdaObservationId(new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)).publicKey,\r\n\r\n        //       swapResult.sourceAmountSwapped,\r\n        //       swapResult.destinationAmountSwapped,\r\n        //     )\r\n        //   : makeSwapCpmmBaseOutInInstruction(\r\n        //       new PublicKey(poolInfo.programId),\r\n        //       this.scope.ownerPubKey,\r\n        //       new PublicKey(poolKeys.authority),\r\n        //       new PublicKey(poolKeys.config.id),\r\n        //       new PublicKey(poolInfo.id),\r\n\r\n        //       mintBTokenAcc!,\r\n        //       mintATokenAcc!,\r\n\r\n        //       new PublicKey(poolKeys.vault.B),\r\n        //       new PublicKey(poolKeys.vault.A),\r\n\r\n        //       new PublicKey(poolInfo.mintB.programId ?? TOKEN_PROGRAM_ID),\r\n        //       new PublicKey(poolInfo.mintA.programId ?? TOKEN_PROGRAM_ID),\r\n\r\n        //       mintB,\r\n        //       mintA,\r\n\r\n        //       getPdaObservationId(new PublicKey(poolInfo.programId), new PublicKey(poolInfo.id)).publicKey,\r\n\r\n        //       swapResult.sourceAmountSwapped,\r\n        //       swapResult.destinationAmountSwapped,\r\n        //     ),\r\n      ],\r\n      instructionTypes: [baseIn ? InstructionType.CpmmSwapBaseIn : InstructionType.CpmmSwapBaseOut],\r\n    });\r\n\r\n    txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public computeSwapAmount({\r\n    pool,\r\n    amountIn,\r\n    outputMint,\r\n    slippage,\r\n  }: {\r\n    pool: CpmmComputeData;\r\n    amountIn: BN;\r\n    outputMint: string | PublicKey;\r\n    slippage: number;\r\n  }): {\r\n    allTrade: boolean;\r\n    amountIn: BN;\r\n    amountOut: BN;\r\n    minAmountOut: BN;\r\n    fee: BN;\r\n    executionPrice: Decimal;\r\n    priceImpact: any;\r\n  } {\r\n    const isBaseIn = outputMint.toString() === pool.mintB.address;\r\n\r\n    const swapResult = CurveCalculator.swap(\r\n      amountIn,\r\n      isBaseIn ? pool.baseReserve : pool.quoteReserve,\r\n      isBaseIn ? pool.quoteReserve : pool.baseReserve,\r\n      pool.configInfo.tradeFeeRate,\r\n    );\r\n\r\n    const executionPrice = new Decimal(swapResult.destinationAmountSwapped.toString()).div(\r\n      swapResult.sourceAmountSwapped.toString(),\r\n    );\r\n\r\n    const minAmountOut = swapResult.destinationAmountSwapped.mul(new BN((1 - slippage) * 10000)).div(new BN(10000));\r\n\r\n    return {\r\n      allTrade: swapResult.sourceAmountSwapped.eq(amountIn),\r\n      amountIn,\r\n      amountOut: swapResult.destinationAmountSwapped,\r\n      minAmountOut,\r\n      executionPrice,\r\n      fee: swapResult.tradeFee,\r\n      priceImpact: pool.poolPrice.sub(executionPrice).div(pool.poolPrice),\r\n    };\r\n  }\r\n\r\n  public computePairAmount({\r\n    poolInfo,\r\n    baseReserve,\r\n    quoteReserve,\r\n    amount,\r\n    slippage,\r\n    epochInfo,\r\n    baseIn,\r\n  }: ComputePairAmountParams): {\r\n    inputAmountFee: GetTransferAmountFee;\r\n    anotherAmount: GetTransferAmountFee;\r\n    maxAnotherAmount: GetTransferAmountFee;\r\n    liquidity: BN;\r\n  } {\r\n    const coefficient = 1 - Number(slippage.toSignificant()) / 100;\r\n    const inputAmount = new BN(\r\n      new Decimal(amount)\r\n        .mul(10 ** poolInfo[baseIn ? \"mintA\" : \"mintB\"].decimals)\r\n        .mul(coefficient)\r\n        .toFixed(0),\r\n    );\r\n    const inputAmountFee = getTransferAmountFeeV2(\r\n      inputAmount,\r\n      poolInfo[baseIn ? \"mintA\" : \"mintB\"].extensions.feeConfig,\r\n      epochInfo,\r\n      false,\r\n    );\r\n    const _inputAmountWithoutFee = inputAmount.sub(inputAmountFee.fee ?? new BN(0));\r\n\r\n    const lpAmount = new BN(\r\n      new Decimal(poolInfo.lpAmount).mul(10 ** poolInfo.lpMint.decimals).toFixed(0, Decimal.ROUND_DOWN),\r\n    );\r\n    this.logDebug(\"baseReserve:\", baseReserve.toString(), \"quoteReserve:\", quoteReserve.toString());\r\n\r\n    this.logDebug(\r\n      \"tokenIn:\",\r\n      baseIn ? poolInfo.mintA.symbol : poolInfo.mintB.symbol,\r\n      \"amountIn:\",\r\n      inputAmount.toString(),\r\n      \"amountInFee:\",\r\n      inputAmountFee.fee?.toString() ?? 0,\r\n      \"anotherToken:\",\r\n      baseIn ? poolInfo.mintB.symbol : poolInfo.mintA.symbol,\r\n      \"slippage:\",\r\n      `${slippage.toSignificant()}%`,\r\n    );\r\n\r\n    // input is fixed\r\n    const input = baseIn ? \"base\" : \"quote\";\r\n    this.logDebug(\"input side:\", input);\r\n\r\n    const liquidity = _inputAmountWithoutFee.mul(lpAmount).div(input === \"base\" ? baseReserve : quoteReserve);\r\n    let anotherAmountFee: GetTransferAmountFee = {\r\n      amount: BN_ZERO,\r\n      fee: undefined,\r\n      expirationTime: undefined,\r\n    };\r\n    if (!_inputAmountWithoutFee.isZero()) {\r\n      const lpAmountData = lpToAmount(liquidity, baseReserve, quoteReserve, lpAmount);\r\n      this.logDebug(\"lpAmountData:\", {\r\n        amountA: lpAmountData.amountA.toString(),\r\n        amountB: lpAmountData.amountB.toString(),\r\n      });\r\n      anotherAmountFee = getTransferAmountFeeV2(\r\n        lpAmountData[baseIn ? \"amountB\" : \"amountA\"],\r\n        poolInfo[baseIn ? \"mintB\" : \"mintA\"].extensions.feeConfig,\r\n        epochInfo,\r\n        true,\r\n      );\r\n    }\r\n\r\n    const _slippage = new Percent(new BN(1)).add(slippage);\r\n    const slippageAdjustedAmount = getTransferAmountFeeV2(\r\n      _slippage.mul(anotherAmountFee.amount.sub(anotherAmountFee.fee ?? new BN(0))).quotient,\r\n      poolInfo[baseIn ? \"mintB\" : \"mintA\"].extensions.feeConfig,\r\n      epochInfo,\r\n      true,\r\n    );\r\n\r\n    this.logDebug(\r\n      \"anotherAmount:\",\r\n      anotherAmountFee.amount.toString(),\r\n      \"anotherAmountFee:\",\r\n      anotherAmountFee.fee?.toString() ?? 0,\r\n      \"maxAnotherAmount:\",\r\n      slippageAdjustedAmount.amount.toString(),\r\n      \"maxAnotherAmountFee:\",\r\n      slippageAdjustedAmount.fee?.toString() ?? 0,\r\n    );\r\n\r\n    return {\r\n      inputAmountFee,\r\n      anotherAmount: anotherAmountFee,\r\n      maxAnotherAmount: slippageAdjustedAmount,\r\n      liquidity,\r\n    };\r\n  }\r\n}\r\n\r\nfunction lpToAmount(lp: BN, poolAmountA: BN, poolAmountB: BN, supply: BN): { amountA: BN; amountB: BN } {\r\n  let amountA = lp.mul(poolAmountA).div(supply);\r\n  if (!amountA.isZero() && !lp.mul(poolAmountA).mod(supply).isZero()) amountA = amountA.add(new BN(1));\r\n  let amountB = lp.mul(poolAmountB).div(supply);\r\n  if (!amountB.isZero() && !lp.mul(poolAmountB).mod(supply).isZero()) amountB = amountB.add(new BN(1));\r\n\r\n  return {\r\n    amountA,\r\n    amountB,\r\n  };\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nexport const FEE_RATE_DENOMINATOR_VALUE = new BN(1_000_000);\r\n\r\nexport function ceilDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\r\n  return tokenAmount.mul(feeNumerator).add(feeDenominator).sub(new BN(1)).div(feeDenominator);\r\n}\r\n\r\nexport function floorDiv(tokenAmount: BN, feeNumerator: BN, feeDenominator: BN): BN {\r\n  return tokenAmount.mul(feeNumerator).div(feeDenominator);\r\n}\r\n\r\nexport class CpmmFee {\r\n  static tradingFee(amount: BN, tradeFeeRate: BN): BN {\r\n    return ceilDiv(amount, tradeFeeRate, FEE_RATE_DENOMINATOR_VALUE);\r\n  }\r\n  static protocolFee(amount: BN, protocolFeeRate: BN): BN {\r\n    return floorDiv(amount, protocolFeeRate, FEE_RATE_DENOMINATOR_VALUE);\r\n  }\r\n  static fundFee(amount: BN, fundFeeRate: BN): BN {\r\n    return floorDiv(amount, fundFeeRate, FEE_RATE_DENOMINATOR_VALUE);\r\n  }\r\n}\r\n","import BN from \"bn.js\";\r\nimport { RoundDirection, SwapWithoutFeesResult, TradingTokenResult } from \"./calculator\";\r\n\r\nfunction checkedRem(dividend: BN, divisor: BN): BN {\r\n  if (divisor.isZero()) throw Error(\"divisor is zero\");\r\n\r\n  const result = dividend.mod(divisor);\r\n  return result;\r\n}\r\n\r\nfunction checkedCeilDiv(dividend: BN, rhs: BN): BN[] {\r\n  if (rhs.isZero()) throw Error(\"rhs is zero\");\r\n\r\n  let quotient = dividend.div(rhs);\r\n\r\n  if (quotient.isZero()) throw Error(\"quotient is zero\");\r\n\r\n  let remainder = checkedRem(dividend, rhs);\r\n\r\n  if (remainder.gt(ZERO)) {\r\n    quotient = quotient.add(new BN(1));\r\n\r\n    rhs = dividend.div(quotient);\r\n    remainder = checkedRem(dividend, quotient);\r\n    if (remainder.gt(ZERO)) {\r\n      rhs = rhs.add(new BN(1));\r\n    }\r\n  }\r\n  return [quotient, rhs];\r\n}\r\n\r\nconst ZERO = new BN(0);\r\n\r\nexport class ConstantProductCurve {\r\n  static swapWithoutFees(sourceAmount: BN, swapSourceAmount: BN, swapDestinationAmount: BN): SwapWithoutFeesResult {\r\n    const invariant = swapSourceAmount.mul(swapDestinationAmount);\r\n\r\n    const newSwapSourceAmount = swapSourceAmount.add(sourceAmount);\r\n    const [newSwapDestinationAmount, _newSwapSourceAmount] = checkedCeilDiv(invariant, newSwapSourceAmount);\r\n\r\n    const sourceAmountSwapped = _newSwapSourceAmount.sub(swapSourceAmount);\r\n    const destinationAmountSwapped = swapDestinationAmount.sub(newSwapDestinationAmount);\r\n    if (destinationAmountSwapped.isZero()) throw Error(\"destinationAmountSwapped is zero\");\r\n\r\n    return {\r\n      sourceAmountSwapped,\r\n      destinationAmountSwapped,\r\n    };\r\n  }\r\n\r\n  static lpTokensToTradingTokens(\r\n    lpTokenAmount: BN,\r\n    lpTokenSupply: BN,\r\n    swapTokenAmount0: BN,\r\n    swapTokenAmount1: BN,\r\n    roundDirection: RoundDirection,\r\n  ): TradingTokenResult {\r\n    let tokenAmount0 = lpTokenAmount.mul(swapTokenAmount0).div(lpTokenSupply);\r\n    let tokenAmount1 = lpTokenAmount.mul(swapTokenAmount1).div(lpTokenSupply);\r\n\r\n    if (roundDirection === RoundDirection.Floor) {\r\n      return { tokenAmount0, tokenAmount1 };\r\n    } else if (roundDirection === RoundDirection.Ceiling) {\r\n      const tokenRemainder0 = checkedRem(lpTokenAmount.mul(swapTokenAmount0), lpTokenSupply);\r\n\r\n      if (tokenRemainder0.gt(ZERO) && tokenAmount0.gt(ZERO)) {\r\n        tokenAmount0 = tokenAmount0.add(new BN(1));\r\n      }\r\n\r\n      const token1Remainder = checkedRem(lpTokenAmount.mul(swapTokenAmount1), lpTokenSupply);\r\n\r\n      if (token1Remainder.gt(ZERO) && tokenAmount1.gt(ZERO)) {\r\n        tokenAmount1 = tokenAmount1.add(new BN(1));\r\n      }\r\n\r\n      return { tokenAmount0, tokenAmount1 };\r\n    }\r\n    throw Error(\"roundDirection value error\");\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { findProgramAddress } from \"@/common/txTool/txUtils\";\r\n\r\nconst AUTH_SEED = Buffer.from(\"vault_and_lp_mint_auth_seed\", \"utf8\");\r\nconst AMM_CONFIG_SEED = Buffer.from(\"amm_config\", \"utf8\");\r\nconst POOL_SEED = Buffer.from(\"pool\", \"utf8\");\r\nconst POOL_LP_MINT_SEED = Buffer.from(\"pool_lp_mint\", \"utf8\");\r\nconst POOL_VAULT_SEED = Buffer.from(\"pool_vault\", \"utf8\");\r\nconst OBSERVATION_SEED = Buffer.from(\"observation\", \"utf8\");\r\n\r\nexport function getPdaPoolAuthority(programId: PublicKey): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([AUTH_SEED], programId);\r\n}\r\n\r\nexport function getCpmmPdaAmmConfigId(\r\n  programId: PublicKey,\r\n  index: number,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return {publicKey: new PublicKey(\"AJBTtXxDzoUtZrEPS7ZR5H18gYpLK4r9BH4AxCWD7v1y\"), nonce: 255}\r\n}\r\n\r\nexport function getCpmmPdaPoolId(\r\n  programId: PublicKey,\r\n  ammConfigId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  creator: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_SEED, ammConfigId.toBuffer(), mintA.toBuffer(), mintB.toBuffer(), creator.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaLpMint(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_LP_MINT_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaVault(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n  mint: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([POOL_VAULT_SEED, poolId.toBuffer(), mint.toBuffer()], programId);\r\n}\r\n\r\nexport function getPdaObservationId(\r\n  programId: PublicKey,\r\n  poolId: PublicKey,\r\n): {\r\n  publicKey: PublicKey;\r\n  nonce: number;\r\n} {\r\n  return findProgramAddress([OBSERVATION_SEED, poolId.toBuffer()], programId);\r\n}\r\n\r\nfunction u16ToBytes(num: number): Uint8Array {\r\n  const arr = new ArrayBuffer(2);\r\n  const view = new DataView(arr);\r\n  view.setUint16(0, num, false);\r\n  return new Uint8Array(arr);\r\n}\r\n\r\nexport function getCreatePoolKeys({\r\n  creator,\r\n  programId,\r\n  mintA,\r\n  mintB,\r\n}: {\r\n  creator: PublicKey;\r\n  programId: PublicKey;\r\n  mintA: PublicKey;\r\n  mintB: PublicKey;\r\n}): {\r\n  poolId: PublicKey;\r\n  configId: PublicKey;\r\n  authority: PublicKey;\r\n  lpMint: PublicKey;\r\n  vaultA: PublicKey;\r\n  vaultB: PublicKey;\r\n  observationId: PublicKey;\r\n} {\r\n  const configId = new PublicKey(\"AJBTtXxDzoUtZrEPS7ZR5H18gYpLK4r9BH4AxCWD7v1y\")\r\n  const authority = getPdaPoolAuthority(programId).publicKey;\r\n  const poolId = getCpmmPdaPoolId(programId, configId, mintA, mintB, creator).publicKey;\r\n  const lpMint = getPdaLpMint(programId, poolId).publicKey;\r\n  const vaultA = getPdaVault(programId, poolId, mintA).publicKey;\r\n  const vaultB = getPdaVault(programId, poolId, mintB).publicKey;\r\n  const observationId = getPdaObservationId(programId, poolId).publicKey;\r\n\r\n  return {\r\n    poolId,\r\n    configId,\r\n    authority,\r\n    lpMint,\r\n    vaultA,\r\n    vaultB,\r\n    observationId,\r\n  };\r\n}\r\n","import BN from \"bn.js\";\r\n\r\nimport { AccountMeta, PublicKey, TransactionInstruction } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { SYSTEM_PROGRAM_ID, RENT_PROGRAM_ID, MEMO_PROGRAM_ID2, createLogger } from \"@/common\";\r\n\r\nimport { struct, u64 } from \"@/marshmallow\";\r\nconst logger = createLogger(\"Raydium_cpmm\");\r\nconst anchorDataBuf = {\r\n  initialize: [175, 175, 109, 31, 13, 152, 155, 237],\r\n  deposit: [242, 35, 198, 137, 82, 225, 242, 182],\r\n  withdraw: [183, 18, 70, 156, 148, 109, 161, 34],\r\n  swapBaseInput: [143, 190, 90, 218, 196, 30, 51, 222],\r\n  swapBaseOutput: [55, 217, 98, 86, 163, 74, 180, 173],\r\n};\r\n\r\nexport function makeCreateCpmmPoolInInstruction(\r\n  programId: PublicKey,\r\n  creator: PublicKey,\r\n  configId: PublicKey,\r\n  authority: PublicKey,\r\n  poolId: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  lpMint: PublicKey,\r\n  userVaultA: PublicKey,\r\n  userVaultB: PublicKey,\r\n  userLpAccount: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n\r\n  mintProgramA: PublicKey,\r\n  mintProgramB: PublicKey,\r\n  observationId: PublicKey,\r\n\r\n  amountMaxA: BN,\r\n  amountMaxB: BN,\r\n  openTime: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountMaxA\"), u64(\"amountMaxB\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: creator, isSigner: true, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: lpMint, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: observationId, isSigner: false, isWritable: true },\r\n\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: mintProgramA, isSigner: false, isWritable: false },\r\n    { pubkey: mintProgramB, isSigner: false, isWritable: false },\r\n    { pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountMaxA,\r\n      amountMaxB,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.initialize, ...data]),\r\n  });\r\n}\r\n\r\nexport function makeDepositCpmmInInstruction(\r\n  programId: PublicKey,\r\n  owner: PublicKey,\r\n  authority: PublicKey,\r\n  poolId: PublicKey,\r\n  userLpAccount: PublicKey,\r\n  userVaultA: PublicKey,\r\n  userVaultB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  lpMint: PublicKey,\r\n\r\n  lpAmount: BN,\r\n  amountMaxA: BN,\r\n  amountMaxB: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"lpAmount\"), u64(\"amountMaxA\"), u64(\"amountMaxB\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: lpMint, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  logger.debug(\"cpmm deposit data\", {\r\n    lpAmount: lpAmount.toString(),\r\n    amountMaxA: amountMaxA.toString(),\r\n    amountMaxB: amountMaxB.toString(),\r\n  });\r\n  dataLayout.encode(\r\n    {\r\n      lpAmount,\r\n      amountMaxA,\r\n      amountMaxB,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.deposit, ...data]),\r\n  });\r\n}\r\n\r\nexport function makeWithdrawCpmmInInstruction(\r\n  programId: PublicKey,\r\n  owner: PublicKey,\r\n  authority: PublicKey,\r\n  poolId: PublicKey,\r\n  userLpAccount: PublicKey,\r\n  userVaultA: PublicKey,\r\n  userVaultB: PublicKey,\r\n  vaultA: PublicKey,\r\n  vaultB: PublicKey,\r\n  mintA: PublicKey,\r\n  mintB: PublicKey,\r\n  lpMint: PublicKey,\r\n\r\n  lpAmount: BN,\r\n  amountMinA: BN,\r\n  amountMinB: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"lpAmount\"), u64(\"amountMinA\"), u64(\"amountMinB\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: owner, isSigner: true, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: userLpAccount, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultA, isSigner: false, isWritable: true },\r\n    { pubkey: userVaultB, isSigner: false, isWritable: true },\r\n    { pubkey: vaultA, isSigner: false, isWritable: true },\r\n    { pubkey: vaultB, isSigner: false, isWritable: true },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: mintA, isSigner: false, isWritable: false },\r\n    { pubkey: mintB, isSigner: false, isWritable: false },\r\n    { pubkey: lpMint, isSigner: false, isWritable: true },\r\n    { pubkey: MEMO_PROGRAM_ID2, isSigner: false, isWritable: false },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      lpAmount,\r\n      amountMinA,\r\n      amountMinB,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.withdraw, ...data]),\r\n  });\r\n}\r\n\r\nexport function makeSwapCpmmBaseInInInstruction(\r\n  programId: PublicKey,\r\n  payer: PublicKey,\r\n  authority: PublicKey,\r\n  configId: PublicKey,\r\n  poolId: PublicKey,\r\n  userInputAccount: PublicKey,\r\n  userOutputAccount: PublicKey,\r\n  inputVault: PublicKey,\r\n  outputVault: PublicKey,\r\n  inputTokenProgram: PublicKey,\r\n  outputTokenProgram: PublicKey,\r\n  inputMint: PublicKey,\r\n  outputMint: PublicKey,\r\n  observationId: PublicKey,\r\n\r\n  amountIn: BN,\r\n  amounOutMin: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountIn\"), u64(\"amounOutMin\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: payer, isSigner: true, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: userInputAccount, isSigner: false, isWritable: true },\r\n    { pubkey: userOutputAccount, isSigner: false, isWritable: true },\r\n    { pubkey: inputVault, isSigner: false, isWritable: true },\r\n    { pubkey: outputVault, isSigner: false, isWritable: true },\r\n    { pubkey: inputTokenProgram, isSigner: false, isWritable: false },\r\n    { pubkey: outputTokenProgram, isSigner: false, isWritable: false },\r\n    { pubkey: inputMint, isSigner: false, isWritable: false },\r\n    { pubkey: outputMint, isSigner: false, isWritable: false },\r\n    { pubkey: observationId, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountIn,\r\n      amounOutMin,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.swapBaseInput, ...data]),\r\n  });\r\n}\r\nexport function makeSwapCpmmBaseOutInInstruction(\r\n  programId: PublicKey,\r\n  payer: PublicKey,\r\n  authority: PublicKey,\r\n  configId: PublicKey,\r\n  poolId: PublicKey,\r\n  userInputAccount: PublicKey,\r\n  userOutputAccount: PublicKey,\r\n  inputVault: PublicKey,\r\n  outputVault: PublicKey,\r\n  inputTokenProgram: PublicKey,\r\n  outputTokenProgram: PublicKey,\r\n  inputMint: PublicKey,\r\n  outputMint: PublicKey,\r\n  observationId: PublicKey,\r\n\r\n  amountInMax: BN,\r\n  amountOut: BN,\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u64(\"amountInMax\"), u64(\"amountOut\")]);\r\n\r\n  const keys: Array<AccountMeta> = [\r\n    { pubkey: payer, isSigner: true, isWritable: false },\r\n    { pubkey: authority, isSigner: false, isWritable: false },\r\n    { pubkey: configId, isSigner: false, isWritable: false },\r\n    { pubkey: poolId, isSigner: false, isWritable: true },\r\n    { pubkey: userInputAccount, isSigner: false, isWritable: true },\r\n    { pubkey: userOutputAccount, isSigner: false, isWritable: true },\r\n    { pubkey: inputVault, isSigner: false, isWritable: true },\r\n    { pubkey: outputVault, isSigner: false, isWritable: true },\r\n    { pubkey: inputTokenProgram, isSigner: false, isWritable: false },\r\n    { pubkey: outputTokenProgram, isSigner: false, isWritable: false },\r\n    { pubkey: inputMint, isSigner: false, isWritable: false },\r\n    { pubkey: outputMint, isSigner: false, isWritable: false },\r\n    { pubkey: observationId, isSigner: false, isWritable: true },\r\n  ];\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      amountInMax,\r\n      amountOut,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data: Buffer.from([...anchorDataBuf.swapBaseOutput, ...data]),\r\n  });\r\n}\r\n","import { publicKey, seq, struct, u64, u8, u16, blob, bool } from \"@/marshmallow\";\r\n\r\nexport const CpmmConfigInfoLayout = struct([\r\n  blob(8),\r\n  u8(\"bump\"),\r\n  bool(\"disableCreatePool\"),\r\n  u16(\"index\"),\r\n  u64(\"tradeFeeRate\"),\r\n  u64(\"protocolFeeRate\"),\r\n  u64(\"fundFeeRate\"),\r\n  u64(\"createPoolFee\"),\r\n\r\n  publicKey(\"protocolOwner\"),\r\n  publicKey(\"fundOwner\"),\r\n  seq(u64(), 16),\r\n]);\r\n\r\nexport const CpmmPoolInfoLayout = struct([\r\n  blob(8),\r\n\r\n  publicKey(\"configId\"),\r\n  publicKey(\"poolCreator\"),\r\n  publicKey(\"vaultA\"),\r\n  publicKey(\"vaultB\"),\r\n\r\n  publicKey(\"mintLp\"),\r\n  publicKey(\"mintA\"),\r\n  publicKey(\"mintB\"),\r\n\r\n  publicKey(\"mintProgramA\"),\r\n  publicKey(\"mintProgramB\"),\r\n\r\n  publicKey(\"observationId\"),\r\n\r\n  u8(\"bump\"),\r\n  u8(\"status\"),\r\n\r\n  u8(\"lpDecimals\"),\r\n  u8(\"mintDecimalA\"),\r\n  u8(\"mintDecimalB\"),\r\n\r\n  u64(\"lpAmount\"),\r\n  u64(\"protocolFeesMintA\"),\r\n  u64(\"protocolFeesMintB\"),\r\n  u64(\"fundFeesMintA\"),\r\n  u64(\"fundFeesMintB\"),\r\n  seq(u64(), 32),\r\n]);\r\n","import { PublicKey, EpochInfo } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, createTransferInstruction } from \"@solana/spl-token\";\r\nimport {\r\n  WSOLMint,\r\n  AMM_V4,\r\n  CLMM_PROGRAM_ID,\r\n  CREATE_CPMM_POOL_PROGRAM,\r\n  minExpirationTime,\r\n  getMultipleAccountsInfoWithCustomFlags,\r\n  solToWSol,\r\n  fetchMultipleMintInfos,\r\n} from \"@/common\";\r\nimport { InstructionType, TxVersion } from \"@/common/txTool/txType\";\r\nimport { MakeTxData, MakeMultiTxData } from \"@/common/txTool/txTool\";\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport { BigNumberish, parseBigNumberish } from \"@/common/bignumber\";\r\nimport {\r\n  createWSolAccountInstructions,\r\n  closeAccountInstruction,\r\n  makeTransferInstruction,\r\n} from \"../account/instruction\";\r\nimport { TokenAccount } from \"../account/types\";\r\nimport { ComputeBudgetConfig, ReturnTypeFetchMultipleMintInfos } from \"@/raydium/type\";\r\nimport {\r\n  getLiquidityAssociatedAuthority,\r\n  ComputeAmountOutParam,\r\n  liquidityStateV4Layout,\r\n  toAmmComputePoolInfo,\r\n} from \"@/raydium/liquidity\";\r\nimport { PoolInfoLayout } from \"@/raydium/clmm/layout\";\r\nimport { CpmmPoolInfoLayout, getPdaPoolAuthority } from \"@/raydium/cpmm\";\r\nimport { ReturnTypeFetchMultiplePoolTickArrays, PoolUtils, ClmmRpcData, ComputeClmmPoolInfo } from \"@/raydium/clmm\";\r\nimport { struct, publicKey } from \"@/marshmallow\";\r\nimport {\r\n  ReturnTypeGetAllRoute,\r\n  BasicPoolInfo,\r\n  RoutePathType,\r\n  ReturnTypeFetchMultipleInfo,\r\n  ComputeAmountOutLayout,\r\n  ComputeAmountOutAmmLayout,\r\n  ComputePoolType,\r\n  ComputeRoutePathType,\r\n} from \"./type\";\r\nimport { TokenAmount, Price } from \"@/module\";\r\nimport BN from \"bn.js\";\r\nimport { AmmV4Keys, ApiV3Token, ClmmKeys, PoolKeys } from \"@/api\";\r\nimport { toApiV3Token, toToken, toTokenAmount } from \"../token\";\r\nimport Decimal from \"decimal.js\";\r\nimport { makeSwapInstruction } from \"./instrument\";\r\nimport { AmmRpcData } from \"../liquidity\";\r\nimport { MARKET_STATE_LAYOUT_V3, Market } from \"../serum\";\r\nimport { CpmmComputeData } from \"../cpmm\";\r\n\r\nconst ZERO = new BN(0);\r\nexport default class TradeV2 extends ModuleBase {\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  private async getWSolAccounts(): Promise<TokenAccount[]> {\r\n    this.scope.checkOwner();\r\n    await this.scope.account.fetchWalletTokenAccounts();\r\n    const tokenAccounts = this.scope.account.tokenAccounts.filter((acc) => acc.mint.equals(WSOLMint));\r\n    tokenAccounts.sort((a, b) => {\r\n      if (a.isAssociated) return 1;\r\n      if (b.isAssociated) return -1;\r\n      return a.amount.lt(b.amount) ? -1 : 1;\r\n    });\r\n    return tokenAccounts;\r\n  }\r\n\r\n  public async unWrapWSol<T extends TxVersion>(props: {\r\n    amount: BigNumberish;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n    tokenProgram?: PublicKey;\r\n    txVersion?: T;\r\n  }): Promise<MakeTxData<T>> {\r\n    const { amount, tokenProgram, txVersion = TxVersion.LEGACY } = props;\r\n    const tokenAccounts = await this.getWSolAccounts();\r\n    const txBuilder = this.createTxBuilder();\r\n    txBuilder.addCustomComputeBudget(props.computeBudgetConfig);\r\n    const ins = await createWSolAccountInstructions({\r\n      connection: this.scope.connection,\r\n      owner: this.scope.ownerPubKey,\r\n      payer: this.scope.ownerPubKey,\r\n      amount: 0,\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n\r\n    const amountBN = parseBigNumberish(amount);\r\n    for (let i = 0; i < tokenAccounts.length; i++) {\r\n      if (amountBN.gte(tokenAccounts[i].amount)) {\r\n        txBuilder.addInstruction({\r\n          instructions: [\r\n            closeAccountInstruction({\r\n              tokenAccount: tokenAccounts[i].publicKey!,\r\n              payer: this.scope.ownerPubKey,\r\n              owner: this.scope.ownerPubKey,\r\n              programId: tokenProgram,\r\n            }),\r\n          ],\r\n        });\r\n        amountBN.sub(tokenAccounts[i].amount);\r\n      } else {\r\n        txBuilder.addInstruction({\r\n          instructions: [\r\n            closeAccountInstruction({\r\n              tokenAccount: tokenAccounts[i].publicKey!,\r\n              payer: this.scope.ownerPubKey,\r\n              owner: this.scope.ownerPubKey,\r\n              programId: tokenProgram,\r\n            }),\r\n          ],\r\n        });\r\n        makeTransferInstruction({\r\n          destination: ins.addresses.newAccount,\r\n          source: tokenAccounts[i].publicKey!,\r\n          amount: amountBN,\r\n          owner: this.scope.ownerPubKey,\r\n          tokenProgram,\r\n        });\r\n      }\r\n    }\r\n\r\n    return txBuilder.versionBuild({ txVersion }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async wrapWSol<T extends TxVersion>(\r\n    amount: BigNumberish,\r\n    tokenProgram?: PublicKey,\r\n    txVersion?: T,\r\n  ): Promise<MakeTxData<T>> {\r\n    const tokenAccounts = await this.getWSolAccounts();\r\n\r\n    const txBuilder = this.createTxBuilder();\r\n    const ins = await createWSolAccountInstructions({\r\n      connection: this.scope.connection,\r\n      owner: this.scope.ownerPubKey,\r\n      payer: this.scope.ownerPubKey,\r\n      amount,\r\n      skipCloseAccount: true,\r\n    });\r\n    txBuilder.addInstruction(ins);\r\n\r\n    if (tokenAccounts.length) {\r\n      // already have wsol account\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          makeTransferInstruction({\r\n            // destination: ins.signers![0].publicKey,\r\n            destination: tokenAccounts[0].publicKey!,\r\n            source: ins.addresses.newAccount,\r\n            amount,\r\n            owner: this.scope.ownerPubKey,\r\n            tokenProgram,\r\n          }),\r\n        ],\r\n        endInstructions: [\r\n          closeAccountInstruction({\r\n            tokenAccount: ins.addresses.newAccount,\r\n            payer: this.scope.ownerPubKey,\r\n            owner: this.scope.ownerPubKey,\r\n            programId: tokenProgram,\r\n          }),\r\n        ],\r\n      });\r\n    }\r\n    return txBuilder.versionBuild({ txVersion: txVersion ?? TxVersion.LEGACY }) as Promise<MakeTxData<T>>;\r\n  }\r\n\r\n  public async swap<T extends TxVersion>({\r\n    swapInfo,\r\n    swapPoolKeys,\r\n    ownerInfo,\r\n    computeBudgetConfig,\r\n    routeProgram,\r\n    txVersion,\r\n  }: {\r\n    txVersion: T;\r\n    swapInfo: ComputeAmountOutLayout;\r\n    swapPoolKeys?: PoolKeys[];\r\n    ownerInfo: {\r\n      associatedOnly: boolean;\r\n      checkCreateATAOwner: boolean;\r\n    };\r\n    routeProgram: PublicKey;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n  }): Promise<MakeMultiTxData<T>> {\r\n    const txBuilder = this.createTxBuilder();\r\n\r\n    const amountIn = swapInfo.amountIn;\r\n    const amountOut = swapInfo.amountOut;\r\n    const useSolBalance = amountIn.amount.token.mint.equals(WSOLMint);\r\n    const isOutputSol = amountOut.amount.token.mint.equals(WSOLMint);\r\n    const inputMint = amountIn.amount.token.mint;\r\n    const outputMint = amountOut.amount.token.mint;\r\n\r\n    const { account: sourceAcc, instructionParams: sourceAccInsParams } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: amountIn.amount.token.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n        mint: inputMint,\r\n        notUseTokenAccount: useSolBalance,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: !useSolBalance,\r\n        createInfo: useSolBalance\r\n          ? {\r\n              payer: this.scope.ownerPubKey,\r\n              amount: amountIn.amount.raw,\r\n            }\r\n          : undefined,\r\n        associatedOnly: useSolBalance ? false : ownerInfo.associatedOnly,\r\n        checkCreateATAOwner: ownerInfo.checkCreateATAOwner,\r\n      });\r\n\r\n    sourceAccInsParams && txBuilder.addInstruction(sourceAccInsParams);\r\n\r\n    if (sourceAcc === undefined) {\r\n      throw Error(\"input account check error\");\r\n    }\r\n\r\n    let destinationAcc: PublicKey;\r\n    if (swapInfo.routeType === \"route\") {\r\n      destinationAcc = this.scope.account.getAssociatedTokenAccount(\r\n        outputMint,\r\n        amountOut.amount.token.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n      );\r\n    } else {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: amountOut.amount.token.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n        mint: outputMint,\r\n        notUseTokenAccount: isOutputSol,\r\n        owner: this.scope.ownerPubKey,\r\n        skipCloseAccount: true,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        associatedOnly: isOutputSol ? false : ownerInfo.associatedOnly,\r\n        checkCreateATAOwner: ownerInfo.checkCreateATAOwner,\r\n      });\r\n      destinationAcc = account!;\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n    }\r\n\r\n    if (isOutputSol) {\r\n      txBuilder.addInstruction({\r\n        endInstructions: [\r\n          closeAccountInstruction({\r\n            owner: this.scope.ownerPubKey,\r\n            payer: this.scope.ownerPubKey,\r\n            tokenAccount: destinationAcc,\r\n            programId: TOKEN_PROGRAM_ID,\r\n          }),\r\n        ],\r\n        endInstructionTypes: [InstructionType.CloseAccount],\r\n      });\r\n    }\r\n\r\n    let routeTokenAcc: PublicKey | undefined = undefined;\r\n    if (swapInfo.routeType === \"route\") {\r\n      const middleMint = swapInfo.middleToken;\r\n      routeTokenAcc = this.scope.account.getAssociatedTokenAccount(\r\n        middleMint.mint,\r\n        middleMint.isToken2022 ? TOKEN_2022_PROGRAM_ID : TOKEN_PROGRAM_ID,\r\n      );\r\n    }\r\n\r\n    const poolKeys = swapPoolKeys ? swapPoolKeys : await this.computePoolToPoolKeys({ pools: swapInfo.poolInfoList });\r\n    const swapIns = makeSwapInstruction({\r\n      routeProgram,\r\n      inputMint,\r\n      swapInfo: {\r\n        ...swapInfo,\r\n        poolInfo: [...swapInfo.poolInfoList],\r\n        poolKey: poolKeys,\r\n        outputMint,\r\n      },\r\n      ownerInfo: {\r\n        wallet: this.scope.ownerPubKey,\r\n        sourceToken: sourceAcc,\r\n        routeToken: routeTokenAcc,\r\n        destinationToken: destinationAcc!,\r\n      },\r\n    });\r\n\r\n    if (swapInfo.feeConfig !== undefined) {\r\n      const checkTxBuilder = this.createTxBuilder();\r\n      checkTxBuilder.addInstruction({\r\n        instructions: [\r\n          createTransferInstruction(\r\n            sourceAcc,\r\n            swapInfo.feeConfig.feeAccount,\r\n            this.scope.ownerPubKey,\r\n            swapInfo.feeConfig.feeAmount.toNumber(),\r\n          ),\r\n        ],\r\n        instructionTypes: [InstructionType.TransferAmount],\r\n      });\r\n      checkTxBuilder.addInstruction(swapIns);\r\n\r\n      const { transactions } =\r\n        txVersion === TxVersion.V0 ? await checkTxBuilder.sizeCheckBuildV0() : await checkTxBuilder.sizeCheckBuild();\r\n      if (transactions.length < 2) {\r\n        txBuilder.addInstruction({\r\n          instructions: [\r\n            createTransferInstruction(\r\n              sourceAcc,\r\n              swapInfo.feeConfig.feeAccount,\r\n              this.scope.ownerPubKey,\r\n              swapInfo.feeConfig.feeAmount.toNumber(),\r\n            ),\r\n          ],\r\n          instructionTypes: [InstructionType.TransferAmount],\r\n        });\r\n      }\r\n    }\r\n    txBuilder.addInstruction(swapIns);\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({ computeBudgetConfig, address: swapIns.address }) as Promise<\r\n        MakeMultiTxData<T>\r\n      >;\r\n    return txBuilder.sizeCheckBuild({ computeBudgetConfig, address: swapIns.address }) as Promise<MakeMultiTxData<T>>;\r\n  }\r\n\r\n  // get all amm/clmm/cpmm pools data only with id and mint\r\n  public async fetchRoutePoolBasicInfo(programIds?: { amm: PublicKey; clmm: PublicKey; cpmm: PublicKey }): Promise<{\r\n    ammPools: BasicPoolInfo[];\r\n    clmmPools: BasicPoolInfo[];\r\n    cpmmPools: BasicPoolInfo[];\r\n  }> {\r\n    const { amm = AMM_V4, clmm = CLMM_PROGRAM_ID, cpmm = CREATE_CPMM_POOL_PROGRAM } = programIds || {};\r\n    const ammPoolsData = await this.scope.connection.getProgramAccounts(amm, {\r\n      dataSlice: { offset: liquidityStateV4Layout.offsetOf(\"baseMint\"), length: 64 },\r\n    });\r\n\r\n    const layoutAmm = struct([publicKey(\"baseMint\"), publicKey(\"quoteMint\")]);\r\n    const ammData = ammPoolsData.map((data) => ({\r\n      id: data.pubkey,\r\n      version: 4,\r\n      mintA: layoutAmm.decode(data.account.data).baseMint,\r\n      mintB: layoutAmm.decode(data.account.data).quoteMint,\r\n    }));\r\n\r\n    const layout = struct([publicKey(\"mintA\"), publicKey(\"mintB\")]);\r\n    const clmmPoolsData = await this.scope.connection.getProgramAccounts(clmm, {\r\n      filters: [{ dataSize: PoolInfoLayout.span }],\r\n      dataSlice: { offset: PoolInfoLayout.offsetOf(\"mintA\"), length: 64 },\r\n    });\r\n\r\n    const clmmData = clmmPoolsData.map((data) => {\r\n      const clmm = layout.decode(data.account.data);\r\n      return {\r\n        id: data.pubkey,\r\n        version: 6,\r\n        mintA: clmm.mintA,\r\n        mintB: clmm.mintB,\r\n      };\r\n    });\r\n\r\n    const cpmmPools = await this.scope.connection.getProgramAccounts(cpmm, {\r\n      dataSlice: { offset: CpmmPoolInfoLayout.offsetOf(\"mintA\"), length: 64 },\r\n    });\r\n\r\n    const cpmmData = cpmmPools.map((data) => {\r\n      const clmm = layout.decode(data.account.data);\r\n      return {\r\n        id: data.pubkey,\r\n        version: 7,\r\n        mintA: clmm.mintA,\r\n        mintB: clmm.mintB,\r\n      };\r\n    });\r\n\r\n    return {\r\n      clmmPools: clmmData,\r\n      ammPools: ammData,\r\n      cpmmPools: cpmmData,\r\n    };\r\n  }\r\n\r\n  // get pools with in routes\r\n  public getAllRoute({\r\n    inputMint,\r\n    outputMint,\r\n    clmmPools,\r\n    ammPools,\r\n    cpmmPools,\r\n  }: {\r\n    inputMint: PublicKey;\r\n    outputMint: PublicKey;\r\n    clmmPools: BasicPoolInfo[];\r\n    ammPools: BasicPoolInfo[];\r\n    cpmmPools: BasicPoolInfo[];\r\n  }): ReturnTypeGetAllRoute {\r\n    inputMint = inputMint.toString() === PublicKey.default.toString() ? WSOLMint : inputMint;\r\n    outputMint = outputMint.toString() === PublicKey.default.toString() ? WSOLMint : outputMint;\r\n\r\n    const needSimulate: { [poolKey: string]: BasicPoolInfo } = {};\r\n    const needTickArray: { [poolKey: string]: BasicPoolInfo } = {};\r\n    const cpmmPoolList: { [poolKey: string]: BasicPoolInfo } = {};\r\n\r\n    const directPath: BasicPoolInfo[] = [];\r\n\r\n    const routePathDict: RoutePathType = {}; // {[route mint: string]: {in: [] , out: []}}\r\n\r\n    for (const itemClmmPool of clmmPools ?? []) {\r\n      if (\r\n        (itemClmmPool.mintA.equals(inputMint) && itemClmmPool.mintB.equals(outputMint)) ||\r\n        (itemClmmPool.mintA.equals(outputMint) && itemClmmPool.mintB.equals(inputMint))\r\n      ) {\r\n        directPath.push(itemClmmPool);\r\n        needTickArray[itemClmmPool.id.toString()] = itemClmmPool;\r\n      }\r\n\r\n      if (itemClmmPool.mintA.equals(inputMint)) {\r\n        const t = itemClmmPool.mintB.toString();\r\n        if (routePathDict[t] === undefined)\r\n          routePathDict[t] = {\r\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[t].in.push(itemClmmPool);\r\n      }\r\n      if (itemClmmPool.mintB.equals(inputMint)) {\r\n        const t = itemClmmPool.mintA.toString();\r\n        if (routePathDict[t] === undefined)\r\n          routePathDict[t] = {\r\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[t].in.push(itemClmmPool);\r\n      }\r\n      if (itemClmmPool.mintA.equals(outputMint)) {\r\n        const t = itemClmmPool.mintB.toString();\r\n        if (routePathDict[t] === undefined)\r\n          routePathDict[t] = {\r\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[t].out.push(itemClmmPool);\r\n      }\r\n      if (itemClmmPool.mintB.equals(outputMint)) {\r\n        const t = itemClmmPool.mintA.toString();\r\n        if (routePathDict[t] === undefined)\r\n          routePathDict[t] = {\r\n            mintProgram: TOKEN_PROGRAM_ID, // to fetch later\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[t].out.push(itemClmmPool);\r\n      }\r\n    }\r\n\r\n    const addLiquidityPools: BasicPoolInfo[] = [];\r\n\r\n    for (const itemAmmPool of ammPools) {\r\n      if (\r\n        (itemAmmPool.mintA.equals(inputMint) && itemAmmPool.mintB.equals(outputMint)) ||\r\n        (itemAmmPool.mintA.equals(outputMint) && itemAmmPool.mintB.equals(inputMint))\r\n      ) {\r\n        directPath.push(itemAmmPool);\r\n        needSimulate[itemAmmPool.id.toBase58()] = itemAmmPool;\r\n        addLiquidityPools.push(itemAmmPool);\r\n      }\r\n      if (itemAmmPool.mintA.equals(inputMint)) {\r\n        if (routePathDict[itemAmmPool.mintB.toBase58()] === undefined)\r\n          routePathDict[itemAmmPool.mintB.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemAmmPool.mintB.toBase58()].in.push(itemAmmPool);\r\n      }\r\n      if (itemAmmPool.mintB.equals(inputMint)) {\r\n        if (routePathDict[itemAmmPool.mintA.toBase58()] === undefined)\r\n          routePathDict[itemAmmPool.mintA.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemAmmPool.mintA.toBase58()].in.push(itemAmmPool);\r\n      }\r\n      if (itemAmmPool.mintA.equals(outputMint)) {\r\n        if (routePathDict[itemAmmPool.mintB.toBase58()] === undefined)\r\n          routePathDict[itemAmmPool.mintB.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemAmmPool.mintB.toBase58()].out.push(itemAmmPool);\r\n      }\r\n      if (itemAmmPool.mintB.equals(outputMint)) {\r\n        if (routePathDict[itemAmmPool.mintA.toBase58()] === undefined)\r\n          routePathDict[itemAmmPool.mintA.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemAmmPool.mintA.toBase58()].out.push(itemAmmPool);\r\n      }\r\n    }\r\n\r\n    for (const itemCpmmPool of cpmmPools) {\r\n      if (\r\n        (itemCpmmPool.mintA.equals(inputMint) && itemCpmmPool.mintB.equals(outputMint)) ||\r\n        (itemCpmmPool.mintA.equals(outputMint) && itemCpmmPool.mintB.equals(inputMint))\r\n      ) {\r\n        directPath.push(itemCpmmPool);\r\n        cpmmPoolList[itemCpmmPool.id.toBase58()] = itemCpmmPool;\r\n      }\r\n      if (itemCpmmPool.mintA.equals(inputMint)) {\r\n        if (routePathDict[itemCpmmPool.mintB.toBase58()] === undefined)\r\n          routePathDict[itemCpmmPool.mintB.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemCpmmPool.mintB.toBase58()].in.push(itemCpmmPool);\r\n      }\r\n      if (itemCpmmPool.mintB.equals(inputMint)) {\r\n        if (routePathDict[itemCpmmPool.mintA.toBase58()] === undefined)\r\n          routePathDict[itemCpmmPool.mintA.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemCpmmPool.mintA.toBase58()].in.push(itemCpmmPool);\r\n      }\r\n      if (itemCpmmPool.mintA.equals(outputMint)) {\r\n        if (routePathDict[itemCpmmPool.mintB.toBase58()] === undefined)\r\n          routePathDict[itemCpmmPool.mintB.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemCpmmPool.mintB.toBase58()].out.push(itemCpmmPool);\r\n      }\r\n      if (itemCpmmPool.mintB.equals(outputMint)) {\r\n        if (routePathDict[itemCpmmPool.mintA.toBase58()] === undefined)\r\n          routePathDict[itemCpmmPool.mintA.toBase58()] = {\r\n            mintProgram: TOKEN_PROGRAM_ID,\r\n            in: [],\r\n            out: [],\r\n            mDecimals: 0, // to fetch later\r\n          };\r\n        routePathDict[itemCpmmPool.mintA.toBase58()].out.push(itemCpmmPool);\r\n      }\r\n    }\r\n\r\n    for (const t of Object.keys(routePathDict)) {\r\n      if (\r\n        routePathDict[t].in.length === 1 &&\r\n        routePathDict[t].out.length === 1 &&\r\n        routePathDict[t].in[0].id.equals(routePathDict[t].out[0].id)\r\n      ) {\r\n        delete routePathDict[t];\r\n        continue;\r\n      }\r\n      if (routePathDict[t].in.length === 0 || routePathDict[t].out.length === 0) {\r\n        delete routePathDict[t];\r\n        continue;\r\n      }\r\n\r\n      const info = routePathDict[t];\r\n\r\n      for (const infoIn of info.in) {\r\n        for (const infoOut of info.out) {\r\n          if (infoIn.version === 6 && needTickArray[infoIn.id.toString()] === undefined) {\r\n            needTickArray[infoIn.id.toString()] = infoIn;\r\n          } else if (infoIn.version === 7 && cpmmPoolList[infoIn.id.toString()] === undefined) {\r\n            cpmmPoolList[infoIn.id.toString()] = infoIn;\r\n          } else if (\r\n            (infoIn.version === 4 || infoIn.version === 5) &&\r\n            needSimulate[infoIn.id.toString()] === undefined\r\n          ) {\r\n            needSimulate[infoIn.id.toString()] = infoIn;\r\n          }\r\n          if (infoOut.version === 6 && needTickArray[infoOut.id.toString()] === undefined) {\r\n            needTickArray[infoOut.id.toString()] = infoOut;\r\n          } else if (infoOut.version === 7 && cpmmPoolList[infoOut.id.toString()] === undefined) {\r\n            cpmmPoolList[infoOut.id.toString()] = infoOut;\r\n          } else if (\r\n            (infoOut.version === 4 || infoOut.version === 5) &&\r\n            needSimulate[infoOut.id.toString()] === undefined\r\n          ) {\r\n            needSimulate[infoOut.id.toString()] = infoOut;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      directPath,\r\n      addLiquidityPools,\r\n      routePathDict,\r\n      needSimulate: Object.values(needSimulate),\r\n      needTickArray: Object.values(needTickArray),\r\n      cpmmPoolList: Object.values(cpmmPoolList),\r\n    };\r\n  }\r\n\r\n  // fetch pools detail info in route\r\n  public async fetchSwapRoutesData({\r\n    routes,\r\n    inputMint,\r\n    outputMint,\r\n  }: {\r\n    inputMint: string | PublicKey;\r\n    outputMint: string | PublicKey;\r\n    routes: ReturnTypeGetAllRoute;\r\n  }): Promise<{\r\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\r\n    ammPoolsRpcInfo: Record<string, AmmRpcData>;\r\n    ammSimulateCache: Record<string, ComputeAmountOutParam[\"poolInfo\"]>;\r\n    clmmPoolsRpcInfo: Record<string, ClmmRpcData>;\r\n    computeClmmPoolInfo: Record<string, ComputeClmmPoolInfo>;\r\n    computePoolTickData: ReturnTypeFetchMultiplePoolTickArrays;\r\n    computeCpmmData: Record<string, CpmmComputeData>;\r\n    routePathDict: ComputeRoutePathType;\r\n  }> {\r\n    const mintSet = new Set([\r\n      ...routes.needTickArray.map((p) => [p.mintA.toBase58(), p.mintB.toBase58()]).flat(),\r\n      inputMint.toString(),\r\n      outputMint.toString(),\r\n    ]);\r\n\r\n    console.log(\"fetching amm pools info, total: \", routes.needSimulate.length);\r\n    const ammPoolsRpcInfo = await this.scope.liquidity.getRpcPoolInfos(routes.needSimulate.map((p) => p.id));\r\n    const ammSimulateCache = toAmmComputePoolInfo(ammPoolsRpcInfo);\r\n\r\n    let mintInfos: ReturnTypeFetchMultipleMintInfos = {};\r\n    // amm doesn't support token2022 yet, so don't need to fetch mint info\r\n    Object.values(ammSimulateCache).forEach((p) => {\r\n      mintSet.delete(p.mintA.address);\r\n      mintInfos[p.mintA.address] = {\r\n        address: new PublicKey(p.mintA.address),\r\n        programId: TOKEN_PROGRAM_ID,\r\n        mintAuthority: null,\r\n        supply: BigInt(0),\r\n        decimals: p.mintA.decimals,\r\n        isInitialized: true,\r\n        freezeAuthority: null,\r\n        tlvData: Buffer.from(\"0\", \"hex\"),\r\n        feeConfig: undefined,\r\n      };\r\n\r\n      mintSet.delete(p.mintB.address);\r\n      mintInfos[p.mintB.address] = {\r\n        address: new PublicKey(p.mintB.address),\r\n        programId: TOKEN_PROGRAM_ID,\r\n        mintAuthority: null,\r\n        supply: BigInt(0),\r\n        decimals: p.mintB.decimals,\r\n        isInitialized: true,\r\n        freezeAuthority: null,\r\n        tlvData: Buffer.from(\"0\", \"hex\"),\r\n        feeConfig: undefined,\r\n      };\r\n    });\r\n\r\n    console.log(\"fetching cpmm pools info, total: \", routes.cpmmPoolList.length);\r\n    const cpmmPoolsRpcInfo = await this.scope.cpmm.getRpcPoolInfos(\r\n      routes.cpmmPoolList.map((p) => p.id.toBase58()),\r\n      true,\r\n    );\r\n\r\n    Object.values(cpmmPoolsRpcInfo).forEach((p) => {\r\n      const [mintA, mintB] = [p.mintA.toBase58(), p.mintB.toBase58()];\r\n      if (p.mintProgramA.equals(TOKEN_PROGRAM_ID)) {\r\n        mintSet.delete(mintA);\r\n        mintInfos[mintA] = {\r\n          address: p.mintA,\r\n          programId: p.mintProgramA,\r\n          mintAuthority: null,\r\n          supply: BigInt(0),\r\n          decimals: p.mintDecimalA,\r\n          isInitialized: true,\r\n          freezeAuthority: null,\r\n          tlvData: Buffer.from(\"0\", \"hex\"),\r\n          feeConfig: undefined,\r\n        };\r\n      } else mintSet.add(mintA); // 2022, need to fetch fee config\r\n      if (p.mintProgramB.equals(TOKEN_PROGRAM_ID)) {\r\n        mintSet.delete(mintB);\r\n        mintInfos[mintB] = {\r\n          address: p.mintB,\r\n          programId: p.mintProgramB,\r\n          mintAuthority: null,\r\n          supply: BigInt(0),\r\n          decimals: p.mintDecimalB,\r\n          isInitialized: true,\r\n          freezeAuthority: null,\r\n          tlvData: Buffer.from(\"0\", \"hex\"),\r\n          feeConfig: undefined,\r\n        };\r\n      } else mintSet.add(mintB); // 2022, need to fetch fee config\r\n    });\r\n\r\n    console.log(\"fetching mints info, total: \", mintSet.size);\r\n    const fetchMintInfoRes = await fetchMultipleMintInfos({\r\n      connection: this.scope.connection,\r\n      mints: Array.from(mintSet).map((m) => new PublicKey(m)),\r\n    });\r\n\r\n    mintInfos = {\r\n      ...mintInfos,\r\n      ...fetchMintInfoRes,\r\n    };\r\n\r\n    const computeCpmmData = this.scope.cpmm.toComputePoolInfos({\r\n      pools: cpmmPoolsRpcInfo,\r\n      mintInfos,\r\n    });\r\n\r\n    console.log(\"fetching clmm pools info, total:\", routes.needTickArray.length);\r\n    const clmmPoolsRpcInfo = await this.scope.clmm.getRpcClmmPoolInfos({\r\n      poolIds: routes.needTickArray.map((p) => p.id),\r\n    });\r\n    const { computeClmmPoolInfo, computePoolTickData } = await this.scope.clmm.getComputeClmmPoolInfos({\r\n      clmmPoolsRpcInfo,\r\n      mintInfos,\r\n    });\r\n\r\n    // update route pool mint info\r\n    const routePathDict = Object.keys(routes.routePathDict).reduce((acc, cur) => {\r\n      return {\r\n        ...acc,\r\n        [cur]: {\r\n          ...routes.routePathDict[cur],\r\n          mintProgram: mintInfos[cur].programId,\r\n          mDecimals: mintInfos[cur].decimals,\r\n          in: routes.routePathDict[cur].in.map(\r\n            (p) =>\r\n              ammSimulateCache[p.id.toBase58()] ||\r\n              computeClmmPoolInfo[p.id.toBase58()] ||\r\n              computeCpmmData[p.id.toBase58()],\r\n          ),\r\n          out: routes.routePathDict[cur].out.map(\r\n            (p) =>\r\n              ammSimulateCache[p.id.toBase58()] ||\r\n              computeClmmPoolInfo[p.id.toBase58()] ||\r\n              computeCpmmData[p.id.toBase58()],\r\n          ),\r\n        },\r\n      };\r\n    }, {} as ComputeRoutePathType);\r\n\r\n    return {\r\n      mintInfos,\r\n\r\n      ammPoolsRpcInfo,\r\n      ammSimulateCache,\r\n\r\n      clmmPoolsRpcInfo,\r\n      computeClmmPoolInfo,\r\n      computePoolTickData,\r\n\r\n      computeCpmmData,\r\n\r\n      routePathDict,\r\n    };\r\n  }\r\n\r\n  // compute amount from routes\r\n  public getAllRouteComputeAmountOut({\r\n    inputTokenAmount,\r\n    outputToken: propOutputToken,\r\n    directPath,\r\n    routePathDict,\r\n    simulateCache,\r\n    tickCache,\r\n    slippage,\r\n    chainTime,\r\n    epochInfo,\r\n    feeConfig,\r\n  }: {\r\n    directPath: ComputePoolType[];\r\n    routePathDict: ComputeRoutePathType;\r\n    simulateCache: ReturnTypeFetchMultipleInfo;\r\n    tickCache: ReturnTypeFetchMultiplePoolTickArrays;\r\n\r\n    mintInfos: ReturnTypeFetchMultipleMintInfos;\r\n\r\n    inputTokenAmount: TokenAmount;\r\n    outputToken: ApiV3Token;\r\n    slippage: number;\r\n    chainTime: number;\r\n    epochInfo: EpochInfo;\r\n\r\n    feeConfig?: {\r\n      feeBps: BN;\r\n      feeAccount: PublicKey;\r\n    };\r\n  }): ComputeAmountOutLayout[] {\r\n    const _amountInFee =\r\n      feeConfig === undefined\r\n        ? new BN(0)\r\n        : inputTokenAmount.raw.mul(new BN(feeConfig.feeBps.toNumber())).div(new BN(10000));\r\n    const _amoutIn = inputTokenAmount.raw.sub(_amountInFee);\r\n    const amountIn = new TokenAmount(inputTokenAmount.token, _amoutIn);\r\n    const _inFeeConfig =\r\n      feeConfig === undefined\r\n        ? undefined\r\n        : {\r\n            feeAmount: _amountInFee,\r\n            feeAccount: feeConfig.feeAccount,\r\n          };\r\n    const outputToken = {\r\n      ...propOutputToken,\r\n      address: solToWSol(propOutputToken.address).toString(),\r\n    };\r\n    const outRoute: ComputeAmountOutLayout[] = [];\r\n    for (const itemPool of directPath) {\r\n      try {\r\n        outRoute.push({\r\n          ...this.computeAmountOut({\r\n            itemPool,\r\n            tickCache,\r\n            simulateCache,\r\n            chainTime,\r\n            epochInfo,\r\n            slippage,\r\n            outputToken,\r\n            amountIn,\r\n          }),\r\n          feeConfig: _inFeeConfig,\r\n        });\r\n      } catch (e: any) {\r\n        this.logDebug(\"direct error\", itemPool.version, itemPool.id.toString(), e.message);\r\n        /* empty */\r\n      }\r\n    }\r\n    this.logDebug(\"direct done\");\r\n    for (const [routeMint, info] of Object.entries(routePathDict)) {\r\n      // const routeToken = new Token(info.mintProgram, routeMint, info.mDecimals);\r\n      const routeToken = {\r\n        chainId: 101,\r\n        address: routeMint,\r\n        programId: info.mintProgram.toBase58(),\r\n        logoURI: \"\",\r\n        symbol: \"\",\r\n        name: \"\",\r\n        decimals: info.mDecimals,\r\n        tags: [],\r\n        extensions: {},\r\n      };\r\n      const maxFirstIn = info.in\r\n        .map((i) => {\r\n          try {\r\n            return {\r\n              pool: i,\r\n              data: this.computeAmountOut({\r\n                itemPool: i,\r\n                tickCache,\r\n                simulateCache,\r\n                chainTime,\r\n                epochInfo,\r\n                slippage,\r\n                outputToken: routeToken,\r\n                amountIn,\r\n              }),\r\n            };\r\n          } catch (e: any) {\r\n            this.logDebug(\"route in error\", i.version, i.id.toString(), e.message);\r\n            return undefined;\r\n          }\r\n        })\r\n        .sort((_a, _b) => {\r\n          const a = _a === undefined ? ZERO : _a.data.amountOut.amount.raw.sub(_a.data.amountOut.fee?.raw ?? ZERO);\r\n          const b = _b === undefined ? ZERO : _b.data.amountOut.amount.raw.sub(_b.data.amountOut.fee?.raw ?? ZERO);\r\n          return a.lt(b) ? 1 : -1;\r\n        })[0];\r\n      if (maxFirstIn === undefined) continue;\r\n      const routeAmountIn = new TokenAmount(\r\n        toToken(routeToken),\r\n        maxFirstIn.data.amountOut.amount.raw.sub(maxFirstIn.data.amountOut.fee?.raw ?? ZERO),\r\n      );\r\n      for (const iOutPool of info.out) {\r\n        try {\r\n          const outC = this.computeAmountOut({\r\n            itemPool: iOutPool,\r\n            tickCache,\r\n            simulateCache,\r\n            chainTime,\r\n            epochInfo,\r\n            slippage,\r\n            outputToken,\r\n            amountIn: routeAmountIn,\r\n          });\r\n          outRoute.push({\r\n            ...outC,\r\n            allTrade: maxFirstIn.data.allTrade && outC.allTrade ? true : false,\r\n            amountIn: maxFirstIn.data.amountIn,\r\n            amountOut: outC.amountOut,\r\n            minAmountOut: outC.minAmountOut,\r\n            currentPrice: undefined,\r\n            executionPrice: new Decimal(\r\n              new Price({\r\n                baseToken: maxFirstIn.data.amountIn.amount.token,\r\n                denominator: maxFirstIn.data.amountIn.amount.raw,\r\n                quoteToken: outC.amountOut.amount.token,\r\n                numerator: outC.amountOut.amount.raw.sub(outC.amountOut.fee?.raw ?? ZERO),\r\n              }).toFixed(),\r\n            ),\r\n            priceImpact: new Decimal(maxFirstIn.data.priceImpact.add(outC.priceImpact).toFixed()),\r\n            fee: [maxFirstIn.data.fee[0], outC.fee[0]],\r\n            routeType: \"route\",\r\n            poolInfoList: [maxFirstIn.pool, iOutPool],\r\n            remainingAccounts: [maxFirstIn.data.remainingAccounts[0], outC.remainingAccounts[0]],\r\n            minMiddleAmountFee: outC.amountOut.fee?.raw\r\n              ? new TokenAmount(\r\n                  (maxFirstIn.data.amountOut.amount as TokenAmount).token,\r\n                  (maxFirstIn.data.amountOut.fee?.raw ?? ZERO).add(outC.amountOut.fee?.raw ?? ZERO),\r\n                )\r\n              : undefined,\r\n            middleToken: (maxFirstIn.data.amountOut.amount as TokenAmount).token,\r\n            poolReady: maxFirstIn.data.poolReady && outC.poolReady,\r\n            poolType: [maxFirstIn.data.poolType, outC.poolType],\r\n            feeConfig: _inFeeConfig,\r\n            expirationTime: minExpirationTime(maxFirstIn.data.expirationTime, outC.expirationTime),\r\n          });\r\n        } catch (e: any) {\r\n          this.logDebug(\"route out error\", iOutPool.version, iOutPool.id.toString(), e.message);\r\n          /* empty */\r\n        }\r\n      }\r\n    }\r\n\r\n    return outRoute\r\n      .filter((i) => {\r\n        if (!i.allTrade)\r\n          this.logDebug(`pool ${i.poolInfoList.map((p) => p.id.toString()).join(\",\")} filter out since not all trade`);\r\n        return i.allTrade;\r\n      })\r\n      .sort((a, b) => (a.amountOut.amount.raw.sub(b.amountOut.amount.raw).gt(ZERO) ? -1 : 1));\r\n  }\r\n\r\n  /** trade related utils */\r\n\r\n  private computeAmountOut({\r\n    itemPool,\r\n    tickCache,\r\n    simulateCache,\r\n    chainTime,\r\n    epochInfo,\r\n    slippage,\r\n    outputToken,\r\n    amountIn,\r\n  }: {\r\n    itemPool: ComputePoolType;\r\n    tickCache: ReturnTypeFetchMultiplePoolTickArrays;\r\n    simulateCache: ReturnTypeFetchMultipleInfo;\r\n    chainTime: number;\r\n    epochInfo: EpochInfo;\r\n    amountIn: TokenAmount;\r\n    outputToken: ApiV3Token;\r\n    slippage: number;\r\n  }): ComputeAmountOutAmmLayout {\r\n    if (itemPool.version === 6) {\r\n      const {\r\n        allTrade,\r\n        realAmountIn,\r\n        amountOut,\r\n        minAmountOut,\r\n        expirationTime,\r\n        currentPrice,\r\n        executionPrice,\r\n        priceImpact,\r\n        fee,\r\n        remainingAccounts,\r\n        executionPriceX64,\r\n      } = PoolUtils.computeAmountOutFormat({\r\n        poolInfo: itemPool,\r\n        tickArrayCache: tickCache[itemPool.id.toString()],\r\n        amountIn: amountIn.raw,\r\n        tokenOut: outputToken,\r\n        slippage,\r\n        epochInfo,\r\n        catchLiquidityInsufficient: true,\r\n      });\r\n      return {\r\n        allTrade,\r\n        amountIn: realAmountIn,\r\n        amountOut,\r\n        minAmountOut,\r\n        currentPrice: new Decimal(currentPrice.toFixed()),\r\n        executionPrice: new Decimal(executionPrice.toFixed()),\r\n        priceImpact: new Decimal(priceImpact.toFixed()),\r\n        fee: [fee],\r\n        remainingAccounts: [remainingAccounts],\r\n        routeType: \"amm\",\r\n        poolInfoList: [itemPool],\r\n        poolReady: itemPool.startTime < chainTime,\r\n        poolType: \"CLMM\",\r\n        slippage,\r\n        clmmExPriceX64: [executionPriceX64],\r\n        expirationTime: minExpirationTime(realAmountIn.expirationTime, expirationTime),\r\n      };\r\n    } else if (itemPool.version === 7) {\r\n      const { allTrade, executionPrice, amountOut, minAmountOut, priceImpact, fee } = this.scope.cpmm.computeSwapAmount(\r\n        {\r\n          pool: itemPool,\r\n          outputMint: outputToken.address,\r\n          amountIn: amountIn.raw,\r\n          slippage,\r\n        },\r\n      );\r\n\r\n      return {\r\n        allTrade,\r\n        amountIn: { amount: amountIn, fee: undefined, expirationTime: undefined },\r\n        amountOut: {\r\n          amount: toTokenAmount({\r\n            ...outputToken,\r\n            amount: amountOut,\r\n          }),\r\n          fee: undefined,\r\n          expirationTime: undefined,\r\n        },\r\n        minAmountOut: {\r\n          amount: toTokenAmount({\r\n            ...outputToken,\r\n            amount: minAmountOut,\r\n          }),\r\n          fee: undefined,\r\n          expirationTime: undefined,\r\n        },\r\n        currentPrice: itemPool.poolPrice,\r\n        executionPrice,\r\n        priceImpact,\r\n        fee: [new TokenAmount(amountIn.token, fee)],\r\n        remainingAccounts: [],\r\n        routeType: \"amm\",\r\n        poolInfoList: [itemPool],\r\n        poolReady: true,\r\n        poolType: \"CPMM\",\r\n        slippage,\r\n        clmmExPriceX64: [undefined],\r\n        expirationTime: undefined,\r\n      };\r\n    } else {\r\n      if (![1, 6, 7].includes(simulateCache[itemPool.id.toString()].status)) throw Error(\"swap error\");\r\n      const { amountOut, minAmountOut, currentPrice, executionPrice, priceImpact, fee } =\r\n        this.scope.liquidity.computeAmountOut({\r\n          poolInfo: simulateCache[itemPool.id.toString()],\r\n          amountIn: amountIn.raw,\r\n          mintIn: amountIn.token.mint,\r\n          mintOut: outputToken.address,\r\n          slippage,\r\n        });\r\n      return {\r\n        amountIn: { amount: amountIn, fee: undefined, expirationTime: undefined },\r\n        amountOut: {\r\n          amount: toTokenAmount({\r\n            ...outputToken,\r\n            amount: amountOut,\r\n          }),\r\n          fee: undefined,\r\n          expirationTime: undefined,\r\n        },\r\n        minAmountOut: {\r\n          amount: toTokenAmount({\r\n            ...outputToken,\r\n            amount: minAmountOut,\r\n          }),\r\n          fee: undefined,\r\n          expirationTime: undefined,\r\n        },\r\n        currentPrice,\r\n        executionPrice,\r\n        priceImpact,\r\n        fee: [new TokenAmount(amountIn.token, fee)],\r\n        routeType: \"amm\",\r\n        poolInfoList: [itemPool],\r\n        remainingAccounts: [],\r\n        poolReady: true,\r\n        poolType: itemPool.version === 5 ? \"STABLE\" : undefined,\r\n        expirationTime: undefined,\r\n        allTrade: true,\r\n        slippage,\r\n        clmmExPriceX64: [undefined],\r\n      };\r\n    }\r\n  }\r\n\r\n  public async computePoolToPoolKeys({\r\n    pools,\r\n    clmmRpcData = {},\r\n    ammRpcData = {},\r\n  }: {\r\n    pools: ComputePoolType[];\r\n    clmmRpcData?: Record<string, ClmmRpcData>;\r\n    ammRpcData?: Record<string, AmmRpcData>;\r\n  }): Promise<PoolKeys[]> {\r\n    const clmmFetchKeys = new Set(\r\n      pools.filter((p) => p.version === 6 && !clmmRpcData[p.id.toString()]).map((p) => p.id.toString()),\r\n    );\r\n    if (clmmFetchKeys.size > 0) {\r\n      const clmmData = await this.scope.clmm.getRpcClmmPoolInfos({ poolIds: Array.from(clmmFetchKeys) });\r\n      Object.keys(clmmData).forEach((poolId) => {\r\n        clmmRpcData[poolId] = clmmData[poolId];\r\n      });\r\n    }\r\n\r\n    const ammFetchKeys = new Set(\r\n      pools.filter((p) => p.version === 4 && !ammRpcData[p.id.toString()]).map((p) => p.id.toString()),\r\n    );\r\n    if (ammFetchKeys.size > 0) {\r\n      const ammData = await this.scope.liquidity.getRpcPoolInfos(Array.from(clmmFetchKeys));\r\n      Object.keys(ammData).forEach((poolId) => {\r\n        ammRpcData[poolId] = ammData[poolId];\r\n      });\r\n    }\r\n\r\n    const ammMarketFetchKeys = new Set(\r\n      pools.filter((p) => p.version === 4).map((p) => (p as ComputeAmountOutParam[\"poolInfo\"]).marketId),\r\n    );\r\n    const marketData: Record<\r\n      string,\r\n      {\r\n        marketProgramId: string;\r\n        marketId: string;\r\n        marketAuthority: string;\r\n        marketBaseVault: string;\r\n        marketQuoteVault: string;\r\n        marketBids: string;\r\n        marketAsks: string;\r\n        marketEventQueue: string;\r\n      }\r\n    > = {};\r\n    if (ammMarketFetchKeys.size > 0) {\r\n      const marketAccount = await getMultipleAccountsInfoWithCustomFlags(\r\n        this.scope.connection,\r\n        Array.from(ammMarketFetchKeys).map((p) => ({ pubkey: new PublicKey(p) })),\r\n      );\r\n      marketAccount.forEach((m) => {\r\n        if (!m.accountInfo) return;\r\n        const itemMarketInfo = MARKET_STATE_LAYOUT_V3.decode(m.accountInfo.data);\r\n        marketData[m.pubkey.toBase58()] = {\r\n          marketId: m.pubkey.toString(),\r\n          marketProgramId: m.accountInfo.owner.toString(),\r\n          marketAuthority: Market.getAssociatedAuthority({\r\n            programId: m.accountInfo.owner,\r\n            marketId: m.pubkey,\r\n          }).publicKey.toString(),\r\n          marketBaseVault: itemMarketInfo.baseVault.toString(),\r\n          marketQuoteVault: itemMarketInfo.quoteVault.toString(),\r\n          marketBids: itemMarketInfo.bids.toString(),\r\n          marketAsks: itemMarketInfo.asks.toString(),\r\n          marketEventQueue: itemMarketInfo.eventQueue.toString(),\r\n        };\r\n      });\r\n    }\r\n\r\n    const poolKeys: PoolKeys[] = [];\r\n    pools.forEach((pool) => {\r\n      if (pool.version === 6) {\r\n        const rpcInfo = clmmRpcData[pool.id.toString()];\r\n        const clmmKeys: ClmmKeys = {\r\n          programId: pool.programId.toBase58(),\r\n          id: pool.id.toBase58(),\r\n          mintA: pool.mintA,\r\n          mintB: pool.mintB,\r\n          vault: {\r\n            A: rpcInfo.vaultA.toBase58(),\r\n            B: rpcInfo.vaultB.toBase58(),\r\n          },\r\n          config: {\r\n            ...pool.ammConfig,\r\n            id: pool.ammConfig.id.toString(),\r\n            defaultRange: 0,\r\n            defaultRangePoint: [],\r\n          },\r\n          rewardInfos: [],\r\n        };\r\n        poolKeys.push(clmmKeys);\r\n      } else if (pool.version === 4) {\r\n        const rpcInfo = ammRpcData[pool.id.toString()];\r\n        const ammKeys: AmmV4Keys = {\r\n          programId: pool.programId,\r\n          id: pool.id,\r\n          mintA: pool.mintA,\r\n          mintB: pool.mintB,\r\n          vault: {\r\n            A: rpcInfo.baseVault.toBase58(),\r\n            B: rpcInfo.quoteVault.toBase58(),\r\n          },\r\n          authority: getLiquidityAssociatedAuthority({ programId: new PublicKey(pool.programId) }).publicKey.toString(),\r\n          openOrders: rpcInfo.openOrders.toBase58(),\r\n          targetOrders: rpcInfo.targetOrders.toBase58(),\r\n          mintLp: pool.lpMint,\r\n          ...marketData[pool.marketId],\r\n        };\r\n        poolKeys.push(ammKeys);\r\n      } else if (pool.version === 7) {\r\n        poolKeys.push({\r\n          programId: pool.programId.toBase58(),\r\n          id: pool.id.toBase58(),\r\n          mintA: pool.mintA,\r\n          mintB: pool.mintB,\r\n          authority: getPdaPoolAuthority(pool.programId).publicKey.toBase58(),\r\n          vault: {\r\n            A: pool.vaultA.toBase58(),\r\n            B: pool.vaultB.toBase58(),\r\n          },\r\n          mintLp: toApiV3Token({\r\n            address: pool.mintLp.toBase58(),\r\n            programId: TOKEN_PROGRAM_ID.toBase58(),\r\n            decimals: pool.lpDecimals,\r\n          }),\r\n          config: {\r\n            id: pool.configId.toBase58(),\r\n            ...pool.configInfo,\r\n            protocolFeeRate: pool.configInfo.protocolFeeRate.toNumber(),\r\n            tradeFeeRate: pool.configInfo.tradeFeeRate.toNumber(),\r\n            fundFeeRate: pool.configInfo.fundFeeRate.toNumber(),\r\n            createPoolFee: pool.configInfo.createPoolFee.toString(),\r\n          },\r\n        });\r\n      }\r\n    });\r\n    return poolKeys;\r\n  }\r\n}\r\n","import { TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { PublicKey, TransactionInstruction, SystemProgram } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\n\r\nimport {\r\n  ClmmInstrument,\r\n  ONE,\r\n  MIN_SQRT_PRICE_X64,\r\n  MAX_SQRT_PRICE_X64,\r\n  MIN_SQRT_PRICE_X64_ADD_ONE,\r\n  MAX_SQRT_PRICE_X64_SUB_ONE,\r\n  getPdaExBitmapAccount,\r\n} from \"../clmm\";\r\nimport {\r\n  InstructionType,\r\n  jsonInfo2PoolKeys,\r\n  MEMO_PROGRAM_ID,\r\n  MEMO_PROGRAM_ID2,\r\n  LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL,\r\n  accountMeta,\r\n} from \"@/common\";\r\nimport { struct, u64, u8, seq, u128 } from \"@/marshmallow\";\r\nimport { makeAMMSwapInstruction } from \"../liquidity/instruction\";\r\n\r\nimport { ApiV3PoolInfoItem, PoolKeys, ClmmKeys, AmmV4Keys, AmmV5Keys, CpmmKeys } from \"@/api/type\";\r\nimport { ComputePoolType, MakeSwapInstructionParam, ReturnTypeMakeSwapInstruction } from \"./type\";\r\nimport { makeSwapCpmmBaseInInInstruction, makeSwapCpmmBaseOutInInstruction } from \"@/raydium/cpmm\";\r\n\r\nexport function route1Instruction(\r\n  programId: PublicKey,\r\n  poolInfoA: ApiV3PoolInfoItem,\r\n  poolKeyA: PoolKeys,\r\n  poolKeyB: PoolKeys,\r\n\r\n  userSourceToken: PublicKey,\r\n  userRouteToken: PublicKey,\r\n  // userDestinationToken: PublicKey,\r\n  userPdaAccount: PublicKey,\r\n  ownerWallet: PublicKey,\r\n\r\n  inputMint: PublicKey,\r\n\r\n  amountIn: BN,\r\n  amountOut: BN,\r\n\r\n  tickArrayA?: PublicKey[],\r\n  // tickArrayB?: PublicKey[],\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"instruction\"), u64(\"amountIn\"), u64(\"amountOut\")]);\r\n\r\n  const keys: { pubkey: PublicKey; isSigner: boolean; isWritable: boolean }[] = [\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: new PublicKey(poolKeyA.programId), isSigner: false, isWritable: false },\r\n    { pubkey: new PublicKey(poolKeyA.id), isSigner: false, isWritable: true },\r\n    { pubkey: new PublicKey(poolKeyB.id), isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userSourceToken, isSigner: false, isWritable: true },\r\n    { pubkey: userRouteToken, isSigner: false, isWritable: true },\r\n    { pubkey: userPdaAccount, isSigner: false, isWritable: true },\r\n    { pubkey: ownerWallet, isSigner: true, isWritable: false },\r\n  ];\r\n\r\n  if (poolInfoA.type === \"Concentrated\") {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as ClmmKeys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        {\r\n          pubkey: poolKey.mintA.address.equals(inputMint) ? poolKey.vault.A : poolKey.vault.B,\r\n          isSigner: false,\r\n          isWritable: true,\r\n        },\r\n        {\r\n          pubkey: poolKey.mintA.address.equals(inputMint) ? poolKey.vault.B : poolKey.vault.A,\r\n          isSigner: false,\r\n          isWritable: true,\r\n        },\r\n        // { pubkey: poolKey.observationId, isSigner: false, isWritable: true }, // to do\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        ...tickArrayA!.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n      ],\r\n    );\r\n  } else if (poolInfoA.pooltype.includes(\"StablePool\")) {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as AmmV5Keys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      ],\r\n    );\r\n  } else {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyA as AmmV4Keys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n        ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\r\n          ? [\r\n              { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\r\n              { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\r\n            ]\r\n          : [\r\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n            ]),\r\n      ],\r\n    );\r\n  }\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      instruction: 4,\r\n      amountIn,\r\n      amountOut,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\nexport function route2Instruction(\r\n  programId: PublicKey,\r\n  poolInfoB: ApiV3PoolInfoItem,\r\n  poolKeyA: PoolKeys,\r\n  poolKeyB: PoolKeys,\r\n\r\n  // userSourceToken: PublicKey,\r\n  userRouteToken: PublicKey,\r\n  userDestinationToken: PublicKey,\r\n  userPdaAccount: PublicKey,\r\n  ownerWallet: PublicKey,\r\n\r\n  routeMint: PublicKey,\r\n\r\n  // tickArrayA?: PublicKey[],\r\n  tickArrayB?: PublicKey[],\r\n): TransactionInstruction {\r\n  const dataLayout = struct([u8(\"instruction\")]);\r\n\r\n  const keys: { pubkey: PublicKey; isSigner: boolean; isWritable: boolean }[] = [\r\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: new PublicKey(String(poolKeyB.programId)), isSigner: false, isWritable: false },\r\n    { pubkey: new PublicKey(String(poolKeyB.id)), isSigner: false, isWritable: true },\r\n    { pubkey: new PublicKey(String(poolKeyA.id)), isSigner: false, isWritable: true },\r\n\r\n    { pubkey: userRouteToken, isSigner: false, isWritable: true },\r\n    { pubkey: userDestinationToken, isSigner: false, isWritable: true },\r\n    { pubkey: userPdaAccount, isSigner: false, isWritable: true },\r\n    { pubkey: ownerWallet, isSigner: true, isWritable: false },\r\n  ];\r\n\r\n  if (poolInfoB.type === \"Concentrated\") {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as ClmmKeys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        {\r\n          pubkey: poolKey.mintA.address.equals(routeMint) ? poolKey.vault.A : poolKey.vault.B,\r\n          isSigner: false,\r\n          isWritable: true,\r\n        },\r\n        {\r\n          pubkey: poolKey.mintA.address.equals(routeMint) ? poolKey.vault.B : poolKey.vault.A,\r\n          isSigner: false,\r\n          isWritable: true,\r\n        },\r\n        // { pubkey: poolKey.observationId, isSigner: false, isWritable: true }, // to do\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        ...tickArrayB!.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n      ],\r\n    );\r\n  } else if (poolInfoB.pooltype.includes(\"StablePool\")) {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as AmmV5Keys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      ],\r\n    );\r\n  } else {\r\n    const poolKey = jsonInfo2PoolKeys(poolKeyB as AmmV4Keys);\r\n    keys.push(\r\n      ...[\r\n        { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: false },\r\n        { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n        { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n        ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\r\n          ? [\r\n              { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\r\n              { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\r\n            ]\r\n          : [\r\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n              { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n            ]),\r\n      ],\r\n    );\r\n  }\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      instruction: 5,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\n/*\r\nfunction makeInnerInsKey(\r\n  itemPool: ComputePoolType,\r\n  itemPoolKey: PoolKeys,\r\n  inMint: string,\r\n  userInAccount: PublicKey,\r\n  userOutAccount: PublicKey,\r\n  remainingAccount: PublicKey[] | undefined,\r\n): AccountMeta[] {\r\n  if (itemPool.version === 4) {\r\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as AmmV4Keys);\r\n\r\n    return [\r\n      { pubkey: poolKey.programId, isSigner: false, isWritable: false },\r\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\r\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.marketAuthority, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n      ...(poolKey.marketProgramId.toString() === \"srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX\"\r\n        ? [\r\n            { pubkey: poolKey.marketBaseVault, isSigner: false, isWritable: true },\r\n            { pubkey: poolKey.marketQuoteVault, isSigner: false, isWritable: true },\r\n          ]\r\n        : [\r\n            { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n            { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n          ]),\r\n    ];\r\n  } else if (itemPool.version === 5) {\r\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as AmmV4Keys);\r\n\r\n    return [\r\n      { pubkey: poolKey.programId, isSigner: false, isWritable: false },\r\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\r\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\r\n\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.authority, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.marketProgramId, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(\"CDSr3ssLcRB6XYPJwAfFt18MZvEZp4LjHcvzBVZ45duo\"), isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.openOrders, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.vault.A, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.vault.B, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketId, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketBids, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketAsks, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.marketEventQueue, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n    ];\r\n  } else if (itemPool.version === 6) {\r\n    const pool = itemPool;\r\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as ClmmKeys);\r\n    const baseIn = pool.mintA.address === inMint;\r\n    return [\r\n      { pubkey: new PublicKey(String(itemPool.programId)), isSigner: false, isWritable: false },\r\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\r\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: baseIn ? poolKey.vault.A : poolKey.vault.B, isSigner: false, isWritable: true },\r\n      { pubkey: baseIn ? poolKey.vault.B : poolKey.vault.A, isSigner: false, isWritable: true },\r\n      { pubkey: itemPool.observationId, isSigner: false, isWritable: true },\r\n      ...(poolKey.mintA.programId.equals(TOKEN_2022_PROGRAM_ID) || poolKey.mintB.programId.equals(TOKEN_2022_PROGRAM_ID)\r\n        ? [\r\n            { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n            { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n            { pubkey: baseIn ? poolKey.mintA.address : poolKey.mintB.address, isSigner: false, isWritable: false },\r\n            { pubkey: baseIn ? poolKey.mintB.address : poolKey.mintA.address, isSigner: false, isWritable: false },\r\n          ]\r\n        : []),\r\n      ...(remainingAccount ?? []).map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n      {\r\n        pubkey: getPdaExBitmapAccount(new PublicKey(String(itemPool.programId)), new PublicKey(itemPool.id)).publicKey,\r\n        isSigner: false,\r\n        isWritable: true,\r\n      },\r\n    ];\r\n  } else if (itemPool.version === 7) {\r\n    const pool = itemPool;\r\n    const poolKey = jsonInfo2PoolKeys(itemPoolKey as CpmmKeys);\r\n    const baseIn = pool.mintA.address === inMint;\r\n    return [\r\n      { pubkey: new PublicKey(String(itemPool.programId)), isSigner: false, isWritable: false },\r\n      { pubkey: userInAccount, isSigner: false, isWritable: true },\r\n      { pubkey: userOutAccount, isSigner: false, isWritable: true },\r\n      { pubkey: poolKey.config.id, isSigner: false, isWritable: false },\r\n      { pubkey: poolKey.id, isSigner: false, isWritable: true },\r\n      { pubkey: baseIn ? poolKey.vault.A : poolKey.vault.B, isSigner: false, isWritable: true },\r\n      { pubkey: baseIn ? poolKey.vault.B : poolKey.vault.A, isSigner: false, isWritable: true },\r\n      { pubkey: itemPool.observationId, isSigner: false, isWritable: true },\r\n      ...(poolKey.mintA.programId.equals(TOKEN_2022_PROGRAM_ID) || poolKey.mintB.programId.equals(TOKEN_2022_PROGRAM_ID)\r\n        ? [\r\n            { pubkey: TOKEN_2022_PROGRAM_ID, isSigner: false, isWritable: false },\r\n            { pubkey: MEMO_PROGRAM_ID, isSigner: false, isWritable: false },\r\n            { pubkey: baseIn ? poolKey.mintA.address : poolKey.mintB.address, isSigner: false, isWritable: false },\r\n            { pubkey: baseIn ? poolKey.mintB.address : poolKey.mintA.address, isSigner: false, isWritable: false },\r\n          ]\r\n        : []),\r\n      ...(remainingAccount ?? []).map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n      {\r\n        pubkey: getPdaExBitmapAccount(new PublicKey(String(itemPool.programId)), new PublicKey(itemPool.id)).publicKey,\r\n        isSigner: false,\r\n        isWritable: true,\r\n      },\r\n    ];\r\n  } else {\r\n    throw Error(\"make swap ins error\");\r\n  }\r\n}\r\n*/\r\n\r\nexport function routeInstruction(\r\n  programId: PublicKey,\r\n  wallet: PublicKey,\r\n\r\n  userSourceToken: PublicKey,\r\n  userRouteToken: PublicKey,\r\n  userDestinationToken: PublicKey,\r\n\r\n  inputMint: string,\r\n  routeMint: string,\r\n  outputMint: string,\r\n\r\n  poolInfoA: ComputePoolType,\r\n  poolInfoB: ComputePoolType,\r\n\r\n  poolKeyA: PoolKeys,\r\n  poolKeyB: PoolKeys,\r\n\r\n  amountIn: BN,\r\n  amountOut: BN,\r\n\r\n  remainingAccounts: (PublicKey[] | undefined)[],\r\n): TransactionInstruction {\r\n  const clmmPriceLimit: BN[] = [];\r\n  const keys = [\r\n    accountMeta({ pubkey: TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: TOKEN_2022_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: ASSOCIATED_TOKEN_PROGRAM_ID, isWritable: false }),\r\n    accountMeta({ pubkey: SystemProgram.programId, isWritable: false }),\r\n    accountMeta({ pubkey: wallet, isSigner: true }),\r\n  ];\r\n\r\n  keys.push(accountMeta({ pubkey: userSourceToken }));\r\n  keys.push(accountMeta({ pubkey: userDestinationToken }));\r\n\r\n  const poolInfos = [poolInfoA, poolInfoB];\r\n  const poolKeys = [poolKeyA, poolKeyB];\r\n  const routeMints = [inputMint, routeMint, outputMint];\r\n\r\n  for (let index = 0; index < poolInfos.length; index++) {\r\n    const _poolInfo = poolInfos[index];\r\n    const inputIsA = routeMints[index] === _poolInfo.mintA.address;\r\n    keys.push(accountMeta({ pubkey: new PublicKey(_poolInfo.programId), isWritable: false }));\r\n    if (index === poolInfos.length - 1) {\r\n      keys.push(accountMeta({ pubkey: userDestinationToken }));\r\n    } else {\r\n      keys.push(accountMeta({ pubkey: userRouteToken }));\r\n    }\r\n    keys.push(accountMeta({ pubkey: new PublicKey(routeMints[index]) }));\r\n    keys.push(accountMeta({ pubkey: new PublicKey(routeMints[index + 1]) }));\r\n    if (_poolInfo.version === 6) {\r\n      const _poolKey = poolKeys[index] as ClmmKeys;\r\n\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.config.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.A : _poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.B : _poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolInfo.observationId) })); //todo\r\n      keys.push(accountMeta({ pubkey: MEMO_PROGRAM_ID2 }));\r\n      keys.push(\r\n        accountMeta({\r\n          pubkey: getPdaExBitmapAccount(new PublicKey(_poolInfo.programId), new PublicKey(_poolInfo.id)).publicKey,\r\n        }),\r\n      );\r\n      clmmPriceLimit.push(clmmPriceLimitX64InsData(_poolInfo.sqrtPriceX64.toString(), inputIsA));\r\n      for (const item of remainingAccounts[index] ?? []) {\r\n        keys.push(accountMeta({ pubkey: new PublicKey(item) }));\r\n      }\r\n    } else if (_poolInfo.version === 5) {\r\n      const _poolKey = poolKeys[index] as AmmV5Keys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.authority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketProgramId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketAuthority) }));\r\n      keys.push(accountMeta({ pubkey: LIQUIDITY_POOL_PROGRAM_ID_V5_MODEL, isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.openOrders) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketBids) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketAsks) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketEventQueue) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketBaseVault) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.marketQuoteVault) }));\r\n    } else if (_poolInfo.version === 4) {\r\n      const _poolKey = poolKeys[index] as AmmV4Keys;\r\n      const isSupportIdOnly = _poolInfo.status !== 1;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.authority), isWritable: false }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketProgramId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketAuthority) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.openOrders) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketId) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketBids) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketAsks) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketEventQueue) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketBaseVault) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(isSupportIdOnly ? _poolKey.id : _poolKey.marketQuoteVault) }));\r\n    } else if (_poolInfo.version === 7) {\r\n      const _poolKey = poolKeys[index] as CpmmKeys;\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.authority) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.config.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolKey.id) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.A : _poolKey.vault.B) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(inputIsA ? _poolKey.vault.B : _poolKey.vault.A) }));\r\n      keys.push(accountMeta({ pubkey: new PublicKey(_poolInfo.observationId) }));\r\n    } else throw Error(\"pool type error\");\r\n  }\r\n\r\n  const dataLayout = struct([\r\n    u8(\"insId\"),\r\n    u64(\"amountIn\"),\r\n    u64(\"amountOut\"),\r\n    seq(u128(), clmmPriceLimit.length, \"clmmPriceLimit\"),\r\n  ]);\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      insId: 0,\r\n      amountIn,\r\n      amountOut,\r\n      clmmPriceLimit,\r\n    },\r\n    data,\r\n  );\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\nfunction clmmPriceLimitX64InsData(x64Price: string | undefined, inputIsA: boolean): BN {\r\n  if (x64Price) {\r\n    if (inputIsA) {\r\n      const _m = new BN(x64Price).div(new BN(25));\r\n      return _m.gt(MIN_SQRT_PRICE_X64_ADD_ONE) ? _m : MIN_SQRT_PRICE_X64_ADD_ONE;\r\n    } else {\r\n      const _m = new BN(x64Price).mul(new BN(25));\r\n      return _m.lt(MAX_SQRT_PRICE_X64_SUB_ONE) ? _m : MAX_SQRT_PRICE_X64_SUB_ONE;\r\n    }\r\n  } else {\r\n    return inputIsA ? MIN_SQRT_PRICE_X64_ADD_ONE : MAX_SQRT_PRICE_X64_SUB_ONE;\r\n  }\r\n}\r\n\r\nexport function makeSwapInstruction({\r\n  routeProgram,\r\n  ownerInfo,\r\n  inputMint,\r\n  swapInfo,\r\n}: MakeSwapInstructionParam): ReturnTypeMakeSwapInstruction {\r\n  if (swapInfo.routeType === \"amm\") {\r\n    if (swapInfo.poolInfo[0].version === 6) {\r\n      const poolKeys = swapInfo.poolKey[0] as ClmmKeys;\r\n      const _poolKey = jsonInfo2PoolKeys(poolKeys);\r\n      const sqrtPriceLimitX64 = inputMint.equals(_poolKey.mintA.address)\r\n        ? MIN_SQRT_PRICE_X64.add(ONE)\r\n        : MAX_SQRT_PRICE_X64.sub(ONE);\r\n\r\n      return ClmmInstrument.makeSwapBaseInInstructions({\r\n        poolInfo: poolKeys,\r\n        poolKeys,\r\n        observationId: swapInfo.poolInfo[0].observationId,\r\n        ownerInfo: {\r\n          wallet: ownerInfo.wallet,\r\n          tokenAccountA: _poolKey.mintA.address.equals(inputMint) ? ownerInfo.sourceToken : ownerInfo.destinationToken,\r\n          tokenAccountB: _poolKey.mintA.address.equals(inputMint) ? ownerInfo.destinationToken : ownerInfo.sourceToken,\r\n        },\r\n        inputMint,\r\n        amountIn: swapInfo.amountIn.amount.raw,\r\n        amountOutMin: swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\r\n        sqrtPriceLimitX64,\r\n        remainingAccounts: swapInfo.remainingAccounts[0] ?? [],\r\n      });\r\n    } else if (swapInfo.poolInfo[0].version === 7) {\r\n      const poolInfo = swapInfo.poolInfo[0];\r\n      const baseIn = inputMint.toString() === swapInfo.poolInfo[0].mintA.address;\r\n\r\n      return {\r\n        signers: [],\r\n        instructions: [\r\n          makeSwapCpmmBaseInInInstruction(\r\n            poolInfo.programId,\r\n            ownerInfo.wallet,\r\n            poolInfo.authority,\r\n            poolInfo.configId,\r\n            poolInfo.id,\r\n            ownerInfo.sourceToken!,\r\n            ownerInfo.destinationToken!,\r\n            baseIn ? poolInfo.vaultA : poolInfo.vaultB,\r\n            baseIn ? poolInfo.vaultB : poolInfo.vaultA,\r\n            baseIn ? poolInfo.mintProgramA : poolInfo.mintProgramB,\r\n            baseIn ? poolInfo.mintProgramB : poolInfo.mintProgramA,\r\n            new PublicKey(poolInfo[baseIn ? \"mintA\" : \"mintB\"].address),\r\n            new PublicKey(poolInfo[baseIn ? \"mintB\" : \"mintA\"].address),\r\n            poolInfo.observationId,\r\n\r\n            swapInfo.amountIn.amount.raw,\r\n            swapInfo.minAmountOut.amount.raw,\r\n          ),\r\n        ],\r\n        lookupTableAddress: [],\r\n        instructionTypes: [baseIn ? InstructionType.CpmmSwapBaseIn : InstructionType.CpmmSwapBaseOut],\r\n        address: {},\r\n      };\r\n    } else {\r\n      const _poolKey = swapInfo.poolKey[0] as AmmV4Keys | AmmV5Keys;\r\n\r\n      return {\r\n        signers: [],\r\n        instructions: [\r\n          makeAMMSwapInstruction({\r\n            poolKeys: _poolKey,\r\n            version: swapInfo.poolInfo[0].pooltype.includes(\"StablePool\") ? 5 : 4,\r\n            userKeys: {\r\n              tokenAccountIn: ownerInfo.sourceToken,\r\n              tokenAccountOut: ownerInfo.destinationToken,\r\n              owner: ownerInfo.wallet,\r\n            },\r\n            amountIn: swapInfo.amountIn.amount.raw,\r\n            amountOut: swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\r\n            fixedSide: \"in\",\r\n          }),\r\n        ],\r\n        lookupTableAddress: _poolKey.lookupTableAccount ? [_poolKey.lookupTableAccount] : [],\r\n        instructionTypes: [\r\n          swapInfo.poolInfo[0].pooltype.includes(\"StablePool\")\r\n            ? InstructionType.AmmV5SwapBaseIn\r\n            : InstructionType.AmmV4SwapBaseIn,\r\n        ],\r\n        address: {},\r\n      };\r\n    }\r\n  } else if (swapInfo.routeType === \"route\") {\r\n    const poolInfo1 = swapInfo.poolInfo[0];\r\n    const poolInfo2 = swapInfo.poolInfo[1];\r\n    const poolKey1 = swapInfo.poolKey[0];\r\n    const poolKey2 = swapInfo.poolKey[1];\r\n\r\n    if (ownerInfo.routeToken === undefined) throw Error(\"owner route token account check error\");\r\n\r\n    return {\r\n      signers: [],\r\n      instructions: [\r\n        routeInstruction(\r\n          routeProgram,\r\n          ownerInfo.wallet,\r\n          ownerInfo.sourceToken,\r\n          ownerInfo.routeToken,\r\n          ownerInfo.destinationToken,\r\n\r\n          inputMint.toString(),\r\n          swapInfo.middleToken.mint.toString(),\r\n          swapInfo.outputMint.toString(),\r\n\r\n          poolInfo1,\r\n          poolInfo2,\r\n          poolKey1,\r\n          poolKey2,\r\n\r\n          swapInfo.amountIn.amount.raw,\r\n          swapInfo.minAmountOut.amount.raw.sub(swapInfo.minAmountOut.fee?.raw ?? new BN(0)),\r\n\r\n          swapInfo.remainingAccounts,\r\n        ),\r\n      ],\r\n      instructionTypes: [InstructionType.RouteSwap],\r\n      lookupTableAddress: [poolKey1.lookupTableAccount, poolKey2.lookupTableAccount].filter(\r\n        (a) => a !== undefined,\r\n      ) as string[],\r\n      address: {},\r\n    };\r\n  } else {\r\n    throw Error(\"route type error\");\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { SERUM_PROGRAM_ID_V3 } from \"@/common/programId\";\r\nimport { SerumVersion } from \"./type\";\r\n\r\n// serum program id string => serum version\r\nexport const SERUM_PROGRAMID_TO_VERSION: {\r\n  [key: string]: SerumVersion;\r\n} = {\r\n  [SERUM_PROGRAM_ID_V3.toBase58()]: 3,\r\n};\r\n\r\n// serum version => serum program id\r\nexport const SERUM_VERSION_TO_PROGRAMID: { [key in SerumVersion]?: PublicKey } & {\r\n  [K: number]: PublicKey;\r\n} = {\r\n  3: SERUM_PROGRAM_ID_V3,\r\n};\r\n","import { blob, GetStructureSchema, publicKey, struct, u64 } from \"@/marshmallow\";\r\n\r\n/* ================= state layouts ================= */\r\nexport const MARKET_STATE_LAYOUT_V3 = struct([\r\n  blob(5),\r\n\r\n  blob(8), // accountFlagsLayout('accountFlags'),\r\n\r\n  publicKey(\"ownAddress\"),\r\n\r\n  u64(\"vaultSignerNonce\"),\r\n\r\n  publicKey(\"baseMint\"),\r\n  publicKey(\"quoteMint\"),\r\n\r\n  publicKey(\"baseVault\"),\r\n  u64(\"baseDepositsTotal\"),\r\n  u64(\"baseFeesAccrued\"),\r\n\r\n  publicKey(\"quoteVault\"),\r\n  u64(\"quoteDepositsTotal\"),\r\n  u64(\"quoteFeesAccrued\"),\r\n\r\n  u64(\"quoteDustThreshold\"),\r\n\r\n  publicKey(\"requestQueue\"),\r\n  publicKey(\"eventQueue\"),\r\n\r\n  publicKey(\"bids\"),\r\n  publicKey(\"asks\"),\r\n\r\n  u64(\"baseLotSize\"),\r\n  u64(\"quoteLotSize\"),\r\n\r\n  u64(\"feeRateBps\"),\r\n\r\n  u64(\"referrerRebatesAccrued\"),\r\n\r\n  blob(7),\r\n]);\r\n\r\nexport type MarketStateLayoutV3 = typeof MARKET_STATE_LAYOUT_V3;\r\nexport type MarketStateLayout = MarketStateLayoutV3;\r\n\r\nexport type MarketStateV3 = GetStructureSchema<MarketStateLayoutV3>;\r\nexport type MarketState = MarketStateV3;\r\n\r\n/* ================= index ================= */\r\n// version => market state layout\r\nexport const MARKET_VERSION_TO_STATE_LAYOUT: {\r\n  [version: number]: MarketStateLayout;\r\n} = {\r\n  3: MARKET_STATE_LAYOUT_V3,\r\n};\r\n","import { PublicKey } from \"@solana/web3.js\";\r\n\r\nimport { createLogger } from \"@/common/logger\";\r\n\r\nimport { SERUM_PROGRAMID_TO_VERSION, SERUM_VERSION_TO_PROGRAMID } from \"./id\";\r\nimport { MARKET_VERSION_TO_STATE_LAYOUT, MarketStateLayout } from \"./layout\";\r\n\r\nconst logger = createLogger(\"Serum\");\r\n\r\nexport class Market {\r\n  /* ================= get version and program id ================= */\r\n  static getProgramId(version: number): PublicKey {\r\n    const programId = SERUM_VERSION_TO_PROGRAMID[version];\r\n    if (!programId) logger.logWithError(\"invalid version\", \"version\", version);\r\n\r\n    return programId;\r\n  }\r\n\r\n  static getVersion(programId: PublicKey): number {\r\n    const programIdString = programId.toBase58();\r\n\r\n    const version = SERUM_PROGRAMID_TO_VERSION[programIdString];\r\n    if (!version) logger.logWithError(\"invalid program id\", \"programId\", programIdString);\r\n\r\n    return version;\r\n  }\r\n\r\n  /* ================= get layout ================= */\r\n  static getStateLayout(version: number): MarketStateLayout {\r\n    const STATE_LAYOUT = MARKET_VERSION_TO_STATE_LAYOUT[version];\r\n    if (!STATE_LAYOUT) logger.logWithError(!!STATE_LAYOUT, \"invalid version\", \"version\", version);\r\n\r\n    return STATE_LAYOUT;\r\n  }\r\n\r\n  static getLayouts(version: number): { state: MarketStateLayout } {\r\n    return { state: this.getStateLayout(version) };\r\n  }\r\n\r\n  /* ================= get key ================= */\r\n  static getAssociatedAuthority({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }): {\r\n    publicKey: PublicKey;\r\n    nonce: number;\r\n  } {\r\n    const seeds = [marketId.toBuffer()];\r\n\r\n    let nonce = 0;\r\n    let publicKey: PublicKey;\r\n\r\n    while (nonce < 100) {\r\n      try {\r\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]), Buffer.alloc(7));\r\n        publicKey = PublicKey.createProgramAddressSync(seedsWithNonce, programId);\r\n      } catch (err) {\r\n        if (err instanceof TypeError) {\r\n          throw err;\r\n        }\r\n        nonce++;\r\n        continue;\r\n      }\r\n      return { publicKey, nonce };\r\n    }\r\n\r\n    logger.logWithError(\"unable to find a viable program address nonce\", \"params\", {\r\n      programId,\r\n      marketId,\r\n    });\r\n\r\n    return { publicKey: PublicKey.default, nonce };\r\n  }\r\n}\r\n","import { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { Connection, PublicKey, Signer, Transaction, TransactionInstruction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport ModuleBase from \"../moduleBase\";\r\nimport { findProgramAddress, forecastTransactionSize, getMultipleAccountsInfo } from \"@/common\";\r\nimport { Token } from \"@/module\";\r\nimport { blob, publicKey, seq, struct, u64, u8 } from \"@/marshmallow\";\r\n\r\nexport interface SHOW_INFO {\r\n  programId: PublicKey;\r\n  poolId: PublicKey;\r\n  ammId: PublicKey;\r\n  ownerAccountId: PublicKey;\r\n  snapshotLpAmount: BN;\r\n\r\n  openTime: number;\r\n  endTime: number;\r\n\r\n  project: typeof Utils1216.VERSION_PROJECT[number];\r\n\r\n  canClaim: boolean;\r\n  canClaimErrorType: canClaimErrorType;\r\n\r\n  tokenInfo: {\r\n    mintAddress: PublicKey;\r\n    mintVault: PublicKey;\r\n    mintDecimals: number;\r\n    perLpLoss: BN;\r\n    debtAmount: BN;\r\n  }[];\r\n}\r\n\r\nexport type canClaimErrorType = \"outOfOperationalTime\" | \"alreadyClaimIt\" | undefined;\r\n\r\nexport default class Utils1216 extends ModuleBase {\r\n  static CLAIMED_NUM = 3;\r\n  static POOL_LAYOUT = struct([\r\n    blob(8),\r\n    u8(\"bump\"),\r\n    u8(\"status\"),\r\n    u64(\"openTime\"),\r\n    u64(\"endTime\"),\r\n    publicKey(\"ammId\"),\r\n\r\n    seq(\r\n      struct([\r\n        u8(\"mintDecimals\"),\r\n        publicKey(\"mintAddress\"),\r\n        publicKey(\"mintVault\"),\r\n        u64(\"perLpLoss\"),\r\n        u64(\"totalClaimedAmount\"),\r\n      ]),\r\n      Utils1216.CLAIMED_NUM,\r\n      \"tokenInfo\",\r\n    ),\r\n    seq(u64(), 10, \"padding\"),\r\n  ]);\r\n\r\n  static OWNER_LAYOUT = struct([\r\n    blob(8),\r\n    u8(\"bump\"),\r\n    u8(\"version\"),\r\n    publicKey(\"poolId\"),\r\n    publicKey(\"owner\"),\r\n    u64(\"lpAmount\"),\r\n\r\n    seq(\r\n      struct([publicKey(\"mintAddress\"), u64(\"debtAmount\"), u64(\"claimedAmount\")]),\r\n      Utils1216.CLAIMED_NUM,\r\n      \"tokenInfo\",\r\n    ),\r\n    seq(u64(), 4, \"padding\"),\r\n  ]);\r\n\r\n  static DEFAULT_POOL_ID = [\r\n    \"58oQChx4yWmvKdwLLZzBi4ChoCc2fqCUWBkwMihLYQo2\",\r\n    \"6UmmUiYoBjSrhakAobJw8BvkmJtDVxaeBtbt7rxWo1mg\",\r\n    \"AVs9TA4nWDzfPJE9gGVNJMVhcQy3V9PGazuz33BfG2RA\",\r\n    \"DVa7Qmb5ct9RCpaU7UTpSaf3GVMYz17vNVU67XpdCRut\",\r\n    \"7XawhbbxtsRcQA8KTkHT9f9nc6d69UwqCDh6U5EEbEmX\",\r\n    \"6a1CsrpeZubDjEJE9s1CMVheB6HWM5d7m1cj2jkhyXhj\",\r\n    \"EoNrn8iUhwgJySD1pHu8Qxm5gSQqLK3za4m8xzD2RuEb\",\r\n    \"AceAyRTWt4PyB2pHqf2qhDgNZDtKVNaxgL8Ru3V4aN1P\",\r\n    \"6tmFJbMk5yVHFcFy7X2K8RwHjKLr6KVFLYXpgpBNeAxB\",\r\n  ].map((i) => new PublicKey(i));\r\n\r\n  static SEED_CONFIG = {\r\n    pool: {\r\n      id: Buffer.from(\"pool_seed\", \"utf8\"),\r\n    },\r\n    owner: {\r\n      id: Buffer.from(\"user_claim_seed\", \"utf8\"),\r\n    },\r\n  };\r\n\r\n  static VERSION_PROJECT = [undefined, \"Francium\", \"Tulip\", \"Larix\"] as const;\r\n\r\n  // pda\r\n  static getPdaPoolId(\r\n    programId: PublicKey,\r\n    ammId: PublicKey,\r\n  ): {\r\n    publicKey: PublicKey;\r\n    nonce: number;\r\n  } {\r\n    return findProgramAddress([Utils1216.SEED_CONFIG.pool.id, ammId.toBuffer()], programId);\r\n  }\r\n\r\n  static getPdaOwnerId(\r\n    programId: PublicKey,\r\n    poolId: PublicKey,\r\n    owner: PublicKey,\r\n    version: number,\r\n  ): {\r\n    publicKey: PublicKey;\r\n    nonce: number;\r\n  } {\r\n    return findProgramAddress(\r\n      [\r\n        Utils1216.SEED_CONFIG.owner.id,\r\n        poolId.toBuffer(),\r\n        owner.toBuffer(),\r\n        // new BN(version).toBuffer()\r\n        Buffer.from(new BN(version).toArray()),\r\n      ],\r\n      programId,\r\n    );\r\n  }\r\n\r\n  static async getAllInfo({\r\n    connection,\r\n    programId,\r\n    poolIds,\r\n    wallet,\r\n    chainTime,\r\n  }: {\r\n    connection: Connection;\r\n    programId: PublicKey;\r\n    poolIds: PublicKey[];\r\n    wallet: PublicKey;\r\n    chainTime: number;\r\n  }): Promise<SHOW_INFO[]> {\r\n    if (poolIds.length === 0) return [];\r\n\r\n    const allPoolPda = poolIds.map((id) => Utils1216.getPdaPoolId(programId, id).publicKey);\r\n\r\n    const allOwnerPda: PublicKey[] = [];\r\n    for (let itemVersion = 0; itemVersion < Utils1216.VERSION_PROJECT.length; itemVersion++) {\r\n      allOwnerPda.push(\r\n        ...allPoolPda.map((id) => Utils1216.getPdaOwnerId(programId, id, wallet, itemVersion).publicKey),\r\n      );\r\n    }\r\n\r\n    const pdaInfo = await getMultipleAccountsInfo(connection, [...allPoolPda, ...allOwnerPda]);\r\n\r\n    const info: SHOW_INFO[] = [];\r\n    for (let index = 0; index < pdaInfo.length; index++) {\r\n      const version = Math.floor(index / poolIds.length);\r\n      const i = index % poolIds.length;\r\n\r\n      const itemPoolId = allPoolPda[i];\r\n      const itemOwnerId = allOwnerPda[index];\r\n      const itemPoolInfoS = pdaInfo[i];\r\n      const itemOwnerInfoS = pdaInfo[poolIds.length + index];\r\n      if (!(itemPoolInfoS && itemOwnerInfoS)) continue;\r\n      if (\r\n        itemPoolInfoS.data.length !== Utils1216.POOL_LAYOUT.span ||\r\n        itemOwnerInfoS.data.length !== Utils1216.OWNER_LAYOUT.span\r\n      )\r\n        continue;\r\n\r\n      const itemPoolInfo = Utils1216.POOL_LAYOUT.decode(itemPoolInfoS.data);\r\n      const itemOwnerInfo = Utils1216.OWNER_LAYOUT.decode(itemOwnerInfoS.data);\r\n\r\n      const openTime = itemPoolInfo.openTime.toNumber();\r\n      const endTime = itemPoolInfo.endTime.toNumber();\r\n\r\n      const hasCanClaimToken =\r\n        itemOwnerInfo.tokenInfo.map((i) => i.debtAmount.gt(new BN(0))).filter((i) => !i).length !== 3;\r\n      const inCanClaimTime = chainTime > openTime && chainTime < endTime && itemPoolInfo.status === 1;\r\n\r\n      const canClaim = hasCanClaimToken && inCanClaimTime;\r\n\r\n      info.push({\r\n        programId,\r\n        poolId: itemPoolId,\r\n        ammId: itemPoolInfo.ammId,\r\n        ownerAccountId: itemOwnerId,\r\n        snapshotLpAmount: itemOwnerInfo.lpAmount,\r\n\r\n        project: Utils1216.VERSION_PROJECT[version],\r\n\r\n        openTime,\r\n        endTime,\r\n\r\n        canClaim,\r\n        canClaimErrorType: !hasCanClaimToken ? \"alreadyClaimIt\" : !inCanClaimTime ? \"outOfOperationalTime\" : undefined,\r\n\r\n        tokenInfo: itemPoolInfo.tokenInfo.map((itemPoolToken, i) => ({\r\n          mintAddress: itemPoolToken.mintAddress,\r\n          mintVault: itemPoolToken.mintVault,\r\n          mintDecimals: itemPoolToken.mintDecimals,\r\n          perLpLoss: itemPoolToken.perLpLoss,\r\n          debtAmount: itemOwnerInfo.tokenInfo[i].debtAmount.add(itemOwnerInfo.tokenInfo[i].claimedAmount),\r\n        })),\r\n      });\r\n    }\r\n\r\n    return info;\r\n  }\r\n\r\n  public async makeClaimTransaction({\r\n    poolInfo,\r\n    ownerInfo,\r\n  }: {\r\n    connection: Connection;\r\n    poolInfo: SHOW_INFO;\r\n    ownerInfo: {\r\n      wallet?: PublicKey;\r\n      associatedOnly: boolean;\r\n    };\r\n  }): Promise<\r\n    {\r\n      transaction: Transaction;\r\n      signer: Signer[];\r\n    }[]\r\n  > {\r\n    if (!ownerInfo.wallet) this.scope.checkOwner();\r\n    const txBuilder = this.createTxBuilder();\r\n    const wallet = ownerInfo.wallet || this.scope.ownerPubKey;\r\n\r\n    const ownerVaultList: PublicKey[] = [];\r\n    for (const itemToken of poolInfo.tokenInfo) {\r\n      const { account, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n        mint: itemToken.mintAddress,\r\n        owner: this.scope.ownerPubKey,\r\n        notUseTokenAccount: itemToken.mintAddress.equals(Token.WSOL.mint),\r\n        createInfo: {\r\n          payer: wallet,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !itemToken.mintAddress.equals(Token.WSOL.mint),\r\n\r\n        associatedOnly: itemToken.mintAddress.equals(Token.WSOL.mint) ? false : ownerInfo.associatedOnly,\r\n      });\r\n      instructionParams && txBuilder.addInstruction(instructionParams);\r\n      ownerVaultList.push(account!);\r\n    }\r\n\r\n    txBuilder.addInstruction({\r\n      instructions: [\r\n        Utils1216.makeClaimInstruction({\r\n          programId: poolInfo.programId,\r\n          poolInfo,\r\n          ownerInfo: {\r\n            wallet,\r\n            ownerPda: poolInfo.ownerAccountId,\r\n            claimAddress: ownerVaultList,\r\n          },\r\n        }),\r\n      ],\r\n    });\r\n    const { transaction, signers } = txBuilder.build();\r\n\r\n    return [\r\n      {\r\n        transaction,\r\n        signer: signers,\r\n      },\r\n    ];\r\n  }\r\n\r\n  public async makeClaimAllTransaction({\r\n    poolInfos,\r\n    ownerInfo,\r\n  }: {\r\n    poolInfos: SHOW_INFO[];\r\n    ownerInfo: {\r\n      wallet?: PublicKey;\r\n      associatedOnly: boolean;\r\n    };\r\n  }): Promise<\r\n    {\r\n      transaction: Transaction;\r\n      signer: Signer[];\r\n    }[]\r\n  > {\r\n    const txBuilder = this.createTxBuilder();\r\n    const wallet = ownerInfo.wallet || this.scope.ownerPubKey;\r\n\r\n    const tempNewVault: { [mint: string]: PublicKey } = {};\r\n\r\n    for (const poolInfo of poolInfos) {\r\n      const ownerVaultList: PublicKey[] = [];\r\n      for (const itemToken of poolInfo.tokenInfo) {\r\n        const { account: tempVault, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n          mint: itemToken.mintAddress,\r\n          owner: this.scope.ownerPubKey,\r\n          notUseTokenAccount: itemToken.mintAddress.equals(Token.WSOL.mint),\r\n          createInfo: {\r\n            payer: wallet,\r\n            amount: 0,\r\n          },\r\n          skipCloseAccount: !itemToken.mintAddress.equals(Token.WSOL.mint),\r\n\r\n          associatedOnly: itemToken.mintAddress.equals(Token.WSOL.mint) ? false : ownerInfo.associatedOnly,\r\n        });\r\n        instructionParams && txBuilder.addInstruction(instructionParams);\r\n\r\n        if (tempVault) {\r\n          tempNewVault[itemToken.mintAddress.toString()] = tempVault;\r\n          ownerVaultList.push(tempVault);\r\n        }\r\n      }\r\n\r\n      txBuilder.addInstruction({\r\n        instructions: [\r\n          Utils1216.makeClaimInstruction({\r\n            programId: poolInfo.programId,\r\n            poolInfo,\r\n            ownerInfo: {\r\n              wallet,\r\n              ownerPda: poolInfo.ownerAccountId,\r\n              claimAddress: ownerVaultList,\r\n            },\r\n          }),\r\n        ],\r\n      });\r\n    }\r\n\r\n    const { transaction, signers } = txBuilder.build();\r\n    const instructions = txBuilder.allInstructions;\r\n\r\n    if (forecastTransactionSize(instructions, [wallet, ...signers.map((s) => s.publicKey)])) {\r\n      return [\r\n        {\r\n          transaction,\r\n          signer: signers,\r\n        },\r\n      ];\r\n    } else {\r\n      return [\r\n        {\r\n          transaction: new Transaction().add(...instructions.slice(0, txBuilder.AllTxData.instructions.length - 1)),\r\n          signer: signers,\r\n        },\r\n        {\r\n          transaction: new Transaction().add(...instructions.slice(txBuilder.AllTxData.instructions.length - 1)),\r\n          signer: [],\r\n        },\r\n        { transaction: new Transaction().add(...txBuilder.AllTxData.endInstructions), signer: [] },\r\n      ];\r\n    }\r\n  }\r\n\r\n  static makeClaimInstruction({\r\n    programId,\r\n    poolInfo,\r\n    ownerInfo,\r\n  }: {\r\n    programId: PublicKey;\r\n\r\n    poolInfo: SHOW_INFO;\r\n    ownerInfo: {\r\n      wallet: PublicKey;\r\n      ownerPda: PublicKey;\r\n      claimAddress: PublicKey[];\r\n    };\r\n  }): TransactionInstruction {\r\n    const dataLayout = struct([]);\r\n\r\n    const keys = [\r\n      { pubkey: ownerInfo.wallet, isSigner: true, isWritable: true },\r\n      { pubkey: poolInfo.poolId, isSigner: false, isWritable: true },\r\n      { pubkey: ownerInfo.ownerPda, isSigner: false, isWritable: true },\r\n\r\n      ...ownerInfo.claimAddress.map((i) => ({ pubkey: i, isSigner: false, isWritable: true })),\r\n      ...poolInfo.tokenInfo.map(({ mintVault }) => ({ pubkey: mintVault, isSigner: false, isWritable: true })),\r\n\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ];\r\n\r\n    const data = Buffer.alloc(dataLayout.span);\r\n    dataLayout.encode({}, data);\r\n    const aData = Buffer.from([...[10, 66, 208, 184, 161, 6, 191, 98], ...data]);\r\n\r\n    return new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data: aData,\r\n    });\r\n  }\r\n}\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport BN from \"bn.js\";\r\nimport ModuleBase from \"../moduleBase\";\r\nimport { TxVersion } from \"@/common/txTool/txType\";\r\nimport { MakeMultiTxData } from \"@/common/txTool/txTool\";\r\nimport { generatePubKey } from \"../account/util\";\r\nimport { BN_ZERO } from \"@/common/bignumber\";\r\nimport { makeCreateMarketInstruction } from \"./instrument\";\r\nimport { ComputeBudgetConfig } from \"@/raydium/type\";\r\n\r\ninterface ExtInfo {\r\n  address: {\r\n    marketId: PublicKey;\r\n    requestQueue: PublicKey;\r\n    eventQueue: PublicKey;\r\n    bids: PublicKey;\r\n    asks: PublicKey;\r\n    baseVault: PublicKey;\r\n    quoteVault: PublicKey;\r\n    baseMint: PublicKey;\r\n    quoteMin: PublicKey;\r\n  };\r\n}\r\n\r\nexport default class MarketV2 extends ModuleBase {\r\n  public async create<T extends TxVersion>({\r\n    baseInfo,\r\n    quoteInfo,\r\n    lotSize, // 1\r\n    tickSize, // 0.01\r\n    dexProgramId,\r\n    requestQueueSpace,\r\n    eventQueueSpace,\r\n    orderbookQueueSpace,\r\n    txVersion,\r\n    computeBudgetConfig,\r\n  }: {\r\n    baseInfo: {\r\n      mint: PublicKey;\r\n      decimals: number;\r\n    };\r\n    quoteInfo: {\r\n      mint: PublicKey;\r\n      decimals: number;\r\n    };\r\n    lotSize: number;\r\n    tickSize: number;\r\n    dexProgramId: PublicKey;\r\n    eventQueue?: PublicKey;\r\n    requestQueue?: PublicKey;\r\n    requestQueueSpace?: number;\r\n    eventQueueSpace?: number;\r\n    orderbookQueueSpace?: number;\r\n    txVersion?: T;\r\n    computeBudgetConfig?: ComputeBudgetConfig;\r\n  }): Promise<MakeMultiTxData<T, ExtInfo>> {\r\n    const wallet = this.scope.ownerPubKey;\r\n    const market = generatePubKey({ fromPublicKey: wallet, programId: dexProgramId });\r\n    const requestQueue = generatePubKey({ fromPublicKey: wallet, programId: dexProgramId });\r\n    const eventQueue = generatePubKey({ fromPublicKey: wallet, programId: dexProgramId });\r\n    const bids = generatePubKey({ fromPublicKey: wallet, programId: dexProgramId });\r\n    const asks = generatePubKey({ fromPublicKey: wallet, programId: dexProgramId });\r\n    const baseVault = generatePubKey({ fromPublicKey: wallet, programId: TOKEN_PROGRAM_ID });\r\n    const quoteVault = generatePubKey({ fromPublicKey: wallet, programId: TOKEN_PROGRAM_ID });\r\n    const feeRateBps = 0;\r\n    const quoteDustThreshold = new BN(100);\r\n    function getVaultOwnerAndNonce() {\r\n      const vaultSignerNonce = new BN(0);\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        try {\r\n          const vaultOwner = PublicKey.createProgramAddressSync(\r\n            [market.publicKey.toBuffer(), vaultSignerNonce.toArrayLike(Buffer, \"le\", 8)],\r\n            dexProgramId,\r\n          );\r\n          return { vaultOwner, vaultSignerNonce };\r\n        } catch (e) {\r\n          vaultSignerNonce.iaddn(1);\r\n          if (vaultSignerNonce.gt(new BN(25555))) throw Error(\"find vault owner error\");\r\n        }\r\n      }\r\n    }\r\n    const { vaultOwner, vaultSignerNonce } = getVaultOwnerAndNonce();\r\n    const baseLotSize = new BN(Math.round(10 ** baseInfo.decimals * lotSize));\r\n    const quoteLotSize = new BN(Math.round(lotSize * 10 ** quoteInfo.decimals * tickSize));\r\n\r\n    if (baseLotSize.eq(BN_ZERO)) throw Error(\"lot size is too small\");\r\n    if (quoteLotSize.eq(BN_ZERO)) throw Error(\"tick size or lot size is too small\");\r\n    const allTxArr = await makeCreateMarketInstruction({\r\n      connection: this.scope.connection,\r\n      wallet: this.scope.ownerPubKey,\r\n      marketInfo: {\r\n        programId: dexProgramId,\r\n        id: market,\r\n        baseMint: baseInfo.mint,\r\n        quoteMint: quoteInfo.mint,\r\n        baseVault,\r\n        quoteVault,\r\n        vaultOwner,\r\n        requestQueue,\r\n        eventQueue,\r\n        bids,\r\n        asks,\r\n\r\n        feeRateBps,\r\n        quoteDustThreshold,\r\n        vaultSignerNonce,\r\n        baseLotSize,\r\n        quoteLotSize,\r\n\r\n        requestQueueSpace,\r\n        eventQueueSpace,\r\n        orderbookQueueSpace,\r\n      },\r\n    });\r\n    const txBuilder = this.createTxBuilder();\r\n    // txBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n    txBuilder.addInstruction({\r\n      instructions: allTxArr[0].transaction.instructions,\r\n      signers: allTxArr[0].signer,\r\n    });\r\n\r\n    // const extraTxBuildData: any[] = [];\r\n\r\n    for await (const txData of allTxArr.slice(1, allTxArr.length)) {\r\n      // const extraTxBuilder = this.createTxBuilder();\r\n      // extraTxBuilder.addCustomComputeBudget(computeBudgetConfig);\r\n      txBuilder.addInstruction({\r\n        instructions: txData.transaction.instructions,\r\n        signers: txData.signer,\r\n        instructionTypes: txData.instructionTypes,\r\n      });\r\n\r\n      // const build = await extraTxBuilder.versionBuild({ txVersion });\r\n      // extraTxBuildData.push(build);\r\n    }\r\n\r\n    if (txVersion === TxVersion.V0)\r\n      return txBuilder.sizeCheckBuildV0({\r\n        computeBudgetConfig,\r\n        address: {\r\n          marketId: market.publicKey,\r\n          requestQueue: requestQueue.publicKey,\r\n          eventQueue: eventQueue.publicKey,\r\n          bids: bids.publicKey,\r\n          asks: asks.publicKey,\r\n          baseVault: baseVault.publicKey,\r\n          quoteVault: quoteVault.publicKey,\r\n          baseMint: new PublicKey(baseInfo.mint),\r\n          quoteMin: new PublicKey(quoteInfo.mint),\r\n        },\r\n      }) as Promise<MakeMultiTxData<T, ExtInfo>>;\r\n\r\n    return txBuilder.sizeCheckBuild({\r\n      computeBudgetConfig,\r\n      address: {\r\n        marketId: market.publicKey,\r\n        requestQueue: requestQueue.publicKey,\r\n        eventQueue: eventQueue.publicKey,\r\n        bids: bids.publicKey,\r\n        asks: asks.publicKey,\r\n        baseVault: baseVault.publicKey,\r\n        quoteVault: quoteVault.publicKey,\r\n        baseMint: new PublicKey(baseInfo.mint),\r\n        quoteMin: new PublicKey(quoteInfo.mint),\r\n      },\r\n    }) as Promise<MakeMultiTxData<T, ExtInfo>>;\r\n  }\r\n}\r\n","import { TransactionInstruction, SYSVAR_RENT_PUBKEY } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { createInitializeAccountInstruction } from \"@solana/spl-token\";\r\nimport { Connection, Keypair, PublicKey, SystemProgram, Transaction } from \"@solana/web3.js\";\r\nimport BN from \"bn.js\";\r\nimport { MARKET_STATE_LAYOUT_V2 } from \"./layout\";\r\nimport { struct, u16, u32, u64, u8 } from \"@/marshmallow\";\r\nimport { InstructionType } from \"@/common/txTool/txType\";\r\n\r\ntype Transactions = {\r\n  transaction: Transaction;\r\n  signer?: Keypair[] | undefined;\r\n  instructionTypes?: string[];\r\n}[];\r\n\r\nexport function initializeMarket({\r\n  programId,\r\n  marketInfo,\r\n}: {\r\n  programId: PublicKey;\r\n  marketInfo: {\r\n    id: PublicKey;\r\n    requestQueue: PublicKey;\r\n    eventQueue: PublicKey;\r\n    bids: PublicKey;\r\n    asks: PublicKey;\r\n    baseVault: PublicKey;\r\n    quoteVault: PublicKey;\r\n    baseMint: PublicKey;\r\n    quoteMint: PublicKey;\r\n    authority?: PublicKey;\r\n    pruneAuthority?: PublicKey;\r\n\r\n    baseLotSize: BN;\r\n    quoteLotSize: BN;\r\n    feeRateBps: number;\r\n    vaultSignerNonce: BN;\r\n    quoteDustThreshold: BN;\r\n  };\r\n}): TransactionInstruction {\r\n  const dataLayout = struct([\r\n    u8(\"version\"),\r\n    u32(\"instruction\"),\r\n    u64(\"baseLotSize\"),\r\n    u64(\"quoteLotSize\"),\r\n    u16(\"feeRateBps\"),\r\n    u64(\"vaultSignerNonce\"),\r\n    u64(\"quoteDustThreshold\"),\r\n  ]);\r\n\r\n  const keys = [\r\n    { pubkey: marketInfo.id, isSigner: false, isWritable: true },\r\n    { pubkey: marketInfo.requestQueue, isSigner: false, isWritable: true },\r\n    { pubkey: marketInfo.eventQueue, isSigner: false, isWritable: true },\r\n    { pubkey: marketInfo.bids, isSigner: false, isWritable: true },\r\n    { pubkey: marketInfo.asks, isSigner: false, isWritable: true },\r\n    { pubkey: marketInfo.baseVault, isSigner: false, isWritable: true },\r\n    { pubkey: marketInfo.quoteVault, isSigner: false, isWritable: true },\r\n    { pubkey: marketInfo.baseMint, isSigner: false, isWritable: false },\r\n    { pubkey: marketInfo.quoteMint, isSigner: false, isWritable: false },\r\n    // Use a dummy address if using the new dex upgrade to save tx space.\r\n    {\r\n      pubkey: marketInfo.authority ? marketInfo.quoteMint : SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ]\r\n    .concat(marketInfo.authority ? { pubkey: marketInfo.authority, isSigner: false, isWritable: false } : [])\r\n    .concat(\r\n      marketInfo.authority && marketInfo.pruneAuthority\r\n        ? { pubkey: marketInfo.pruneAuthority, isSigner: false, isWritable: false }\r\n        : [],\r\n    );\r\n\r\n  const data = Buffer.alloc(dataLayout.span);\r\n  dataLayout.encode(\r\n    {\r\n      version: 0,\r\n      instruction: 0,\r\n      baseLotSize: marketInfo.baseLotSize,\r\n      quoteLotSize: marketInfo.quoteLotSize,\r\n      feeRateBps: marketInfo.feeRateBps,\r\n      vaultSignerNonce: marketInfo.vaultSignerNonce,\r\n      quoteDustThreshold: marketInfo.quoteDustThreshold,\r\n    },\r\n    data,\r\n  );\r\n\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId,\r\n    data,\r\n  });\r\n}\r\n\r\nexport async function makeCreateMarketInstruction({\r\n  connection,\r\n  wallet,\r\n  marketInfo,\r\n}: {\r\n  connection: Connection;\r\n  wallet: PublicKey;\r\n  marketInfo: {\r\n    programId: PublicKey;\r\n    id: { publicKey: PublicKey; seed: string };\r\n    baseMint: PublicKey;\r\n    quoteMint: PublicKey;\r\n    baseVault: { publicKey: PublicKey; seed: string };\r\n    quoteVault: { publicKey: PublicKey; seed: string };\r\n    vaultOwner: PublicKey;\r\n\r\n    requestQueue: { publicKey: PublicKey; seed: string };\r\n    eventQueue: { publicKey: PublicKey; seed: string };\r\n    bids: { publicKey: PublicKey; seed: string };\r\n    asks: { publicKey: PublicKey; seed: string };\r\n\r\n    feeRateBps: number;\r\n    vaultSignerNonce: BN;\r\n    quoteDustThreshold: BN;\r\n\r\n    baseLotSize: BN;\r\n    quoteLotSize: BN;\r\n\r\n    requestQueueSpace?: number;\r\n    eventQueueSpace?: number;\r\n    orderbookQueueSpace?: number;\r\n  };\r\n}): Promise<Transactions> {\r\n  const tx1 = new Transaction();\r\n  const accountLamports = await connection.getMinimumBalanceForRentExemption(165);\r\n  tx1.add(\r\n    SystemProgram.createAccountWithSeed({\r\n      fromPubkey: wallet,\r\n      basePubkey: wallet,\r\n      seed: marketInfo.baseVault.seed,\r\n      newAccountPubkey: marketInfo.baseVault.publicKey,\r\n      lamports: accountLamports,\r\n      space: 165,\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    SystemProgram.createAccountWithSeed({\r\n      fromPubkey: wallet,\r\n      basePubkey: wallet,\r\n      seed: marketInfo.quoteVault.seed,\r\n      newAccountPubkey: marketInfo.quoteVault.publicKey,\r\n      lamports: accountLamports,\r\n      space: 165,\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    createInitializeAccountInstruction(marketInfo.baseVault.publicKey, marketInfo.baseMint, marketInfo.vaultOwner),\r\n    createInitializeAccountInstruction(marketInfo.quoteVault.publicKey, marketInfo.quoteMint, marketInfo.vaultOwner),\r\n  );\r\n\r\n  const tx2 = new Transaction();\r\n  tx2.add(\r\n    SystemProgram.createAccountWithSeed({\r\n      fromPubkey: wallet,\r\n      basePubkey: wallet,\r\n      seed: marketInfo.id.seed,\r\n      newAccountPubkey: marketInfo.id.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(MARKET_STATE_LAYOUT_V2.span),\r\n      space: MARKET_STATE_LAYOUT_V2.span,\r\n      programId: marketInfo.programId,\r\n    }),\r\n    SystemProgram.createAccountWithSeed({\r\n      fromPubkey: wallet,\r\n      basePubkey: wallet,\r\n      seed: marketInfo.requestQueue.seed,\r\n      newAccountPubkey: marketInfo.requestQueue.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(marketInfo.requestQueueSpace ?? 5120 + 12),\r\n      space: marketInfo.requestQueueSpace ?? 5120 + 12,\r\n      programId: marketInfo.programId,\r\n    }),\r\n    SystemProgram.createAccountWithSeed({\r\n      fromPubkey: wallet,\r\n      basePubkey: wallet,\r\n      seed: marketInfo.eventQueue.seed,\r\n      newAccountPubkey: marketInfo.eventQueue.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(marketInfo.eventQueueSpace ?? 262144 + 12),\r\n      space: marketInfo.eventQueueSpace ?? 262144 + 12,\r\n      programId: marketInfo.programId,\r\n    }),\r\n    SystemProgram.createAccountWithSeed({\r\n      fromPubkey: wallet,\r\n      basePubkey: wallet,\r\n      seed: marketInfo.bids.seed,\r\n      newAccountPubkey: marketInfo.bids.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(marketInfo.orderbookQueueSpace ?? 65536 + 12),\r\n      space: marketInfo.orderbookQueueSpace ?? 65536 + 12,\r\n      programId: marketInfo.programId,\r\n    }),\r\n    SystemProgram.createAccountWithSeed({\r\n      fromPubkey: wallet,\r\n      basePubkey: wallet,\r\n      seed: marketInfo.asks.seed,\r\n      newAccountPubkey: marketInfo.asks.publicKey,\r\n      lamports: await connection.getMinimumBalanceForRentExemption(marketInfo.orderbookQueueSpace ?? 65536 + 12),\r\n      space: marketInfo.orderbookQueueSpace ?? 65536 + 12,\r\n      programId: marketInfo.programId,\r\n    }),\r\n    initializeMarket({\r\n      programId: marketInfo.programId,\r\n      marketInfo: {\r\n        id: marketInfo.id.publicKey,\r\n        requestQueue: marketInfo.requestQueue.publicKey,\r\n        eventQueue: marketInfo.eventQueue.publicKey,\r\n        bids: marketInfo.bids.publicKey,\r\n        asks: marketInfo.asks.publicKey,\r\n        baseVault: marketInfo.baseVault.publicKey,\r\n        quoteVault: marketInfo.quoteVault.publicKey,\r\n        baseMint: marketInfo.baseMint,\r\n        quoteMint: marketInfo.quoteMint,\r\n\r\n        baseLotSize: marketInfo.baseLotSize,\r\n        quoteLotSize: marketInfo.quoteLotSize,\r\n        feeRateBps: marketInfo.feeRateBps,\r\n        vaultSignerNonce: marketInfo.vaultSignerNonce,\r\n        quoteDustThreshold: marketInfo.quoteDustThreshold,\r\n      },\r\n    }),\r\n  );\r\n\r\n  return [\r\n    {\r\n      transaction: tx1,\r\n      signer: [],\r\n      instructionTypes: [\r\n        InstructionType.CreateAccount,\r\n        InstructionType.CreateAccount,\r\n        InstructionType.InitAccount,\r\n        InstructionType.InitAccount,\r\n      ],\r\n    },\r\n    {\r\n      transaction: tx2,\r\n      signer: [],\r\n      instructionTypes: [\r\n        InstructionType.CreateAccount,\r\n        InstructionType.CreateAccount,\r\n        InstructionType.CreateAccount,\r\n        InstructionType.CreateAccount,\r\n        InstructionType.CreateAccount,\r\n        InstructionType.InitMarket,\r\n      ],\r\n    },\r\n  ];\r\n}\r\n","import { blob, publicKey, struct, u64, WideBits } from \"@/marshmallow\";\r\n\r\nfunction accountFlagsLayout(property = \"accountFlags\"): WideBits<string> {\r\n  const ACCOUNT_FLAGS_LAYOUT = new WideBits(property);\r\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"initialized\");\r\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"market\");\r\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"openOrders\");\r\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"requestQueue\");\r\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"eventQueue\");\r\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"bids\");\r\n  ACCOUNT_FLAGS_LAYOUT.addBoolean(\"asks\");\r\n  return ACCOUNT_FLAGS_LAYOUT;\r\n}\r\n\r\nexport const MARKET_STATE_LAYOUT_V2 = struct([\r\n  blob(5),\r\n  accountFlagsLayout(\"accountFlags\"),\r\n  publicKey(\"ownAddress\"),\r\n  u64(\"vaultSignerNonce\"),\r\n  publicKey(\"baseMint\"),\r\n  publicKey(\"quoteMint\"),\r\n  publicKey(\"baseVault\"),\r\n  u64(\"baseDepositsTotal\"),\r\n  u64(\"baseFeesAccrued\"),\r\n  publicKey(\"quoteVault\"),\r\n  u64(\"quoteDepositsTotal\"),\r\n  u64(\"quoteFeesAccrued\"),\r\n  u64(\"quoteDustThreshold\"),\r\n  publicKey(\"requestQueue\"),\r\n  publicKey(\"eventQueue\"),\r\n  publicKey(\"bids\"),\r\n  publicKey(\"asks\"),\r\n  u64(\"baseLotSize\"),\r\n  u64(\"quoteLotSize\"),\r\n  u64(\"feeRateBps\"),\r\n  u64(\"referrerRebatesAccrued\"),\r\n  blob(7),\r\n]);\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport ModuleBase from \"../moduleBase\";\r\nimport { makeClaimInstruction, makeClaimInstructionV4 } from \"./instruction\";\r\nimport { jsonInfo2PoolKeys } from \"@/common/utility\";\r\nimport { OwnerIdoInfo, IdoKeysData } from \"@/api/type\";\r\nimport { IDO_ALL_PROGRAM } from \"@/common/programId\";\r\nimport { WSOLMint } from \"@/common/pubKey\";\r\nimport { TxVersion } from \"@/common/txTool/txType\";\r\nimport { MakeTxData } from \"@/common/txTool/txTool\";\r\nimport BN from \"bn.js\";\r\n\r\nconst PROGRAM_TO_VERSION = {\r\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V1.toString()]: 1,\r\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V2.toString()]: 2,\r\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V3.toString()]: 3,\r\n  [IDO_ALL_PROGRAM.IDO_PROGRAM_ID_V4.toString()]: 4,\r\n};\r\n\r\nexport default class MarketV2 extends ModuleBase {\r\n  public async claim<T extends TxVersion>({\r\n    ownerInfo,\r\n    idoKeys,\r\n    associatedOnly = true,\r\n    checkCreateATAOwner = false,\r\n    txVersion,\r\n  }: {\r\n    ownerInfo: OwnerIdoInfo[keyof OwnerIdoInfo] & { userIdoInfo: string };\r\n    idoKeys: IdoKeysData;\r\n    associatedOnly?: boolean;\r\n    checkCreateATAOwner?: boolean;\r\n    txVersion?: T;\r\n  }): Promise<MakeTxData> {\r\n    const txBuilder = this.createTxBuilder();\r\n    const version = PROGRAM_TO_VERSION[idoKeys.programId];\r\n\r\n    if (!version) this.logAndCreateError(\"invalid version\", version);\r\n    const poolConfigKey = jsonInfo2PoolKeys(idoKeys);\r\n\r\n    const [hasUnClaimedProject, hasUnClaimedBuy] = [!new BN(ownerInfo.coin).isZero(), !new BN(ownerInfo.pc).isZero()];\r\n\r\n    const userProjectUseSolBalance = poolConfigKey.projectInfo.mint.address.equals(WSOLMint);\r\n    const { account: userProjectTokenAccount, instructionParams: userProjectInstructionParams } =\r\n      await this.scope.account.getOrCreateTokenAccount({\r\n        tokenProgram: poolConfigKey.projectInfo.mint.programId,\r\n        mint: poolConfigKey.projectInfo.mint.address,\r\n        owner: this.scope.ownerPubKey,\r\n        createInfo: {\r\n          payer: this.scope.ownerPubKey,\r\n          amount: 0,\r\n        },\r\n        skipCloseAccount: !userProjectUseSolBalance,\r\n        notUseTokenAccount: userProjectUseSolBalance,\r\n        associatedOnly: userProjectUseSolBalance ? false : associatedOnly,\r\n        checkCreateATAOwner,\r\n      });\r\n\r\n    if (!userProjectTokenAccount && hasUnClaimedProject)\r\n      this.logAndCreateError(\"target token accounts not found\", \"mint\", idoKeys.projectInfo.mint.address);\r\n    hasUnClaimedProject && userProjectInstructionParams && txBuilder.addInstruction(userProjectInstructionParams);\r\n\r\n    const buyMintUseSolBalance = poolConfigKey.buyInfo.mint.address.equals(WSOLMint);\r\n    const { account: userBuyTokenAccount, instructionParams } = await this.scope.account.getOrCreateTokenAccount({\r\n      tokenProgram: poolConfigKey.buyInfo.mint.programId,\r\n      mint: poolConfigKey.buyInfo.mint.address,\r\n      owner: this.scope.ownerPubKey,\r\n      createInfo: {\r\n        payer: this.scope.ownerPubKey,\r\n        amount: 0,\r\n      },\r\n      skipCloseAccount: !buyMintUseSolBalance,\r\n      notUseTokenAccount: buyMintUseSolBalance,\r\n      associatedOnly: buyMintUseSolBalance ? false : associatedOnly,\r\n      checkCreateATAOwner,\r\n    });\r\n    if (!userProjectTokenAccount && hasUnClaimedBuy)\r\n      this.logAndCreateError(\"target token accounts not found\", \"mint\", idoKeys.projectInfo.mint.address);\r\n    hasUnClaimedBuy && instructionParams && txBuilder.addInstruction(instructionParams);\r\n\r\n    if (!userProjectTokenAccount || !userBuyTokenAccount)\r\n      this.logAndCreateError(\r\n        \"target token accounts not found\",\r\n        \"mint\",\r\n        idoKeys.projectInfo.mint.address,\r\n        idoKeys.buyInfo.mint.address,\r\n      );\r\n\r\n    if (version === 3) {\r\n      return txBuilder\r\n        .addInstruction({\r\n          instructions: [\r\n            ...(hasUnClaimedProject\r\n              ? [\r\n                  makeClaimInstruction<\"3\">(\r\n                    { programId: poolConfigKey.programId },\r\n                    {\r\n                      idoId: poolConfigKey.id,\r\n                      authority: poolConfigKey.authority,\r\n                      poolTokenAccount: poolConfigKey.projectInfo.vault,\r\n                      userTokenAccount: userProjectTokenAccount!,\r\n                      userIdoInfo: new PublicKey(ownerInfo.userIdoInfo),\r\n                      userOwner: this.scope.ownerPubKey,\r\n                    },\r\n                  ),\r\n                ]\r\n              : []),\r\n            ...(hasUnClaimedBuy\r\n              ? [\r\n                  makeClaimInstruction<\"3\">(\r\n                    { programId: new PublicKey(idoKeys.programId) },\r\n                    {\r\n                      idoId: poolConfigKey.id,\r\n                      authority: poolConfigKey.authority,\r\n                      poolTokenAccount: poolConfigKey.buyInfo.vault,\r\n                      userTokenAccount: userBuyTokenAccount!,\r\n                      userIdoInfo: new PublicKey(ownerInfo.userIdoInfo),\r\n                      userOwner: this.scope.ownerPubKey,\r\n                    },\r\n                  ),\r\n                ]\r\n              : []),\r\n          ],\r\n        })\r\n        .versionBuild({ txVersion }) as Promise<MakeTxData>;\r\n    }\r\n    if (version < 3) {\r\n      if (!hasUnClaimedProject && !hasUnClaimedBuy) this.logAndCreateError(\"no claimable rewards\");\r\n      return txBuilder\r\n        .addInstruction({\r\n          instructions: [\r\n            makeClaimInstruction<\"\">(\r\n              { programId: poolConfigKey.programId },\r\n              {\r\n                idoId: poolConfigKey.id,\r\n                authority: poolConfigKey.authority,\r\n                poolQuoteTokenAccount: poolConfigKey.buyInfo.vault,\r\n                poolBaseTokenAccount: poolConfigKey.projectInfo.vault,\r\n                userQuoteTokenAccount: userBuyTokenAccount!,\r\n                userBaseTokenAccount: userProjectTokenAccount!,\r\n                userIdoInfo: new PublicKey(ownerInfo.userIdoInfo),\r\n                userOwner: this.scope.ownerPubKey,\r\n              },\r\n            ),\r\n          ],\r\n        })\r\n        .versionBuild({ txVersion }) as Promise<MakeTxData>;\r\n    }\r\n\r\n    const keys = {\r\n      poolConfig: {\r\n        id: poolConfigKey.id,\r\n        programId: poolConfigKey.programId,\r\n        authority: poolConfigKey.authority,\r\n        baseVault: poolConfigKey.projectInfo.vault,\r\n        quoteVault: poolConfigKey.buyInfo.vault,\r\n        baseToken: idoKeys.projectInfo.mint,\r\n        quoteToken: idoKeys.buyInfo.mint,\r\n      },\r\n      userKeys: {\r\n        baseTokenAccount: userProjectTokenAccount!,\r\n        quoteTokenAccount: userBuyTokenAccount!,\r\n        ledgerAccount: new PublicKey(ownerInfo.userIdoInfo),\r\n        owner: this.scope.ownerPubKey,\r\n      },\r\n    };\r\n\r\n    return txBuilder\r\n      .addInstruction({\r\n        instructions: [\r\n          ...(hasUnClaimedProject ? [makeClaimInstructionV4({ ...keys, side: \"base\" })] : []),\r\n          ...(hasUnClaimedBuy ? [makeClaimInstructionV4({ ...keys, side: \"quote\" })] : []),\r\n        ],\r\n      })\r\n      .versionBuild({ txVersion }) as Promise<MakeTxData>;\r\n  }\r\n}\r\n","import { PublicKey, TransactionInstruction, SYSVAR_CLOCK_PUBKEY } from \"@solana/web3.js\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport { RENT_PROGRAM_ID, CLOCK_PROGRAM_ID, SYSTEM_PROGRAM_ID } from \"@/common/pubKey\";\r\nimport {\r\n  PurchaseInstructionKeys,\r\n  ClaimInstructionKeysV3,\r\n  ClaimInstructionKeys,\r\n  IdoClaimInstructionParams,\r\n} from \"./type\";\r\nimport { purchaseLayout, claimLayout } from \"./layout\";\r\n\r\nexport function makePurchaseInstruction({\r\n  programId,\r\n  amount,\r\n  instructionKeys,\r\n}: {\r\n  programId: PublicKey;\r\n  amount: string | number;\r\n  instructionKeys: PurchaseInstructionKeys;\r\n}): TransactionInstruction {\r\n  const keys = [\r\n    // system\r\n    { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: RENT_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: CLOCK_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    // pubkeys\r\n    ...Object.entries(instructionKeys).map(([name, pubkey]) => ({\r\n      pubkey,\r\n      isSigner: name === \"userOwner\",\r\n      isWritable: ![\"authority\", \"userOwner\", \"userIdoCheck\", \"userStakeInfo\"].includes(name),\r\n    })),\r\n  ];\r\n\r\n  const data = Buffer.alloc(purchaseLayout.span);\r\n  purchaseLayout.encode({ instruction: 1, amount: Number(amount) }, data);\r\n\r\n  return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\nexport function makeClaimInstruction<Version extends \"\" | \"3\" = \"\">(\r\n  { programId }: { programId: PublicKey },\r\n  instructionKeys: Version extends \"3\" ? ClaimInstructionKeysV3 : ClaimInstructionKeys,\r\n): TransactionInstruction {\r\n  const keys = [\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    { pubkey: CLOCK_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    ...Object.entries(instructionKeys).map(([name, pubkey]) => ({\r\n      pubkey,\r\n      isSigner: name === \"userOwner\",\r\n      isWritable: ![\"authority\", \"userOwner\"].includes(name),\r\n    })),\r\n  ];\r\n\r\n  const data = Buffer.alloc(claimLayout.span);\r\n  claimLayout.encode({ instruction: 2 }, data);\r\n\r\n  return new TransactionInstruction({ keys, programId, data });\r\n}\r\n\r\nexport function makeClaimInstructionV4(params: IdoClaimInstructionParams): TransactionInstruction {\r\n  const { poolConfig, userKeys, side } = params;\r\n\r\n  const tokenAccount = side === \"base\" ? userKeys.baseTokenAccount : userKeys.quoteTokenAccount;\r\n  const vault = side === \"base\" ? poolConfig.baseVault : poolConfig.quoteVault;\r\n  const data = Buffer.alloc(claimLayout.span);\r\n  claimLayout.encode(\r\n    {\r\n      instruction: 2,\r\n    },\r\n    data,\r\n  );\r\n\r\n  const keys = [\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_CLOCK_PUBKEY,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    // ido\r\n    {\r\n      pubkey: poolConfig.id,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: poolConfig.authority,\r\n      isWritable: false,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: vault,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    // user\r\n    {\r\n      pubkey: tokenAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: userKeys.ledgerAccount,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    },\r\n    {\r\n      pubkey: userKeys.owner,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    },\r\n  ];\r\n\r\n  return new TransactionInstruction({\r\n    programId: poolConfig.programId,\r\n    keys,\r\n    data,\r\n  });\r\n}\r\n","import { nu64, struct, u8 } from \"@/marshmallow\";\r\n\r\nexport const purchaseLayout = struct([u8(\"instruction\"), nu64(\"amount\")]);\r\nexport const claimLayout = struct([u8(\"instruction\")]);\r\n","import { PublicKey } from \"@solana/web3.js\";\r\nimport { MintLayout, TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\n\r\nimport { ApiV3Token, JupTokenType } from \"@/api/type\";\r\nimport ModuleBase, { ModuleBaseProps } from \"../moduleBase\";\r\nimport { LoadParams } from \"../type\";\r\n\r\nimport { TokenInfo } from \"./type\";\r\nimport { SOL_INFO } from \"./constant\";\r\n\r\nexport default class TokenModule extends ModuleBase {\r\n  private _tokenList: TokenInfo[] = [];\r\n  private _tokenMap: Map<string, TokenInfo> = new Map();\r\n  private _blackTokenMap: Map<string, TokenInfo> = new Map();\r\n  private _mintGroup: { official: Set<string>; jup: Set<string>; extra: Set<string> } = {\r\n    official: new Set(),\r\n    jup: new Set(),\r\n    extra: new Set(),\r\n  };\r\n  private _whiteMap: Set<string> = new Set();\r\n  private _extraTokenList: TokenInfo[] = [];\r\n\r\n  constructor(params: ModuleBaseProps) {\r\n    super(params);\r\n  }\r\n\r\n  public async load(params?: LoadParams & { type?: JupTokenType }): Promise<void> {\r\n    this.checkDisabled();\r\n    const { forceUpdate = false, type = JupTokenType.Strict } = params || {};\r\n    const { mintList, blacklist, whiteList } = await this.scope.fetchV3TokenList(forceUpdate);\r\n    const jup = await this.scope.fetchJupTokenList(forceUpdate);\r\n    // reset all data\r\n    this._tokenList = [];\r\n    this._tokenMap = new Map();\r\n    this._blackTokenMap = new Map();\r\n    this._mintGroup = { official: new Set(), jup: new Set(), extra: new Set() };\r\n    this._whiteMap = new Set(whiteList);\r\n\r\n    this._tokenMap.set(SOL_INFO.address, SOL_INFO);\r\n    this._mintGroup.official.add(SOL_INFO.address);\r\n    blacklist.forEach((token) => {\r\n      this._blackTokenMap.set(token.address, { ...token, priority: -1 });\r\n    });\r\n\r\n    mintList.forEach((token) => {\r\n      if (this._blackTokenMap.has(token.address)) return;\r\n      this._tokenMap.set(token.address, {\r\n        ...token,\r\n        type: \"raydium\",\r\n        priority: 2,\r\n        programId:\r\n          token.programId ??\r\n          (token.tags.includes(\"token-2022\") ? TOKEN_2022_PROGRAM_ID.toBase58() : TOKEN_PROGRAM_ID.toBase58()),\r\n      });\r\n      this._mintGroup.official.add(token.address);\r\n    });\r\n\r\n    jup.forEach((token) => {\r\n      if (this._blackTokenMap.has(token.address) || this._tokenMap.has(token.address)) return;\r\n      this._tokenMap.set(token.address, {\r\n        ...token,\r\n        type: \"jupiter\",\r\n        priority: 1,\r\n        programId:\r\n          token.programId ??\r\n          (token.tags.includes(\"token-2022\") ? TOKEN_2022_PROGRAM_ID.toBase58() : TOKEN_PROGRAM_ID.toBase58()),\r\n      });\r\n      this._mintGroup.jup.add(token.address);\r\n    });\r\n\r\n    this._extraTokenList.forEach((token) => {\r\n      if (this._blackTokenMap.has(token.address) || this._tokenMap.has(token.address)) return;\r\n      this._tokenMap.set(token.address, {\r\n        ...token,\r\n        type: \"extra\",\r\n        priority: 1,\r\n        programId:\r\n          token.programId || token.tags.includes(\"token-2022\")\r\n            ? TOKEN_2022_PROGRAM_ID.toBase58()\r\n            : TOKEN_PROGRAM_ID.toBase58(),\r\n      });\r\n      this._mintGroup.extra.add(token.address);\r\n    });\r\n\r\n    this._tokenList = Array.from(this._tokenMap).map((data) => data[1]);\r\n  }\r\n\r\n  get tokenList(): TokenInfo[] {\r\n    return this._tokenList;\r\n  }\r\n  get tokenMap(): Map<string, TokenInfo> {\r\n    return this._tokenMap;\r\n  }\r\n  get blackTokenMap(): Map<string, TokenInfo> {\r\n    return this._blackTokenMap;\r\n  }\r\n  get mintGroup(): { official: Set<string>; jup: Set<string> } {\r\n    return this._mintGroup;\r\n  }\r\n  get whiteListMap(): Set<string> {\r\n    return this._whiteMap;\r\n  }\r\n\r\n  /** === util functions === */\r\n\r\n  public async getTokenInfo(mint: string | PublicKey): Promise<ApiV3Token> {\r\n    if (!mint) throw new Error(\"please input mint\");\r\n    const mintStr = mint.toString();\r\n    const info = this._tokenMap.get(mintStr);\r\n    if (info) return info;\r\n    if (mintStr.toLocaleUpperCase() === \"SOL\") return SOL_INFO;\r\n\r\n    const apiTokenInfo = (await this.scope.api.getTokenInfo([mintStr]))[0];\r\n    if (apiTokenInfo) {\r\n      this._mintGroup.extra.add(mintStr);\r\n      this._tokenMap.set(mintStr, { ...apiTokenInfo, priority: 2 });\r\n      return apiTokenInfo;\r\n    }\r\n\r\n    const onlineInfo = await this.scope.connection.getAccountInfo(new PublicKey(mintStr));\r\n    if (!onlineInfo) throw new Error(`mint address not found: ${mintStr}`);\r\n    const data = MintLayout.decode(onlineInfo.data);\r\n    const mintSymbol = mintStr.toString().substring(0, 6);\r\n    const fullInfo = {\r\n      chainId: 101,\r\n      address: mintStr,\r\n      programId: onlineInfo.owner.toBase58(),\r\n      logoURI: \"\",\r\n      symbol: mintSymbol,\r\n      name: mintSymbol,\r\n      decimals: data.decimals,\r\n      tags: [],\r\n      extensions: {},\r\n      priority: 0,\r\n      type: \"unknown\",\r\n    };\r\n    this._mintGroup.extra.add(mintStr);\r\n    this._tokenMap.set(mintStr, fullInfo);\r\n    return fullInfo;\r\n  }\r\n}\r\n"],"mappings":"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","names":[]}